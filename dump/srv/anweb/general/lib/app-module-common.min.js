!(function(modules) {
  function __webpack_require__(moduleId) {
    if (installedModules[moduleId]) return installedModules[moduleId].exports;
    var module = (installedModules[moduleId] = {
      exports: {},
      id: moduleId,
      loaded: !1,
    });
    return (
      modules[moduleId].call(
        module.exports,
        module,
        module.exports,
        __webpack_require__
      ),
      (module.loaded = !0),
      module.exports
    );
  }
  var parentJsonpFunction = window.webpackJsonp;
  window.webpackJsonp = function(chunkIds, moreModules) {
    for (var moduleId, chunkId, i = 0, callbacks = []; i < chunkIds.length; i++)
      (chunkId = chunkIds[i]),
        installedChunks[chunkId] &&
          callbacks.push.apply(callbacks, installedChunks[chunkId]),
        (installedChunks[chunkId] = 0);
    for (moduleId in moreModules) modules[moduleId] = moreModules[moduleId];
    for (
      parentJsonpFunction && parentJsonpFunction(chunkIds, moreModules);
      callbacks.length;

    )
      callbacks.shift().call(null, __webpack_require__);
    return moreModules[0]
      ? ((installedModules[0] = 0), __webpack_require__(0))
      : void 0;
  };
  var installedModules = {},
    installedChunks = {
      4: 0,
    };
  (__webpack_require__.e = function(chunkId, callback) {
    if (0 === installedChunks[chunkId])
      return callback.call(null, __webpack_require__);
    if (void 0 !== installedChunks[chunkId])
      installedChunks[chunkId].push(callback);
    else {
      installedChunks[chunkId] = [callback];
      var head = document.getElementsByTagName('head')[0],
        script = document.createElement('script');
      (script.type = 'text/javascript'),
        (script.charset = 'utf-8'),
        (script.async = !0),
        (script.src =
          __webpack_require__.p +
          '' +
          chunkId +
          '.' +
          ({
            0: 'angular-dcc-device',
            1: 'angular-dcc-manual',
            2: 'angular-device',
            3: 'angular-funcs',
          }[chunkId] || chunkId) +
          '.min.js'),
        head.appendChild(script);
    }
  }),
    (__webpack_require__.m = modules),
    (__webpack_require__.c = installedModules),
    (__webpack_require__.p = '');
})([
  ,
  ,
  function(module, exports, __webpack_require__) {
    'use strict';
    var _ = __webpack_require__(3),
      funcs = (__webpack_require__(4), __webpack_require__(5));
    module.exports = function(moduleName) {
      angular.module(moduleName).provider('somovd', function() {
        var providerObj = {
          somovdEndPoint: null,
          $get: [
            '$http',
            '$q',
            function($http, $q) {
              function Somovd(config) {
                function post(opt) {
                  if (
                    ((opt.config = opt.config
                      ? _.extend(opt.config, config)
                      : config),
                    taskLimit > taskCount)
                  ) {
                    var successCb = function(data, status, headers, config) {
                        data.result
                          ? (data = data.error ? data.error : data.result)
                          : _.isArray(data) &&
                            (data = {
                              rq: _.map(data, function(item) {
                                return item.error ? item.error : item.result;
                              }),
                            }),
                          opt.cb && opt.cb(data),
                          opt.defer.resolve(data);
                      },
                      errorCb = function(data, status, headers, config) {
                        opt.defer.reject(data);
                      },
                      finallyCb = function() {
                        for (
                          var _len = arguments.length,
                            params = Array(_len),
                            _key = 0;
                          _len > _key;
                          _key++
                        )
                          params[_key] = arguments[_key];
                        taskCount--,
                          _.each(doneHooks, function(hook) {
                            hook && hook.apply(void 0, params);
                          }),
                          taskQueue.length && post(taskQueue.shift());
                      };
                    taskCount++,
                      $http
                        .post(
                          providerObj.somovdEndPoint,
                          opt.request,
                          opt.config
                        )
                        .success(successCb)
                        .error(errorCb)
                        ['finally'](finallyCb);
                  } else taskQueue.push(opt);
                }

                function prepare(opt) {
                  (opt.defer = $q.defer()),
                    $q
                      .all(
                        _.map(prepareHooks, function(hook) {
                          return hook(_.flatten([opt.request]));
                        })
                      )
                      .then(function() {
                        post(opt);
                      })
                      ['catch'](function() {
                        opt.defer.reject();
                      });
                  var promise = opt.defer.promise;
                  return publish(opt), promise;
                }

                function jsonrpc(method, params) {
                  return {
                    jsonrpc: '2.0',
                    method: method,
                    params: params,
                    id: _.random(1e3),
                  };
                }

                function subscribe(method, params, handler) {
                  subscribes.push({
                    method: method,
                    params: params,
                    handler: handler,
                  });
                }

                function publish(opt) {
                  function checkSubscribe(subscribe, request) {
                    function hasParam(elem, params) {
                      return _.every(params, function(value, key) {
                        return (
                          elem[key] &&
                          (elem[key] == value ||
                            (_.isObject(value) && _.isEqual(elem[key], value)))
                        );
                      });
                    }
                    var method = subscribe.method,
                      params = subscribe.params;
                    _.isArray(request) || (request = [request]);
                    var positions = [];
                    return (
                      _.each(request, function(elem, inx) {
                        elem.method == method &&
                          hasParam(elem.params, params) &&
                          positions.push(inx);
                      }),
                      positions
                    );
                  }
                  _.each(subscribes, function(elem) {
                    function success(result) {
                      _.each(requestPositions, function(pos) {
                        var output = _.has(result, 'rq')
                          ? result.rq[pos]
                          : result;
                        (output.request = _.isArray(opt.request)
                          ? opt.request[pos]
                          : opt.request),
                          elem.handler(null, output);
                      });
                    }

                    function error(error) {
                      elem.handler(error);
                    }
                    var requestPositions = checkSubscribe(elem, opt.request);
                    requestPositions.length &&
                      opt.defer.promise.then(success, error);
                  });
                }
                var taskQueue = [],
                  taskLimit = 1,
                  taskCount = 0,
                  prepareHooks = [],
                  doneHooks = [],
                  subscribes = [];
                return {
                  subscribe: subscribe,
                  publish: publish,
                  getInstance: function(config) {
                    return Somovd(config);
                  },
                  prepareHook: function(cb) {
                    prepareHooks.push(cb);
                  },
                  doneHook: function(cb) {
                    doneHooks.push(cb);
                  },
                  read: function() {
                    var args = new funcs.argSchema(arguments);
                    return args.checkin(
                      'number id',
                      'opt function cb',
                      'opt object options'
                    )
                      ? prepare({
                          request: jsonrpc('read', {
                            id: args.id,
                            options: args.options,
                          }),
                          cb: args.cb,
                        })
                      : args.checkin(
                          'array pack',
                          'opt function cb',
                          'opt object options'
                        )
                        ? prepare({
                            request: _.map(args.pack, function(id) {
                              return jsonrpc('read', {
                                id: id,
                                options: args.options,
                              });
                            }),
                            cb: args.cb,
                          })
                        : void 0;
                  },
                  write: function() {
                    var args = new funcs.argSchema(arguments);
                    if (
                      args.checkin(
                        'number id',
                        'object data',
                        'opt number pos',
                        'opt bool save',
                        'opt function cb',
                        'opt object options'
                      )
                    )
                      return prepare({
                        request: jsonrpc('write', {
                          id: args.id,
                          pos: args.pos,
                          data: args.data,
                          save: !0,
                          options: args.options,
                        }),
                        cb: args.cb,
                      });
                    if (
                      args.checkin(
                        'array pack',
                        'opt bool save',
                        'opt function cb',
                        'opt object options'
                      )
                    ) {
                      var req = _.map(args.pack, function(item) {
                        return jsonrpc('write', {
                          id: item.id,
                          pos: item.pos,
                          data: item.data,
                          options: args.options,
                        });
                      });
                      return (
                        req.push(
                          jsonrpc('cmd', {
                            id: 20,
                          })
                        ),
                        prepare({
                          request: req,
                          cb: args.cb,
                        })
                      );
                    }
                  },
                  remove: function() {
                    var args = new funcs.argSchema(arguments);
                    if (
                      args.checkin(
                        'number id',
                        'object data',
                        'opt number pos',
                        'opt bool save',
                        'opt function cb'
                      )
                    )
                      return prepare({
                        request: jsonrpc('remove', {
                          id: args.id,
                          pos: args.pos,
                          data: args.data,
                          save: !0,
                        }),
                        cb: args.cb,
                      });
                    if (
                      args.checkin(
                        'array pack',
                        'opt bool save',
                        'opt function cb'
                      )
                    ) {
                      var req = _.map(args.pack, function(item) {
                        return jsonrpc('remove', {
                          id: item.id,
                          pos: item.pos,
                          data: item.data,
                        });
                      });
                      return (
                        req.push(
                          jsonrpc('cmd', {
                            id: 20,
                          })
                        ),
                        prepare({
                          request: req,
                          cb: args.cb,
                        })
                      );
                    }
                  },
                  multi: function() {
                    var args = new funcs.argSchema(arguments);
                    if (
                      args.checkin(
                        'object pack',
                        'opt bool save',
                        'opt function cb'
                      )
                    ) {
                      var req = [];
                      return (
                        _.each(args.pack.remove, function(item) {
                          req.push(
                            jsonrpc('remove', {
                              id: item.id,
                              data: item.data,
                              pos: item.pos,
                            })
                          );
                        }),
                        _.each(args.pack.write, function(item) {
                          req.push(
                            jsonrpc('write', {
                              id: item.id,
                              data: item.data,
                              pos: item.pos,
                            })
                          );
                        }),
                        _.each(args.pack.read, function(id) {
                          req.push(
                            jsonrpc('read', {
                              id: id,
                            })
                          );
                        }),
                        req.push(
                          jsonrpc('cmd', {
                            id: 20,
                          })
                        ),
                        prepare({
                          request: req,
                          cb: args.cb,
                        })
                      );
                    }
                  },
                  reboot: function(save, cb) {
                    return prepare({
                      request: jsonrpc('cmd', {
                        id: save ? 8 : 6,
                      }),
                      cb: cb,
                      config: {
                        timeout: 5e3,
                      },
                    });
                  },
                  save: function(cb) {
                    return prepare({
                      request: jsonrpc('cmd', {
                        id: 20,
                      }),
                      cb: cb,
                    });
                  },
                  reset: function(cb) {
                    return prepare({
                      request: jsonrpc('cmd', {
                        id: 10,
                      }),
                      cb: cb,
                      config: {
                        timeout: 5e3,
                      },
                    });
                  },
                  backup: function(cb) {
                    return prepare({
                      request: jsonrpc('cmd', {
                        id: 12,
                      }),
                      cb: cb,
                    });
                  },
                };
              }
              return Somovd();
            },
          ],
        };
        return providerObj;
      });
    };
  },
  function(module, exports) {
    module.exports = _;
  },
  function(module, exports, __webpack_require__) {
    'use strict';
    var funcs = __webpack_require__(5);
    module.exports = function() {
      var providerObj = {
        somovdEndPoint: null,
        $get: [
          '$http',
          '$q',
          function($http, $q) {
            function post(opt) {
              if (taskLimit > taskCount) {
                var successCb = function(data, status, headers, config) {
                    data.result
                      ? (data = data.error ? data.error : data.result)
                      : _.isArray(data) &&
                        (data = {
                          rq: _.map(data, function(item) {
                            return item.error ? item.error : item.result;
                          }),
                        }),
                      opt.cb && opt.cb(data),
                      opt.defer.resolve(data);
                  },
                  errorCb = function(data, status, headers, config) {
                    opt.defer.reject(data);
                  },
                  finallyCb = function() {
                    for (
                      var _len = arguments.length,
                        params = Array(_len),
                        _key = 0;
                      _len > _key;
                      _key++
                    )
                      params[_key] = arguments[_key];
                    taskCount--,
                      _.each(doneHooks, function(hook) {
                        hook && hook.apply(void 0, params);
                      }),
                      taskQueue.length && post(taskQueue.shift());
                  };
                taskCount++,
                  $http
                    .post(providerObj.somovdEndPoint, opt.request, opt.config)
                    .success(successCb)
                    .error(errorCb)
                    ['finally'](finallyCb);
              } else taskQueue.push(opt);
            }

            function prepare(opt) {
              (opt.defer = $q.defer()),
                $q
                  .all(
                    _.map(prepareHooks, function(hook) {
                      return hook(_.flatten([opt.request]));
                    })
                  )
                  .then(function() {
                    post(opt);
                  })
                  ['catch'](function() {
                    opt.defer.reject();
                  });
              var promise = opt.defer.promise;
              return publish(opt), promise;
            }

            function jsonrpc(method, params) {
              return {
                jsonrpc: '2.0',
                method: method,
                params: params,
                id: _.random(1e3),
              };
            }

            function subscribe(method, params, handler) {
              subscribes.push({
                method: method,
                params: params,
                handler: handler,
              });
            }

            function publish(opt) {
              function checkSubscribe(subscribe, request) {
                function hasParam(elem, params) {
                  return _.every(params, function(value, key) {
                    return (
                      elem[key] &&
                      (elem[key] == value ||
                        (_.isObject(value) && _.isEqual(elem[key], value)))
                    );
                  });
                }
                var method = subscribe.method,
                  params = subscribe.params;
                _.isArray(request) || (request = [request]);
                var positions = [];
                return (
                  _.each(request, function(elem, inx) {
                    elem.method == method &&
                      hasParam(elem.params, params) &&
                      positions.push(inx);
                  }),
                  positions
                );
              }
              _.each(subscribes, function(elem) {
                function success(result) {
                  _.each(requestPositions, function(pos) {
                    var output = _.has(result, 'rq') ? result.rq[pos] : result;
                    (output.request = _.isArray(opt.request)
                      ? opt.request[pos]
                      : opt.request),
                      elem.handler(null, output);
                  });
                }

                function error(error) {
                  elem.handler(error);
                }
                var requestPositions = checkSubscribe(elem, opt.request);
                requestPositions.length &&
                  opt.defer.promise.then(success, error);
              });
            }
            var taskQueue = [],
              taskLimit = 1,
              taskCount = 0,
              prepareHooks = [],
              doneHooks = [],
              subscribes = [];
            return {
              subscribe: subscribe,
              publish: publish,
              prepareHook: function(cb) {
                prepareHooks.push(cb);
              },
              doneHook: function(cb) {
                doneHooks.push(cb);
              },
              read: function() {
                var args = new funcs.argSchema(arguments);
                return args.checkin('number id', 'opt function cb')
                  ? prepare({
                      request: jsonrpc('read', {
                        id: args.id,
                      }),
                      cb: args.cb,
                    })
                  : args.checkin('array pack', 'opt function cb')
                    ? prepare({
                        request: _.map(args.pack, function(id) {
                          return jsonrpc('read', {
                            id: id,
                          });
                        }),
                        cb: args.cb,
                      })
                    : void 0;
              },
              write: function() {
                var args = new funcs.argSchema(arguments);
                if (
                  args.checkin(
                    'number id',
                    'object data',
                    'opt number pos',
                    'opt bool save',
                    'opt function cb'
                  )
                )
                  return prepare({
                    request: jsonrpc('write', {
                      id: args.id,
                      pos: args.pos,
                      data: args.data,
                      save: !0,
                    }),
                    cb: args.cb,
                  });
                if (
                  args.checkin('array pack', 'opt bool save', 'opt function cb')
                ) {
                  var req = _.map(args.pack, function(item) {
                    return jsonrpc('write', {
                      id: item.id,
                      pos: item.pos,
                      data: item.data,
                    });
                  });
                  return (
                    req.push(
                      jsonrpc('cmd', {
                        id: 20,
                      })
                    ),
                    prepare({
                      request: req,
                      cb: args.cb,
                    })
                  );
                }
              },
              remove: function() {
                var args = new funcs.argSchema(arguments);
                if (
                  args.checkin(
                    'number id',
                    'object data',
                    'opt number pos',
                    'opt bool save',
                    'opt function cb'
                  )
                )
                  return prepare({
                    request: jsonrpc('remove', {
                      id: args.id,
                      pos: args.pos,
                      data: args.data,
                      save: !0,
                    }),
                    cb: args.cb,
                  });
                if (
                  args.checkin('array pack', 'opt bool save', 'opt function cb')
                ) {
                  var req = _.map(args.pack, function(item) {
                    return jsonrpc('remove', {
                      id: item.id,
                      pos: item.pos,
                      data: item.data,
                    });
                  });
                  return (
                    req.push(
                      jsonrpc('cmd', {
                        id: 20,
                      })
                    ),
                    prepare({
                      request: req,
                      cb: args.cb,
                    })
                  );
                }
              },
              multi: function() {
                var args = new funcs.argSchema(arguments);
                if (
                  args.checkin(
                    'object pack',
                    'opt bool save',
                    'opt function cb'
                  )
                ) {
                  var req = [];
                  return (
                    _.each(args.pack.remove, function(item) {
                      req.push(
                        jsonrpc('remove', {
                          id: item.id,
                          data: item.data,
                          pos: item.pos,
                        })
                      );
                    }),
                    _.each(args.pack.write, function(item) {
                      req.push(
                        jsonrpc('write', {
                          id: item.id,
                          data: item.data,
                          pos: item.pos,
                        })
                      );
                    }),
                    _.each(args.pack.read, function(id) {
                      req.push(
                        jsonrpc('read', {
                          id: id,
                        })
                      );
                    }),
                    req.push(
                      jsonrpc('cmd', {
                        id: 20,
                      })
                    ),
                    prepare({
                      request: req,
                      cb: args.cb,
                    })
                  );
                }
              },
              reboot: function(save, cb) {
                return prepare({
                  request: jsonrpc('cmd', {
                    id: save ? 8 : 6,
                  }),
                  cb: cb,
                  config: {
                    timeout: 5e3,
                  },
                });
              },
              save: function(cb) {
                return prepare({
                  request: jsonrpc('cmd', {
                    id: 20,
                  }),
                  cb: cb,
                });
              },
              reset: function(cb) {
                return prepare({
                  request: jsonrpc('cmd', {
                    id: 10,
                  }),
                  cb: cb,
                  config: {
                    timeout: 5e3,
                  },
                });
              },
              backup: function(cb) {
                return prepare({
                  request: jsonrpc('cmd', {
                    id: 12,
                  }),
                  cb: cb,
                });
              },
            };
          },
        ],
      };
      return providerObj;
    };
  },
  function(module, exports, __webpack_require__) {
    'use strict';
    var _ = __webpack_require__(3),
      shared = __webpack_require__(6),
      ipv4 = __webpack_require__(74),
      ipv6 = __webpack_require__(75),
      is = __webpack_require__(73),
      wifi = __webpack_require__(76),
      newConfig = __webpack_require__(77),
      format = __webpack_require__(78),
      customValidation = __webpack_require__(79),
      funcs = _.extend({}, shared);
    (funcs.ipv4 = ipv4),
      (funcs.ipv6 = ipv6),
      (funcs.is = is),
      (funcs.wifiHelper = wifi),
      (funcs.newConfig = newConfig),
      (funcs.format = format),
      (funcs.customValidation = customValidation),
      (module.exports = funcs);
  },
  function(module, exports, __webpack_require__) {
    'use strict';

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule
        ? obj
        : {
            default: obj,
          };
    }

    function lngDummy(value) {
      return value;
    }

    function lookSize(size, metric) {
      metric || (metric = 'byte');
      var metrics = {
          byte: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
          bit: ['b', 'Kb', 'Mb', 'Gb', 'Tb', 'Pb', 'Eb', 'Zb', 'Yb'],
        },
        i = 0;
      (size = new Number(size)), 'bit' == metric && (size *= 8);
      for (
        var useMetric = metrics[metric];
        size >= 1024 && i < useMetric.length - 1;

      )
        (size /= 1024), i++;
      return {
        value: size > 0 ? size.toFixed(2) : '0.00',
        metric: size > 0 ? useMetric[i] : useMetric[0],
        toString: function(translate) {
          var lng = translate || lngDummy;
          return this.value + ' ' + lng(this.metric);
        },
      };
    }

    function lookTime(time) {
      var t = {
        D: null,
        H: null,
        M: null,
        S: time,
        toString: function(translate) {
          var lng = translate || lngDummy,
            r = '';
          return (
            this.D && (r += this.D + lng('D') + ' '),
            this.H && (r += this.H + lng('H') + ' '),
            this.M && (r += this.M + lng('M') + ' '),
            this.S >= 0 && (r += this.S + lng('S')),
            r
          );
        },
      };
      return (
        t.S >= 60 && ((t.M = Math.floor(t.S / 60)), (t.S = t.S - 60 * t.M)),
        t.M >= 60 && ((t.H = Math.floor(t.M / 60)), (t.M = t.M - 60 * t.H)),
        t.H >= 24 && ((t.D = Math.floor(t.H / 24)), (t.H = t.H - 24 * t.D)),
        t
      );
    }

    function setValue(path, data, obj) {
      if (path) {
        for (
          var o, p, arr = path.split('.'), subObj = obj, i = 0;
          i < arr.length - 1;
          i++
        )
          (p = arr[i]),
            (o = subObj[p]),
            o || (o = {}),
            (subObj = subObj[p] = o);
        return (subObj[arr[arr.length - 1]] = data), obj;
      }
      return null;
    }

    function fetchBranch(tree, path) {
      if (!path) return tree;
      var matched = path.match(/^[#|\w|\x2b|-]+\.*/);
      if (!matched) return null;
      var addr = matched[0],
        pathRest = path.replace(/^[#|\w|\x2b|-]+\.*/, ''),
        key = addr.match(/^[#|\w|\x2b|-]+/)[0];
      matched = addr.match(/\.$/);
      var period = matched ? matched[0] : null,
        branch = tree[key];
      return period &&
        'object' ==
          ('undefined' == typeof branch
            ? 'undefined'
            : _typeof3['default'](branch))
        ? this.fetchBranch(branch, pathRest)
        : period ||
          _.isUndefined(branch) ||
          _.isNull(branch) ||
          'object' ==
            ('undefined' == typeof branch
              ? 'undefined'
              : _typeof3['default'](branch))
          ? null
          : branch;
    }

    function cutBranch(object, path) {
      if (
        ('string' == typeof path && (path = path.split('.')),
        !(path instanceof Array) || 0 === path.length)
      )
        return (
          console.log('funcs.cutBranch warning. Incorrect path value.'), !1
        );
      path = path.slice();
      var key = path.shift();
      return 'object' !==
        ('undefined' == typeof object
          ? 'undefined'
          : _typeof3['default'](object)) || null === object
        ? (console.log('funcs.cutBranch warning. Incorrect object.'), !1)
        : 0 == path.length
          ? Object.hasOwnProperty.call(object, key)
            ? (delete object[key], !0)
            : (console.log(
                'funcs.cutBranch warning. Incorrect object. hasOwnProperty not found.'
              ),
              !1)
          : cutBranch(object[key], path);
    }

    function buildTree(response) {
      for (var r, obj = {}, i = 0; i < response.length; i++)
        (r = response[i]), this.setValue(r.Name, r.Value, obj);
      return obj;
    }

    function buildTreeAttributes(response) {
      function getName(r) {
        var name = r.Name,
          attrs = r.Attributes;
        return 'object' == attrs.type && (name += '#attr'), name;
      }
      for (var obj = {}, i = 0; i < response.length; i++) {
        var r = response[i],
          name = getName(r),
          value = r.Attributes;
        this.setValue(name, value, obj);
      }
      return obj;
    }

    function splitTree(tree, startPath, branches) {
      var value;
      branches || (branches = []), startPath || (startPath = '');
      for (var key in tree)
        (value = tree[key]),
          'object' ==
          ('undefined' == typeof value
            ? 'undefined'
            : _typeof3['default'](value))
            ? this.splitTree(value, startPath + key + '.', branches)
            : branches.push({
                Name: startPath + key,
                Value: value,
              });
      return branches;
    }

    function splitTreeAttributes(tree, startPath, branches) {
      function isValue(value) {
        return _.has(value, 'type');
      }
      branches || (branches = []), startPath || (startPath = '');
      for (var key in tree) {
        var value = tree[key];
        if (_.isObject(value) && !_.isArray(value))
          if (isValue(value)) {
            var path = '#attr' == key ? startPath : startPath + key;
            branches.push({
              Name: path,
              Attributes: value,
            });
          } else splitTreeAttributes(value, startPath + key + '.', branches);
        else
          branches.push({
            Name: startPath + key,
            Attributes: value,
          });
      }
      return branches;
    }

    function deepClone(obj) {
      var o,
        obj = _.clone(obj);
      for (var i in obj)
        (o = obj[i]), _.isObject(o) && (obj[i] = this.deepClone(o));
      return obj;
    }

    function deepExtend(obj) {
      var parentRE = /#{\s*?_\s*?}/,
        slice = Array.prototype.slice;
      return (
        _.each(slice.call(arguments, 1), function(source) {
          for (var prop in source)
            if (
              _.isUndefined(obj[prop]) ||
              _.isFunction(obj[prop]) ||
              _.isNull(source[prop]) ||
              _.isDate(source[prop])
            )
              obj[prop] = source[prop];
            else if (_.isString(source[prop]) && parentRE.test(source[prop]))
              _.isString(obj[prop]) &&
                (obj[prop] = source[prop].replace(parentRE, obj[prop]));
            else if (_.isArray(obj[prop]) || _.isArray(source[prop])) {
              if (!_.isArray(obj[prop]) || !_.isArray(source[prop]))
                throw new Error(
                  'Trying to combine an array with a non-array (' + prop + ')'
                );
              obj[prop] = _.reject(
                deepExtend(obj[prop], source[prop]),
                function(item) {
                  return _.isNull(item);
                }
              );
            } else if (_.isObject(obj[prop]) || _.isObject(source[prop])) {
              if (!_.isObject(obj[prop]) || !_.isObject(source[prop]))
                throw new Error(
                  'Trying to combine an object with a non-object (' + prop + ')'
                );
              obj[prop] = deepExtend(obj[prop], source[prop]);
            } else obj[prop] = source[prop];
        }),
        obj
      );
    }

    function getParamByName(list, value) {
      return _.find(list, function(param) {
        return param.Name == value;
      });
    }

    function responseToConfig(response) {
      var config = {};
      return (
        _.each(response, function(elem) {
          (config[elem.Name] = _.clone(elem)), delete config[elem.Name].Name;
        }),
        config
      );
    }

    function configToResponse(config) {
      return _.map(config, function(elem, inx) {
        var obj = _.clone(elem);
        return (obj.Name = inx), obj;
      });
    }

    function getDiffExistings(oConfig, cConfig) {
      var diff = {};
      return (
        _.each(cConfig, function(elem, inx) {
          (oConfig[inx] && elem.Value == oConfig[inx].Value) ||
            (diff[inx] = {
              Value: elem.Value,
            });
        }),
        diff
      );
    }

    function getDiffRemoved(oConfig, cConfig) {
      var diff = {};
      return (
        _.each(oConfig, function(elem, inx) {
          cConfig[inx] ||
            (diff[inx] = {
              Value: null,
              IsRemoved: !0,
            });
        }),
        diff
      );
    }

    function getChanges(origin, changed) {
      var oConfig = this.responseToConfig(this.splitTree(origin)),
        cConfig = this.responseToConfig(this.splitTree(changed));
      return getDiffExistings(oConfig, cConfig);
    }

    function getChangesWithRemoved(origin, changed) {
      var oConfig = this.responseToConfig(this.splitTree(origin)),
        cConfig = this.responseToConfig(this.splitTree(changed));
      return _.extend(
        getDiffExistings(oConfig, cConfig),
        getDiffRemoved(oConfig, cConfig)
      );
    }

    function getChangesExpanded(original, changed) {
      return buildTree.call(
        this,
        configToResponse.call(this, getChanges.call(this, original, changed))
      );
    }

    function eachAsync(arr, iterator, finish) {
      var inx = 0;
      iterator(arr[inx], inx, function handler(error) {
        error
          ? finish && finish(inx, error)
          : ++inx < arr.length
            ? iterator(arr[inx], inx, handler)
            : finish && finish(inx);
      });
    }

    function addInstance(obj, path, instance) {
      if (path.match(/^\w+$/)) {
        if (obj.__toAdd) var actions = obj.__toAdd.split(',');
        else var actions = [];
        obj[path] || (obj[path] = {});
        var multiObject = obj[path],
          maxInstance = _.size(multiObject) + 1,
          maxInstancePlus = maxInstance + '+',
          newPath = path + '.' + maxInstancePlus;
        return (
          actions.push(newPath),
          (obj.__toAdd = _.uniq(actions).toString()),
          instance && (multiObject[maxInstancePlus] = instance),
          newPath
        );
      }
      return null;
    }

    function setInstance(obj, path, instance) {
      var arr = path.split('.'),
        multiObject = obj[arr[0]],
        instanceName = arr[1];
      if (path.match(/^.+\.\d+\x2b$/)) {
        var oldInstance = multiObject[instanceName];
        if (!oldInstance) return null;
        if (obj.__toAdd) var actions = obj.__toAdd.split(',');
        else var actions = [];
        return (
          actions.push(path),
          (obj.__toAdd = _.uniq(actions).toString()),
          instance && (multiObject[instanceName] = instance),
          path
        );
      }
      if (path.match(/^.+\.\d+$/)) {
        var oldInstance = multiObject[instanceName + '-'];
        if (!oldInstance) return null;
        if (obj.__toDel) {
          var actions = _.reject(obj.__toDel.split(','), function(elem) {
            return elem == path;
          });
          (obj.__toDel = _.uniq(actions).toString()),
            obj.__toDel || delete obj.__toDel;
        }
        return (
          delete multiObject[instanceName + '-'],
          (multiObject[instanceName] = instance ? instance : oldInstance),
          path
        );
      }
      return null;
    }

    function cutInstance(obj, path) {
      var instance = this.fetchBranch(obj, path + '.');
      if (!_.isObject(instance)) return null;
      if (path.match(/^.+\.\d+\x2b$/)) {
        if (obj.__toAdd) {
          var actions = _.reject(obj.__toAdd.split(','), function(elem) {
            return elem == path;
          });
          (obj.__toAdd = _.uniq(actions).toString()),
            obj.__toAdd || delete obj.__toAdd;
        }
        return this.deepClone(instance);
      }
      if (path.match(/^.+\.\d+$/)) {
        if (obj.__toDel) var actions = obj.__toDel.split(',');
        else var actions = [];
        actions.push(path), (obj.__toDel = _.uniq(actions).toString());
        var arr = path.split('.'),
          multiObject = obj[arr[0]],
          instanceName = arr[1];
        return (
          delete multiObject[instanceName],
          (multiObject[instanceName + '-'] = instance),
          this.deepClone(instance)
        );
      }
      return null;
    }

    function isPart(path, part) {
      if ('' == part) return !0;
      part.match(/\.$/) && (part = part.replace(/\.$/, ''));
      for (
        var pathArr = path.split('.'), partArr = part.split('.'), i = 0;
        i < partArr.length;
        i++
      )
        if (pathArr[i] != partArr[i]) return !1;
      return !0;
    }

    function checkResponse(dataModel, data) {
      _.each(dataModel, function(elem, inx) {
        _.find(data, function(_elem) {
          return _elem.Name.replace(/\.\d+\./, '.{i}.') == inx;
        })
          ? delete elem.unsupported
          : (elem.unsupported = !0);
      });
    }

    function copyParam(firstObj, firstParam, secObj, secParam) {
      function hasPath(obj, path) {
        var arr = path.split('.');
        return _.every(arr, function(key, index) {
          return arr.length == index + 1 && '' == key
            ? !0
            : _.has(obj, key)
              ? ((obj = obj[key]), !0)
              : !1;
        });
      }
      if (hasPath(firstObj, firstParam)) {
        var value = deepClone(this.fetchBranch(firstObj, firstParam));
        setValue(secParam, value, secObj);
      }
      return secObj[secParam];
    }

    function randomString(len) {
      len || (len = 10);
      for (
        var letters =
            'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz1234567890',
          result = '',
          i = 0;
        len > i;
        i++
      )
        result += letters[Math.floor(Math.random() * letters.length)];
      return result;
    }

    function getRpcSnackbarMsg(res, type) {
      var type = type || 'write';
      return (
        'rpc_' + type + '_' + (is.allRPCSuccess(res) ? 'success' : 'error')
      );
    }

    function getLazyResolve(lazyDeps, ctrl) {
      return lazyDeps.length
        ? {
            deps: function($q, $rootScope, $state) {
              var deferred = $q.defer();
              return (
                $script(lazyDeps, 'deps', function() {
                  $rootScope.$apply(function() {
                    angular.module('app').controllerProvider.has(ctrl) ||
                      (deferred.reject(),
                      $state.go('error', {
                        code: 'lazyLoadError',
                        message: 'lazyLoadErrorDesc',
                      })),
                      deferred.resolve();
                  });
                }),
                deferred.promise
              );
            },
          }
        : {
            deps: function() {},
          };
    }

    function sequencePromises(list, iterator, context) {
      return (
        (context = context || this),
        _.reduce(
          list,
          function(sequence, obj, i) {
            return sequence.then(function() {
              return iterator.call(context, obj, i, list);
            });
          },
          _promise2['default'].resolve()
        )
      );
    }

    function argSchema(argArr) {
      this.checkin = function() {
        function check(type, arg) {
          if (_.isNull(arg) || _.isUndefined(arg)) return !0;
          switch (type) {
            case 'string':
              if (!_.isString(arg)) return !1;
              this[name] = arg;
              break;
            case 'number':
              if (!_.isNumber(arg)) return !1;
              this[name] = arg;
              break;
            case 'bool':
              if (!_.isBoolean(arg)) return !1;
              this[name] = arg;
              break;
            case 'object':
              if (!_.isObject(arg)) return !1;
              this[name] = arg;
              break;
            case 'function':
              if (!_.isFunction(arg)) return !1;
              this[name] = arg;
              break;
            case 'array':
              if (!_.isArray(arg)) return !1;
              this[name] = arg;
          }
          return !0;
        }
        for (var arr, qual, type, name, i = 0, j = 0; i < arguments.length; i++)
          if (
            ((arr = arguments[i].split(' ')),
            (qual = type = name = null),
            3 == arr.length
              ? ((qual = arr[0]), (type = arr[1]), (name = arr[2]))
              : 2 == arr.length && ((type = arr[0]), (name = arr[1])),
            delete this[name],
            'opt' == qual)
          )
            check.call(this, type, argArr[j]) && j++;
          else {
            if (!check.call(this, type, argArr[j])) return !1;
            j++;
          }
        return !0;
      };
    }

    function getIfaces(tree) {
      function getResult(iface, ifname, service) {
        return {
          iface: service.iface,
          name: service.name,
          l2_key: iface.ifname,
          l3_key: ifname,
          gwif: service.gwif,
          type: service.type,
          is_wan: service.is_wan,
          connection_status: service.connection_status,
        };
      }
      var result = [];
      return (
        _.each(tree, function(iface, ifname) {
          (iface.ifname = ifname),
            _.each(iface.services, function(service, ifname) {
              'auto' != service.type &&
                result.push(getResult(iface, ifname, service)),
                _.each(service.tunnels, function(tunnel, ifname) {
                  result.push(getResult(iface, ifname, tunnel));
                });
            });
        }),
        result
      );
    }

    function getContypeList() {
      return {
        pppoa: 'pppoa',
        ipoa: 'ipv4oa',
        dynamic: 'dynip',
        dynamicv6: 'dynipv6',
        static: 'statip',
        staticv6: 'statipv6',
        pppoe: 'pppoe',
        pppoev6: 'pppoev6',
        pppoedual: 'pppoedual',
        dynl2tp: 'dynl2tp',
        statl2tp: 'statl2tp',
        dynpptp: 'dynpptp',
        statpptp: 'statpptp',
      };
    }

    function getConstateList() {
      return {
        Connected: 'wanStatusConnected',
        Connecting: 'wanStatusConnecting',
        Disconnected: 'wanStatusDisconnected',
      };
    }

    function dummy() {
      return {};
    }
    var _promise = __webpack_require__(7),
      _promise2 = _interopRequireDefault(_promise),
      _typeof2 = __webpack_require__(62),
      _typeof3 = _interopRequireDefault(_typeof2),
      _ = __webpack_require__(3),
      deepEqual = __webpack_require__(70),
      is = __webpack_require__(73);
    module.exports = {
      setValue: setValue,
      fetchBranch: fetchBranch,
      cutBranch: cutBranch,
      buildTree: buildTree,
      buildTreeAttributes: buildTreeAttributes,
      splitTree: splitTree,
      splitTreeAttributes: splitTreeAttributes,
      deepClone: deepClone,
      deepExtend: deepExtend,
      deepEqual: deepEqual,
      getParamByName: getParamByName,
      responseToConfig: responseToConfig,
      configToResponse: configToResponse,
      getChanges: getChanges,
      getChangesWithRemoved: getChangesWithRemoved,
      getChangesExpanded: getChangesExpanded,
      eachAsync: eachAsync,
      addInstance: addInstance,
      setInstance: setInstance,
      cutInstance: cutInstance,
      copyParam: copyParam,
      isPart: isPart,
      checkResponse: checkResponse,
      argSchema: argSchema,
      lookSize: lookSize,
      lookTime: lookTime,
      randomString: randomString,
      getRpcSnackbarMsg: getRpcSnackbarMsg,
      getLazyResolve: getLazyResolve,
      sequencePromises: sequencePromises,
      getIfaces: getIfaces,
      getContypeList: getContypeList,
      getConstateList: getConstateList,
      dummy: dummy,
    };
  },
  function(module, exports, __webpack_require__) {
    module.exports = {
      default: __webpack_require__(8),
      __esModule: !0,
    };
  },
  function(module, exports, __webpack_require__) {
    __webpack_require__(9),
      __webpack_require__(10),
      __webpack_require__(34),
      __webpack_require__(41),
      (module.exports = __webpack_require__(18).Promise);
  },
  function(module, exports) {},
  function(module, exports, __webpack_require__) {
    'use strict';
    var $at = __webpack_require__(11)(!0);
    __webpack_require__(14)(
      String,
      'String',
      function(iterated) {
        (this._t = String(iterated)), (this._i = 0);
      },
      function() {
        var point,
          O = this._t,
          index = this._i;
        return index >= O.length
          ? {
              value: void 0,
              done: !0,
            }
          : ((point = $at(O, index)),
            (this._i += point.length),
            {
              value: point,
              done: !1,
            });
      }
    );
  },
  function(module, exports, __webpack_require__) {
    var toInteger = __webpack_require__(12),
      defined = __webpack_require__(13);
    module.exports = function(TO_STRING) {
      return function(that, pos) {
        var a,
          b,
          s = String(defined(that)),
          i = toInteger(pos),
          l = s.length;
        return 0 > i || i >= l
          ? TO_STRING
            ? ''
            : void 0
          : ((a = s.charCodeAt(i)),
            55296 > a ||
            a > 56319 ||
            i + 1 === l ||
            (b = s.charCodeAt(i + 1)) < 56320 ||
            b > 57343
              ? TO_STRING
                ? s.charAt(i)
                : a
              : TO_STRING
                ? s.slice(i, i + 2)
                : ((a - 55296) << 10) + (b - 56320) + 65536);
      };
    };
  },
  function(module, exports) {
    var ceil = Math.ceil,
      floor = Math.floor;
    module.exports = function(it) {
      return isNaN((it = +it)) ? 0 : (it > 0 ? floor : ceil)(it);
    };
  },
  function(module, exports) {
    module.exports = function(it) {
      if (void 0 == it) throw TypeError("Can't call method on  " + it);
      return it;
    };
  },
  function(module, exports, __webpack_require__) {
    'use strict';
    var LIBRARY = __webpack_require__(15),
      $export = __webpack_require__(16),
      redefine = __webpack_require__(21),
      hide = __webpack_require__(22),
      has = __webpack_require__(27),
      Iterators = __webpack_require__(28),
      $iterCreate = __webpack_require__(29),
      setToStringTag = __webpack_require__(30),
      getProto = __webpack_require__(23).getProto,
      ITERATOR = __webpack_require__(31)('iterator'),
      BUGGY = !([].keys && 'next' in [].keys()),
      FF_ITERATOR = '@@iterator',
      KEYS = 'keys',
      VALUES = 'values',
      returnThis = function() {
        return this;
      };
    module.exports = function(
      Base,
      NAME,
      Constructor,
      next,
      DEFAULT,
      IS_SET,
      FORCED
    ) {
      $iterCreate(Constructor, NAME, next);
      var methods,
        key,
        getMethod = function(kind) {
          if (!BUGGY && kind in proto) return proto[kind];
          switch (kind) {
            case KEYS:
              return function() {
                return new Constructor(this, kind);
              };
            case VALUES:
              return function() {
                return new Constructor(this, kind);
              };
          }
          return function() {
            return new Constructor(this, kind);
          };
        },
        TAG = NAME + ' Iterator',
        DEF_VALUES = DEFAULT == VALUES,
        VALUES_BUG = !1,
        proto = Base.prototype,
        $native =
          proto[ITERATOR] || proto[FF_ITERATOR] || (DEFAULT && proto[DEFAULT]),
        $default = $native || getMethod(DEFAULT);
      if ($native) {
        var IteratorPrototype = getProto($default.call(new Base()));
        setToStringTag(IteratorPrototype, TAG, !0),
          !LIBRARY &&
            has(proto, FF_ITERATOR) &&
            hide(IteratorPrototype, ITERATOR, returnThis),
          DEF_VALUES &&
            $native.name !== VALUES &&
            ((VALUES_BUG = !0),
            ($default = function() {
              return $native.call(this);
            }));
      }
      if (
        ((LIBRARY && !FORCED) ||
          (!BUGGY && !VALUES_BUG && proto[ITERATOR]) ||
          hide(proto, ITERATOR, $default),
        (Iterators[NAME] = $default),
        (Iterators[TAG] = returnThis),
        DEFAULT)
      )
        if (
          ((methods = {
            values: DEF_VALUES ? $default : getMethod(VALUES),
            keys: IS_SET ? $default : getMethod(KEYS),
            entries: DEF_VALUES ? getMethod('entries') : $default,
          }),
          FORCED)
        )
          for (key in methods)
            key in proto || redefine(proto, key, methods[key]);
        else
          $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
      return methods;
    };
  },
  function(module, exports) {
    module.exports = !0;
  },
  function(module, exports, __webpack_require__) {
    var global = __webpack_require__(17),
      core = __webpack_require__(18),
      ctx = __webpack_require__(19),
      PROTOTYPE = 'prototype',
      $export = function(type, name, source) {
        var key,
          own,
          out,
          IS_FORCED = type & $export.F,
          IS_GLOBAL = type & $export.G,
          IS_STATIC = type & $export.S,
          IS_PROTO = type & $export.P,
          IS_BIND = type & $export.B,
          IS_WRAP = type & $export.W,
          exports = IS_GLOBAL ? core : core[name] || (core[name] = {}),
          target = IS_GLOBAL
            ? global
            : IS_STATIC
              ? global[name]
              : (global[name] || {})[PROTOTYPE];
        IS_GLOBAL && (source = name);
        for (key in source)
          (own = !IS_FORCED && target && key in target),
            (own && key in exports) ||
              ((out = own ? target[key] : source[key]),
              (exports[key] =
                IS_GLOBAL && 'function' != typeof target[key]
                  ? source[key]
                  : IS_BIND && own
                    ? ctx(out, global)
                    : IS_WRAP && target[key] == out
                      ? (function(C) {
                          var F = function(param) {
                            return this instanceof C ? new C(param) : C(param);
                          };
                          return (F[PROTOTYPE] = C[PROTOTYPE]), F;
                        })(out)
                      : IS_PROTO && 'function' == typeof out
                        ? ctx(Function.call, out)
                        : out),
              IS_PROTO &&
                ((exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out));
      };
    ($export.F = 1),
      ($export.G = 2),
      ($export.S = 4),
      ($export.P = 8),
      ($export.B = 16),
      ($export.W = 32),
      (module.exports = $export);
  },
  function(module, exports) {
    var global = (module.exports =
      'undefined' != typeof window && window.Math == Math
        ? window
        : 'undefined' != typeof self && self.Math == Math
          ? self
          : Function('return this')());
    'number' == typeof __g && (__g = global);
  },
  function(module, exports) {
    var core = (module.exports = {
      version: '1.2.6',
    });
    'number' == typeof __e && (__e = core);
  },
  function(module, exports, __webpack_require__) {
    var aFunction = __webpack_require__(20);
    module.exports = function(fn, that, length) {
      if ((aFunction(fn), void 0 === that)) return fn;
      switch (length) {
        case 1:
          return function(a) {
            return fn.call(that, a);
          };
        case 2:
          return function(a, b) {
            return fn.call(that, a, b);
          };
        case 3:
          return function(a, b, c) {
            return fn.call(that, a, b, c);
          };
      }
      return function() {
        return fn.apply(that, arguments);
      };
    };
  },
  function(module, exports) {
    module.exports = function(it) {
      if ('function' != typeof it) throw TypeError(it + ' is not a function!');
      return it;
    };
  },
  function(module, exports, __webpack_require__) {
    module.exports = __webpack_require__(22);
  },
  function(module, exports, __webpack_require__) {
    var $ = __webpack_require__(23),
      createDesc = __webpack_require__(24);
    module.exports = __webpack_require__(25)
      ? function(object, key, value) {
          return $.setDesc(object, key, createDesc(1, value));
        }
      : function(object, key, value) {
          return (object[key] = value), object;
        };
  },
  function(module, exports) {
    var $Object = Object;
    module.exports = {
      create: $Object.create,
      getProto: $Object.getPrototypeOf,
      isEnum: {}.propertyIsEnumerable,
      getDesc: $Object.getOwnPropertyDescriptor,
      setDesc: $Object.defineProperty,
      setDescs: $Object.defineProperties,
      getKeys: $Object.keys,
      getNames: $Object.getOwnPropertyNames,
      getSymbols: $Object.getOwnPropertySymbols,
      each: [].forEach,
    };
  },
  function(module, exports) {
    module.exports = function(bitmap, value) {
      return {
        enumerable: !(1 & bitmap),
        configurable: !(2 & bitmap),
        writable: !(4 & bitmap),
        value: value,
      };
    };
  },
  function(module, exports, __webpack_require__) {
    module.exports = !__webpack_require__(26)(function() {
      return (
        7 !=
        Object.defineProperty({}, 'a', {
          get: function() {
            return 7;
          },
        }).a
      );
    });
  },
  function(module, exports) {
    module.exports = function(exec) {
      try {
        return !!exec();
      } catch (e) {
        return !0;
      }
    };
  },
  function(module, exports) {
    var hasOwnProperty = {}.hasOwnProperty;
    module.exports = function(it, key) {
      return hasOwnProperty.call(it, key);
    };
  },
  function(module, exports) {
    module.exports = {};
  },
  function(module, exports, __webpack_require__) {
    'use strict';
    var $ = __webpack_require__(23),
      descriptor = __webpack_require__(24),
      setToStringTag = __webpack_require__(30),
      IteratorPrototype = {};
    __webpack_require__(22)(
      IteratorPrototype,
      __webpack_require__(31)('iterator'),
      function() {
        return this;
      }
    ),
      (module.exports = function(Constructor, NAME, next) {
        (Constructor.prototype = $.create(IteratorPrototype, {
          next: descriptor(1, next),
        })),
          setToStringTag(Constructor, NAME + ' Iterator');
      });
  },
  function(module, exports, __webpack_require__) {
    var def = __webpack_require__(23).setDesc,
      has = __webpack_require__(27),
      TAG = __webpack_require__(31)('toStringTag');
    module.exports = function(it, tag, stat) {
      it &&
        !has((it = stat ? it : it.prototype), TAG) &&
        def(it, TAG, {
          configurable: !0,
          value: tag,
        });
    };
  },
  function(module, exports, __webpack_require__) {
    var store = __webpack_require__(32)('wks'),
      uid = __webpack_require__(33),
      Symbol = __webpack_require__(17).Symbol;
    module.exports = function(name) {
      return (
        store[name] ||
        (store[name] =
          (Symbol && Symbol[name]) || (Symbol || uid)('Symbol.' + name))
      );
    };
  },
  function(module, exports, __webpack_require__) {
    var global = __webpack_require__(17),
      SHARED = '__core-js_shared__',
      store = global[SHARED] || (global[SHARED] = {});
    module.exports = function(key) {
      return store[key] || (store[key] = {});
    };
  },
  function(module, exports) {
    var id = 0,
      px = Math.random();
    module.exports = function(key) {
      return 'Symbol('.concat(
        void 0 === key ? '' : key,
        ')_',
        (++id + px).toString(36)
      );
    };
  },
  function(module, exports, __webpack_require__) {
    __webpack_require__(35);
    var Iterators = __webpack_require__(28);
    Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;
  },
  function(module, exports, __webpack_require__) {
    'use strict';
    var addToUnscopables = __webpack_require__(36),
      step = __webpack_require__(37),
      Iterators = __webpack_require__(28),
      toIObject = __webpack_require__(38);
    (module.exports = __webpack_require__(14)(
      Array,
      'Array',
      function(iterated, kind) {
        (this._t = toIObject(iterated)), (this._i = 0), (this._k = kind);
      },
      function() {
        var O = this._t,
          kind = this._k,
          index = this._i++;
        return !O || index >= O.length
          ? ((this._t = void 0), step(1))
          : 'keys' == kind
            ? step(0, index)
            : 'values' == kind
              ? step(0, O[index])
              : step(0, [index, O[index]]);
      },
      'values'
    )),
      (Iterators.Arguments = Iterators.Array),
      addToUnscopables('keys'),
      addToUnscopables('values'),
      addToUnscopables('entries');
  },
  function(module, exports) {
    module.exports = function() {};
  },
  function(module, exports) {
    module.exports = function(done, value) {
      return {
        value: value,
        done: !!done,
      };
    };
  },
  function(module, exports, __webpack_require__) {
    var IObject = __webpack_require__(39),
      defined = __webpack_require__(13);
    module.exports = function(it) {
      return IObject(defined(it));
    };
  },
  function(module, exports, __webpack_require__) {
    var cof = __webpack_require__(40);
    module.exports = Object('z').propertyIsEnumerable(0)
      ? Object
      : function(it) {
          return 'String' == cof(it) ? it.split('') : Object(it);
        };
  },
  function(module, exports) {
    var toString = {}.toString;
    module.exports = function(it) {
      return toString.call(it).slice(8, -1);
    };
  },
  function(module, exports, __webpack_require__) {
    'use strict';
    var Wrapper,
      $ = __webpack_require__(23),
      LIBRARY = __webpack_require__(15),
      global = __webpack_require__(17),
      ctx = __webpack_require__(19),
      classof = __webpack_require__(42),
      $export = __webpack_require__(16),
      isObject = __webpack_require__(43),
      anObject = __webpack_require__(44),
      aFunction = __webpack_require__(20),
      strictNew = __webpack_require__(45),
      forOf = __webpack_require__(46),
      setProto = __webpack_require__(51).set,
      same = __webpack_require__(52),
      SPECIES = __webpack_require__(31)('species'),
      speciesConstructor = __webpack_require__(53),
      asap = __webpack_require__(54),
      PROMISE = 'Promise',
      process = global.process,
      isNode = 'process' == classof(process),
      P = global[PROMISE],
      testResolve = function(sub) {
        var test = new P(function() {});
        return sub && (test.constructor = Object), P.resolve(test) === test;
      },
      USE_NATIVE = (function() {
        function P2(x) {
          var self = new P(x);
          return setProto(self, P2.prototype), self;
        }
        var works = !1;
        try {
          if (
            ((works = P && P.resolve && testResolve()),
            setProto(P2, P),
            (P2.prototype = $.create(P.prototype, {
              constructor: {
                value: P2,
              },
            })),
            P2.resolve(5).then(function() {}) instanceof P2 || (works = !1),
            works && __webpack_require__(25))
          ) {
            var thenableThenGotten = !1;
            P.resolve(
              $.setDesc({}, 'then', {
                get: function() {
                  thenableThenGotten = !0;
                },
              })
            ),
              (works = thenableThenGotten);
          }
        } catch (e) {
          works = !1;
        }
        return works;
      })(),
      sameConstructor = function(a, b) {
        return LIBRARY && a === P && b === Wrapper ? !0 : same(a, b);
      },
      getConstructor = function(C) {
        var S = anObject(C)[SPECIES];
        return void 0 != S ? S : C;
      },
      isThenable = function(it) {
        var then;
        return isObject(it) && 'function' == typeof (then = it.then)
          ? then
          : !1;
      },
      PromiseCapability = function(C) {
        var resolve, reject;
        (this.promise = new C(function($$resolve, $$reject) {
          if (void 0 !== resolve || void 0 !== reject)
            throw TypeError('Bad Promise constructor');
          (resolve = $$resolve), (reject = $$reject);
        })),
          (this.resolve = aFunction(resolve)),
          (this.reject = aFunction(reject));
      },
      perform = function(exec) {
        try {
          exec();
        } catch (e) {
          return {
            error: e,
          };
        }
      },
      notify = function(record, isReject) {
        if (!record.n) {
          record.n = !0;
          var chain = record.c;
          asap(function() {
            for (
              var value = record.v,
                ok = 1 == record.s,
                i = 0,
                run = function(reaction) {
                  var result,
                    then,
                    handler = ok ? reaction.ok : reaction.fail,
                    resolve = reaction.resolve,
                    reject = reaction.reject;
                  try {
                    handler
                      ? (ok || (record.h = !0),
                        (result = handler === !0 ? value : handler(value)),
                        result === reaction.promise
                          ? reject(TypeError('Promise-chain cycle'))
                          : (then = isThenable(result))
                            ? then.call(result, resolve, reject)
                            : resolve(result))
                      : reject(value);
                  } catch (e) {
                    reject(e);
                  }
                };
              chain.length > i;

            )
              run(chain[i++]);
            (chain.length = 0),
              (record.n = !1),
              isReject &&
                setTimeout(function() {
                  var handler,
                    console,
                    promise = record.p;
                  isUnhandled(promise) &&
                    (isNode
                      ? process.emit('unhandledRejection', value, promise)
                      : (handler = global.onunhandledrejection)
                        ? handler({
                            promise: promise,
                            reason: value,
                          })
                        : (console = global.console) &&
                          console.error &&
                          console.error('Unhandled promise rejection', value)),
                    (record.a = void 0);
                }, 1);
          });
        }
      },
      isUnhandled = function(promise) {
        var reaction,
          record = promise._d,
          chain = record.a || record.c,
          i = 0;
        if (record.h) return !1;
        for (; chain.length > i; )
          if (
            ((reaction = chain[i++]),
            reaction.fail || !isUnhandled(reaction.promise))
          )
            return !1;
        return !0;
      },
      $reject = function(value) {
        var record = this;
        record.d ||
          ((record.d = !0),
          (record = record.r || record),
          (record.v = value),
          (record.s = 2),
          (record.a = record.c.slice()),
          notify(record, !0));
      },
      $resolve = function(value) {
        var then,
          record = this;
        if (!record.d) {
          (record.d = !0), (record = record.r || record);
          try {
            if (record.p === value)
              throw TypeError("Promise can't be resolved itself");
            (then = isThenable(value))
              ? asap(function() {
                  var wrapper = {
                    r: record,
                    d: !1,
                  };
                  try {
                    then.call(
                      value,
                      ctx($resolve, wrapper, 1),
                      ctx($reject, wrapper, 1)
                    );
                  } catch (e) {
                    $reject.call(wrapper, e);
                  }
                })
              : ((record.v = value), (record.s = 1), notify(record, !1));
          } catch (e) {
            $reject.call(
              {
                r: record,
                d: !1,
              },
              e
            );
          }
        }
      };
    USE_NATIVE ||
      ((P = function(executor) {
        aFunction(executor);
        var record = (this._d = {
          p: strictNew(this, P, PROMISE),
          c: [],
          a: void 0,
          s: 0,
          d: !1,
          v: void 0,
          h: !1,
          n: !1,
        });
        try {
          executor(ctx($resolve, record, 1), ctx($reject, record, 1));
        } catch (err) {
          $reject.call(record, err);
        }
      }),
      __webpack_require__(59)(P.prototype, {
        then: function(onFulfilled, onRejected) {
          var reaction = new PromiseCapability(speciesConstructor(this, P)),
            promise = reaction.promise,
            record = this._d;
          return (
            (reaction.ok = 'function' == typeof onFulfilled ? onFulfilled : !0),
            (reaction.fail = 'function' == typeof onRejected && onRejected),
            record.c.push(reaction),
            record.a && record.a.push(reaction),
            record.s && notify(record, !1),
            promise
          );
        },
        catch: function(onRejected) {
          return this.then(void 0, onRejected);
        },
      })),
      $export($export.G + $export.W + $export.F * !USE_NATIVE, {
        Promise: P,
      }),
      __webpack_require__(30)(P, PROMISE),
      __webpack_require__(60)(PROMISE),
      (Wrapper = __webpack_require__(18)[PROMISE]),
      $export($export.S + $export.F * !USE_NATIVE, PROMISE, {
        reject: function(r) {
          var capability = new PromiseCapability(this),
            $$reject = capability.reject;
          return $$reject(r), capability.promise;
        },
      }),
      $export(
        $export.S + $export.F * (!USE_NATIVE || testResolve(!0)),
        PROMISE,
        {
          resolve: function(x) {
            if (x instanceof P && sameConstructor(x.constructor, this))
              return x;
            var capability = new PromiseCapability(this),
              $$resolve = capability.resolve;
            return $$resolve(x), capability.promise;
          },
        }
      ),
      $export(
        $export.S +
          $export.F *
            !(
              USE_NATIVE &&
              __webpack_require__(61)(function(iter) {
                P.all(iter)['catch'](function() {});
              })
            ),
        PROMISE,
        {
          all: function(iterable) {
            var C = getConstructor(this),
              capability = new PromiseCapability(C),
              resolve = capability.resolve,
              reject = capability.reject,
              values = [],
              abrupt = perform(function() {
                forOf(iterable, !1, values.push, values);
                var remaining = values.length,
                  results = Array(remaining);
                remaining
                  ? $.each.call(values, function(promise, index) {
                      var alreadyCalled = !1;
                      C.resolve(promise).then(function(value) {
                        alreadyCalled ||
                          ((alreadyCalled = !0),
                          (results[index] = value),
                          --remaining || resolve(results));
                      }, reject);
                    })
                  : resolve(results);
              });
            return abrupt && reject(abrupt.error), capability.promise;
          },
          race: function(iterable) {
            var C = getConstructor(this),
              capability = new PromiseCapability(C),
              reject = capability.reject,
              abrupt = perform(function() {
                forOf(iterable, !1, function(promise) {
                  C.resolve(promise).then(capability.resolve, reject);
                });
              });
            return abrupt && reject(abrupt.error), capability.promise;
          },
        }
      );
  },
  function(module, exports, __webpack_require__) {
    var cof = __webpack_require__(40),
      TAG = __webpack_require__(31)('toStringTag'),
      ARG =
        'Arguments' ==
        cof(
          (function() {
            return arguments;
          })()
        );
    module.exports = function(it) {
      var O, T, B;
      return void 0 === it
        ? 'Undefined'
        : null === it
          ? 'Null'
          : 'string' == typeof (T = (O = Object(it))[TAG])
            ? T
            : ARG
              ? cof(O)
              : 'Object' == (B = cof(O)) && 'function' == typeof O.callee
                ? 'Arguments'
                : B;
    };
  },
  function(module, exports) {
    module.exports = function(it) {
      return 'object' == typeof it ? null !== it : 'function' == typeof it;
    };
  },
  function(module, exports, __webpack_require__) {
    var isObject = __webpack_require__(43);
    module.exports = function(it) {
      if (!isObject(it)) throw TypeError(it + ' is not an object!');
      return it;
    };
  },
  function(module, exports) {
    module.exports = function(it, Constructor, name) {
      if (!(it instanceof Constructor))
        throw TypeError(name + ": use the 'new' operator!");
      return it;
    };
  },
  function(module, exports, __webpack_require__) {
    var ctx = __webpack_require__(19),
      call = __webpack_require__(47),
      isArrayIter = __webpack_require__(48),
      anObject = __webpack_require__(44),
      toLength = __webpack_require__(49),
      getIterFn = __webpack_require__(50);
    module.exports = function(iterable, entries, fn, that) {
      var length,
        step,
        iterator,
        iterFn = getIterFn(iterable),
        f = ctx(fn, that, entries ? 2 : 1),
        index = 0;
      if ('function' != typeof iterFn)
        throw TypeError(iterable + ' is not iterable!');
      if (isArrayIter(iterFn))
        for (length = toLength(iterable.length); length > index; index++)
          entries
            ? f(anObject((step = iterable[index]))[0], step[1])
            : f(iterable[index]);
      else
        for (iterator = iterFn.call(iterable); !(step = iterator.next()).done; )
          call(iterator, f, step.value, entries);
    };
  },
  function(module, exports, __webpack_require__) {
    var anObject = __webpack_require__(44);
    module.exports = function(iterator, fn, value, entries) {
      try {
        return entries ? fn(anObject(value)[0], value[1]) : fn(value);
      } catch (e) {
        var ret = iterator['return'];
        throw (void 0 !== ret && anObject(ret.call(iterator)), e);
      }
    };
  },
  function(module, exports, __webpack_require__) {
    var Iterators = __webpack_require__(28),
      ITERATOR = __webpack_require__(31)('iterator'),
      ArrayProto = Array.prototype;
    module.exports = function(it) {
      return (
        void 0 !== it && (Iterators.Array === it || ArrayProto[ITERATOR] === it)
      );
    };
  },
  function(module, exports, __webpack_require__) {
    var toInteger = __webpack_require__(12),
      min = Math.min;
    module.exports = function(it) {
      return it > 0 ? min(toInteger(it), 9007199254740991) : 0;
    };
  },
  function(module, exports, __webpack_require__) {
    var classof = __webpack_require__(42),
      ITERATOR = __webpack_require__(31)('iterator'),
      Iterators = __webpack_require__(28);
    module.exports = __webpack_require__(18).getIteratorMethod = function(it) {
      return void 0 != it
        ? it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)]
        : void 0;
    };
  },
  function(module, exports, __webpack_require__) {
    var getDesc = __webpack_require__(23).getDesc,
      isObject = __webpack_require__(43),
      anObject = __webpack_require__(44),
      check = function(O, proto) {
        if ((anObject(O), !isObject(proto) && null !== proto))
          throw TypeError(proto + ": can't set as prototype!");
      };
    module.exports = {
      set:
        Object.setPrototypeOf ||
        ('__proto__' in {}
          ? (function(test, buggy, set) {
              try {
                (set = __webpack_require__(19)(
                  Function.call,
                  getDesc(Object.prototype, '__proto__').set,
                  2
                )),
                  set(test, []),
                  (buggy = !(test instanceof Array));
              } catch (e) {
                buggy = !0;
              }
              return function(O, proto) {
                return (
                  check(O, proto),
                  buggy ? (O.__proto__ = proto) : set(O, proto),
                  O
                );
              };
            })({}, !1)
          : void 0),
      check: check,
    };
  },
  function(module, exports) {
    module.exports =
      Object.is ||
      function(x, y) {
        return x === y ? 0 !== x || 1 / x === 1 / y : x != x && y != y;
      };
  },
  function(module, exports, __webpack_require__) {
    var anObject = __webpack_require__(44),
      aFunction = __webpack_require__(20),
      SPECIES = __webpack_require__(31)('species');
    module.exports = function(O, D) {
      var S,
        C = anObject(O).constructor;
      return void 0 === C || void 0 == (S = anObject(C)[SPECIES])
        ? D
        : aFunction(S);
    };
  },
  function(module, exports, __webpack_require__) {
    var head,
      last,
      notify,
      global = __webpack_require__(17),
      macrotask = __webpack_require__(55).set,
      Observer = global.MutationObserver || global.WebKitMutationObserver,
      process = global.process,
      Promise = global.Promise,
      isNode = 'process' == __webpack_require__(40)(process),
      flush = function() {
        var parent, domain, fn;
        for (
          isNode &&
          (parent = process.domain) &&
          ((process.domain = null), parent.exit());
          head;

        )
          (domain = head.domain),
            (fn = head.fn),
            domain && domain.enter(),
            fn(),
            domain && domain.exit(),
            (head = head.next);
        (last = void 0), parent && parent.enter();
      };
    if (isNode)
      notify = function() {
        process.nextTick(flush);
      };
    else if (Observer) {
      var toggle = 1,
        node = document.createTextNode('');
      new Observer(flush).observe(node, {
        characterData: !0,
      }),
        (notify = function() {
          node.data = toggle = -toggle;
        });
    } else
      notify =
        Promise && Promise.resolve
          ? function() {
              Promise.resolve().then(flush);
            }
          : function() {
              macrotask.call(global, flush);
            };
    module.exports = function(fn) {
      var task = {
        fn: fn,
        next: void 0,
        domain: isNode && process.domain,
      };
      last && (last.next = task),
        head || ((head = task), notify()),
        (last = task);
    };
  },
  function(module, exports, __webpack_require__) {
    var defer,
      channel,
      port,
      ctx = __webpack_require__(19),
      invoke = __webpack_require__(56),
      html = __webpack_require__(57),
      cel = __webpack_require__(58),
      global = __webpack_require__(17),
      process = global.process,
      setTask = global.setImmediate,
      clearTask = global.clearImmediate,
      MessageChannel = global.MessageChannel,
      counter = 0,
      queue = {},
      ONREADYSTATECHANGE = 'onreadystatechange',
      run = function() {
        var id = +this;
        if (queue.hasOwnProperty(id)) {
          var fn = queue[id];
          delete queue[id], fn();
        }
      },
      listner = function(event) {
        run.call(event.data);
      };
    (setTask && clearTask) ||
      ((setTask = function(fn) {
        for (var args = [], i = 1; arguments.length > i; )
          args.push(arguments[i++]);
        return (
          (queue[++counter] = function() {
            invoke('function' == typeof fn ? fn : Function(fn), args);
          }),
          defer(counter),
          counter
        );
      }),
      (clearTask = function(id) {
        delete queue[id];
      }),
      'process' == __webpack_require__(40)(process)
        ? (defer = function(id) {
            process.nextTick(ctx(run, id, 1));
          })
        : MessageChannel
          ? ((channel = new MessageChannel()),
            (port = channel.port2),
            (channel.port1.onmessage = listner),
            (defer = ctx(port.postMessage, port, 1)))
          : global.addEventListener &&
            'function' == typeof postMessage &&
            !global.importScripts
            ? ((defer = function(id) {
                global.postMessage(id + '', '*');
              }),
              global.addEventListener('message', listner, !1))
            : (defer =
                ONREADYSTATECHANGE in cel('script')
                  ? function(id) {
                      html.appendChild(cel('script'))[
                        ONREADYSTATECHANGE
                      ] = function() {
                        html.removeChild(this), run.call(id);
                      };
                    }
                  : function(id) {
                      setTimeout(ctx(run, id, 1), 0);
                    })),
      (module.exports = {
        set: setTask,
        clear: clearTask,
      });
  },
  function(module, exports) {
    module.exports = function(fn, args, that) {
      var un = void 0 === that;
      switch (args.length) {
        case 0:
          return un ? fn() : fn.call(that);
        case 1:
          return un ? fn(args[0]) : fn.call(that, args[0]);
        case 2:
          return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
        case 3:
          return un
            ? fn(args[0], args[1], args[2])
            : fn.call(that, args[0], args[1], args[2]);
        case 4:
          return un
            ? fn(args[0], args[1], args[2], args[3])
            : fn.call(that, args[0], args[1], args[2], args[3]);
      }
      return fn.apply(that, args);
    };
  },
  function(module, exports, __webpack_require__) {
    module.exports =
      __webpack_require__(17).document && document.documentElement;
  },
  function(module, exports, __webpack_require__) {
    var isObject = __webpack_require__(43),
      document = __webpack_require__(17).document,
      is = isObject(document) && isObject(document.createElement);
    module.exports = function(it) {
      return is ? document.createElement(it) : {};
    };
  },
  function(module, exports, __webpack_require__) {
    var redefine = __webpack_require__(21);
    module.exports = function(target, src) {
      for (var key in src) redefine(target, key, src[key]);
      return target;
    };
  },
  function(module, exports, __webpack_require__) {
    'use strict';
    var core = __webpack_require__(18),
      $ = __webpack_require__(23),
      DESCRIPTORS = __webpack_require__(25),
      SPECIES = __webpack_require__(31)('species');
    module.exports = function(KEY) {
      var C = core[KEY];
      DESCRIPTORS &&
        C &&
        !C[SPECIES] &&
        $.setDesc(C, SPECIES, {
          configurable: !0,
          get: function() {
            return this;
          },
        });
    };
  },
  function(module, exports, __webpack_require__) {
    var ITERATOR = __webpack_require__(31)('iterator'),
      SAFE_CLOSING = !1;
    try {
      var riter = [7][ITERATOR]();
      (riter['return'] = function() {
        SAFE_CLOSING = !0;
      }),
        Array.from(riter, function() {
          throw 2;
        });
    } catch (e) {}
    module.exports = function(exec, skipClosing) {
      if (!skipClosing && !SAFE_CLOSING) return !1;
      var safe = !1;
      try {
        var arr = [7],
          iter = arr[ITERATOR]();
        (iter.next = function() {
          safe = !0;
        }),
          (arr[ITERATOR] = function() {
            return iter;
          }),
          exec(arr);
      } catch (e) {}
      return safe;
    };
  },
  function(module, exports, __webpack_require__) {
    'use strict';
    var _Symbol = __webpack_require__(63)['default'];
    (exports['default'] = function(obj) {
      return obj && obj.constructor === _Symbol ? 'symbol' : typeof obj;
    }),
      (exports.__esModule = !0);
  },
  function(module, exports, __webpack_require__) {
    module.exports = {
      default: __webpack_require__(64),
      __esModule: !0,
    };
  },
  function(module, exports, __webpack_require__) {
    __webpack_require__(65),
      __webpack_require__(9),
      (module.exports = __webpack_require__(18).Symbol);
  },
  function(module, exports, __webpack_require__) {
    'use strict';
    var $ = __webpack_require__(23),
      global = __webpack_require__(17),
      has = __webpack_require__(27),
      DESCRIPTORS = __webpack_require__(25),
      $export = __webpack_require__(16),
      redefine = __webpack_require__(21),
      $fails = __webpack_require__(26),
      shared = __webpack_require__(32),
      setToStringTag = __webpack_require__(30),
      uid = __webpack_require__(33),
      wks = __webpack_require__(31),
      keyOf = __webpack_require__(66),
      $names = __webpack_require__(67),
      enumKeys = __webpack_require__(68),
      isArray = __webpack_require__(69),
      anObject = __webpack_require__(44),
      toIObject = __webpack_require__(38),
      createDesc = __webpack_require__(24),
      getDesc = $.getDesc,
      setDesc = $.setDesc,
      _create = $.create,
      getNames = $names.get,
      $Symbol = global.Symbol,
      $JSON = global.JSON,
      _stringify = $JSON && $JSON.stringify,
      setter = !1,
      HIDDEN = wks('_hidden'),
      isEnum = $.isEnum,
      SymbolRegistry = shared('symbol-registry'),
      AllSymbols = shared('symbols'),
      useNative = 'function' == typeof $Symbol,
      ObjectProto = Object.prototype,
      setSymbolDesc =
        DESCRIPTORS &&
        $fails(function() {
          return (
            7 !=
            _create(
              setDesc({}, 'a', {
                get: function() {
                  return setDesc(this, 'a', {
                    value: 7,
                  }).a;
                },
              })
            ).a
          );
        })
          ? function(it, key, D) {
              var protoDesc = getDesc(ObjectProto, key);
              protoDesc && delete ObjectProto[key],
                setDesc(it, key, D),
                protoDesc &&
                  it !== ObjectProto &&
                  setDesc(ObjectProto, key, protoDesc);
            }
          : setDesc,
      wrap = function(tag) {
        var sym = (AllSymbols[tag] = _create($Symbol.prototype));
        return (
          (sym._k = tag),
          DESCRIPTORS &&
            setter &&
            setSymbolDesc(ObjectProto, tag, {
              configurable: !0,
              set: function(value) {
                has(this, HIDDEN) &&
                  has(this[HIDDEN], tag) &&
                  (this[HIDDEN][tag] = !1),
                  setSymbolDesc(this, tag, createDesc(1, value));
              },
            }),
          sym
        );
      },
      isSymbol = function(it) {
        return 'symbol' == typeof it;
      },
      $defineProperty = function(it, key, D) {
        return D && has(AllSymbols, key)
          ? (D.enumerable
              ? (has(it, HIDDEN) && it[HIDDEN][key] && (it[HIDDEN][key] = !1),
                (D = _create(D, {
                  enumerable: createDesc(0, !1),
                })))
              : (has(it, HIDDEN) || setDesc(it, HIDDEN, createDesc(1, {})),
                (it[HIDDEN][key] = !0)),
            setSymbolDesc(it, key, D))
          : setDesc(it, key, D);
      },
      $defineProperties = function(it, P) {
        anObject(it);
        for (
          var key, keys = enumKeys((P = toIObject(P))), i = 0, l = keys.length;
          l > i;

        )
          $defineProperty(it, (key = keys[i++]), P[key]);
        return it;
      },
      $create = function(it, P) {
        return void 0 === P ? _create(it) : $defineProperties(_create(it), P);
      },
      $propertyIsEnumerable = function(key) {
        var E = isEnum.call(this, key);
        return E ||
          !has(this, key) ||
          !has(AllSymbols, key) ||
          (has(this, HIDDEN) && this[HIDDEN][key])
          ? E
          : !0;
      },
      $getOwnPropertyDescriptor = function(it, key) {
        var D = getDesc((it = toIObject(it)), key);
        return (
          !D ||
            !has(AllSymbols, key) ||
            (has(it, HIDDEN) && it[HIDDEN][key]) ||
            (D.enumerable = !0),
          D
        );
      },
      $getOwnPropertyNames = function(it) {
        for (
          var key, names = getNames(toIObject(it)), result = [], i = 0;
          names.length > i;

        )
          has(AllSymbols, (key = names[i++])) ||
            key == HIDDEN ||
            result.push(key);
        return result;
      },
      $getOwnPropertySymbols = function(it) {
        for (
          var key, names = getNames(toIObject(it)), result = [], i = 0;
          names.length > i;

        )
          has(AllSymbols, (key = names[i++])) && result.push(AllSymbols[key]);
        return result;
      },
      $stringify = function(it) {
        if (void 0 !== it && !isSymbol(it)) {
          for (
            var replacer, $replacer, args = [it], i = 1, $$ = arguments;
            $$.length > i;

          )
            args.push($$[i++]);
          return (
            (replacer = args[1]),
            'function' == typeof replacer && ($replacer = replacer),
            ($replacer || !isArray(replacer)) &&
              (replacer = function(key, value) {
                return (
                  $replacer && (value = $replacer.call(this, key, value)),
                  isSymbol(value) ? void 0 : value
                );
              }),
            (args[1] = replacer),
            _stringify.apply($JSON, args)
          );
        }
      },
      buggyJSON = $fails(function() {
        var S = $Symbol();
        return (
          '[null]' != _stringify([S]) ||
          '{}' !=
            _stringify({
              a: S,
            }) ||
          '{}' != _stringify(Object(S))
        );
      });
    useNative ||
      (($Symbol = function() {
        if (isSymbol(this)) throw TypeError('Symbol is not a constructor');
        return wrap(uid(arguments.length > 0 ? arguments[0] : void 0));
      }),
      redefine($Symbol.prototype, 'toString', function() {
        return this._k;
      }),
      (isSymbol = function(it) {
        return it instanceof $Symbol;
      }),
      ($.create = $create),
      ($.isEnum = $propertyIsEnumerable),
      ($.getDesc = $getOwnPropertyDescriptor),
      ($.setDesc = $defineProperty),
      ($.setDescs = $defineProperties),
      ($.getNames = $names.get = $getOwnPropertyNames),
      ($.getSymbols = $getOwnPropertySymbols),
      DESCRIPTORS &&
        !__webpack_require__(15) &&
        redefine(
          ObjectProto,
          'propertyIsEnumerable',
          $propertyIsEnumerable,
          !0
        ));
    var symbolStatics = {
      for: function(key) {
        return has(SymbolRegistry, (key += ''))
          ? SymbolRegistry[key]
          : (SymbolRegistry[key] = $Symbol(key));
      },
      keyFor: function(key) {
        return keyOf(SymbolRegistry, key);
      },
      useSetter: function() {
        setter = !0;
      },
      useSimple: function() {
        setter = !1;
      },
    };
    $.each.call(
      'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(
        ','
      ),
      function(it) {
        var sym = wks(it);
        symbolStatics[it] = useNative ? sym : wrap(sym);
      }
    ),
      (setter = !0),
      $export($export.G + $export.W, {
        Symbol: $Symbol,
      }),
      $export($export.S, 'Symbol', symbolStatics),
      $export($export.S + $export.F * !useNative, 'Object', {
        create: $create,
        defineProperty: $defineProperty,
        defineProperties: $defineProperties,
        getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
        getOwnPropertyNames: $getOwnPropertyNames,
        getOwnPropertySymbols: $getOwnPropertySymbols,
      }),
      $JSON &&
        $export($export.S + $export.F * (!useNative || buggyJSON), 'JSON', {
          stringify: $stringify,
        }),
      setToStringTag($Symbol, 'Symbol'),
      setToStringTag(Math, 'Math', !0),
      setToStringTag(global.JSON, 'JSON', !0);
  },
  function(module, exports, __webpack_require__) {
    var $ = __webpack_require__(23),
      toIObject = __webpack_require__(38);
    module.exports = function(object, el) {
      for (
        var key,
          O = toIObject(object),
          keys = $.getKeys(O),
          length = keys.length,
          index = 0;
        length > index;

      )
        if (O[(key = keys[index++])] === el) return key;
    };
  },
  function(module, exports, __webpack_require__) {
    var toIObject = __webpack_require__(38),
      getNames = __webpack_require__(23).getNames,
      toString = {}.toString,
      windowNames =
        'object' == typeof window && Object.getOwnPropertyNames
          ? Object.getOwnPropertyNames(window)
          : [],
      getWindowNames = function(it) {
        try {
          return getNames(it);
        } catch (e) {
          return windowNames.slice();
        }
      };
    module.exports.get = function(it) {
      return windowNames && '[object Window]' == toString.call(it)
        ? getWindowNames(it)
        : getNames(toIObject(it));
    };
  },
  function(module, exports, __webpack_require__) {
    var $ = __webpack_require__(23);
    module.exports = function(it) {
      var keys = $.getKeys(it),
        getSymbols = $.getSymbols;
      if (getSymbols)
        for (
          var key, symbols = getSymbols(it), isEnum = $.isEnum, i = 0;
          symbols.length > i;

        )
          isEnum.call(it, (key = symbols[i++])) && keys.push(key);
      return keys;
    };
  },
  function(module, exports, __webpack_require__) {
    var cof = __webpack_require__(40);
    module.exports =
      Array.isArray ||
      function(arg) {
        return 'Array' == cof(arg);
      };
  },
  function(module, exports, __webpack_require__) {
    function isUndefinedOrNull(value) {
      return null === value || void 0 === value;
    }

    function isBuffer(x) {
      return x && 'object' == typeof x && 'number' == typeof x.length
        ? 'function' != typeof x.copy || 'function' != typeof x.slice
          ? !1
          : x.length > 0 && 'number' != typeof x[0]
            ? !1
            : !0
        : !1;
    }

    function objEquiv(a, b, opts) {
      var i, key;
      if (isUndefinedOrNull(a) || isUndefinedOrNull(b)) return !1;
      if (a.prototype !== b.prototype) return !1;
      if (isArguments(a))
        return isArguments(b)
          ? ((a = pSlice.call(a)), (b = pSlice.call(b)), deepEqual(a, b, opts))
          : !1;
      if (isBuffer(a)) {
        if (!isBuffer(b)) return !1;
        if (a.length !== b.length) return !1;
        for (i = 0; i < a.length; i++) if (a[i] !== b[i]) return !1;
        return !0;
      }
      try {
        var ka = objectKeys(a),
          kb = objectKeys(b);
      } catch (e) {
        return !1;
      }
      if (ka.length != kb.length) return !1;
      for (ka.sort(), kb.sort(), i = ka.length - 1; i >= 0; i--)
        if (ka[i] != kb[i]) return !1;
      for (i = ka.length - 1; i >= 0; i--)
        if (((key = ka[i]), !deepEqual(a[key], b[key], opts))) return !1;
      return typeof a == typeof b;
    }
    var pSlice = Array.prototype.slice,
      objectKeys = __webpack_require__(71),
      isArguments = __webpack_require__(72),
      deepEqual = (module.exports = function(actual, expected, opts) {
        return (
          opts || (opts = {}),
          actual === expected
            ? !0
            : actual instanceof Date && expected instanceof Date
              ? actual.getTime() === expected.getTime()
              : !actual ||
                !expected ||
                ('object' != typeof actual && 'object' != typeof expected)
                ? opts.strict
                  ? actual === expected
                  : actual == expected
                : objEquiv(actual, expected, opts)
        );
      });
  },
  function(module, exports) {
    function shim(obj) {
      var keys = [];
      for (var key in obj) keys.push(key);
      return keys;
    }
    (exports = module.exports =
      'function' == typeof Object.keys ? Object.keys : shim),
      (exports.shim = shim);
  },
  function(module, exports) {
    function supported(object) {
      return '[object Arguments]' == Object.prototype.toString.call(object);
    }

    function unsupported(object) {
      return (
        (object &&
          'object' == typeof object &&
          'number' == typeof object.length &&
          Object.prototype.hasOwnProperty.call(object, 'callee') &&
          !Object.prototype.propertyIsEnumerable.call(object, 'callee')) ||
        !1
      );
    }
    var supportsArgumentsClass =
      '[object Arguments]' ==
      (function() {
        return Object.prototype.toString.call(arguments);
      })();
    (exports = module.exports = supportsArgumentsClass
      ? supported
      : unsupported),
      (exports.supported = supported),
      (exports.unsupported = unsupported);
  },
  function(module, exports, __webpack_require__) {
    'use strict';

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule
        ? obj
        : {
            default: obj,
          };
    }

    function number(value) {
      var patt_number = /(^-?[0-9]+$)/;
      return patt_number.test(value) && _.isFinite(parseInt(value));
    }

    function ipv4(ip) {
      var re = new RegExp(
        '^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$'
      );
      return re.test(ip);
    }

    function ipv4Network(value) {
      if (!_.isString(value)) return !1;
      var arr = value.split('/');
      if (2 != arr.length) return !1;
      var ip = arr[0],
        mask = castToNumber(arr[1]);
      return ipv4(ip) && ipv4Prefix(mask) ? !0 : !1;
    }

    function ipv4Prefix(prefix) {
      var input = _.isString(prefix) ? Number(prefix) : prefix;
      return _.isNaN(input) ? !1 : input >= 0 && 32 >= input;
    }

    function ipv6(ip) {
      var re = new RegExp(
        /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/
      );
      return re.test(ip);
    }

    function ipv6Network(value) {
      if (!_.isString(value)) return !1;
      var arr = value.split('/');
      if (2 != arr.length) return !1;
      var ip = arr[0],
        mask = castToNumber(arr[1]);
      return ipv6(ip)
        ? !_.isNumber(mask) || _.isNaN(mask)
          ? !1
          : 0 > mask || mask > 128
            ? !1
            : !0
        : !1;
    }

    function ipv6Prefix(prefix) {
      var re = /^(0|[1-9]|[1-9][0-9]|1[0-2][0-8])$/;
      return re.test(prefix);
    }

    function mask(msk) {
      var re = /^(((255\.){3}(255|254|252|248|240|224|192|128|0+))|((255\.){2}(255|254|252|248|240|224|192|128|0+)\.0)|((255\.)(255|254|252|248|240|224|192|128|0+)(\.0+){2})|((255|254|252|248|240|224|192|128|0+)(\.0+){3}))$/;
      return re.test(msk);
    }

    function mac(value) {
      var patt_mac = /^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$/;
      return patt_mac.test(value);
    }

    function isPort(port) {
      return (
        (port = _.isString(port) ? castToNumber(port) : port),
        !_.isNumber(port) || _.isNaN(port)
          ? !1
          : 1 > port
            ? !1
            : port > 65535
              ? !1
              : !0
      );
    }

    function domain(obj) {
      var host = obj;
      if (host.length) {
        host = host.replace(/(^\s+|\s+$)/g, '');
        var dot = host.lastIndexOf('.'),
          dname = host.substring(0, dot),
          ext = host.substring(dot + 1, host.length);
        if (ext.length - 1 < 1 || ext.length > 6) return !1;
        if (2 > dot || dot > 63) return !1;
        var ln = dname.length - 1;
        if ('-' == dname[0] || '-' == dname[ln]) return !1;
        for (
          var labels = dname.split('.'), pat = /^[\wа-яА-Я-]+$/, j = 0;
          j < labels.length;
          j++
        )
          if (!pat.test(labels[j])) return !1;
        var pat_ext = /^[\wа-яА-Я][^0-9-]+$/;
        if (!pat_ext.test(ext)) return !1;
      }
      return !0;
    }

    function castToNumber(value) {
      var patt = /^[0-9]*$/;
      return (
        (value = value.match(/\S+/)),
        value && patt.test(value[0]) ? parseInt(value[0]) : 0 / 0
      );
    }

    function RPCSuccess(response) {
      var successStatuses = [12, 13, 20, 24];
      return (
        'object' ===
          ('undefined' == typeof response
            ? 'undefined'
            : _typeof3['default'](response)) &&
        'status' in response &&
        !!~successStatuses.indexOf(response.status)
      );
    }

    function allRPCSuccess(response) {
      return 'object' !==
        ('undefined' == typeof response
          ? 'undefined'
          : _typeof3['default'](response))
        ? !1
        : 'rq' in response
          ? response.rq.every(RPCSuccess)
          : RPCSuccess(response);
    }

    function RPCTryLater(response) {
      return (
        'object' ===
          ('undefined' == typeof response
            ? 'undefined'
            : _typeof3['default'](response)) &&
        'status' in response &&
        65 == response.status
      );
    }

    function somovdRequest(request, method, params) {
      function hasParam(elem, params) {
        return _.every(params, function(value, key) {
          return (
            elem[key] &&
            (elem[key] == value ||
              (_.isObject(value) && _.isEqual(elem[key], value)))
          );
        });
      }
      var somovdUrl = ['/jsonrpc', '/dcc_somovd.cgi'];
      if (!_.contains(somovdUrl, request.config.url)) return !1;
      var data = request.data || request.config.data;
      return (
        _.isArray(data) || (data = [data]),
        _.some(data, function(elem) {
          return elem.method != method ? !1 : hasParam(elem.params, params);
        })
      );
    }

    function silentSomovdRequest(request) {
      var somovdUrl = ['/jsonrpc', '/dcc_somovd.cgi'];
      if (!_.contains(somovdUrl, request.config.url)) return !1;
      var data = request.data || request.config.data;
      return (
        _.isArray(data) || (data = [data]),
        !_.some(data, function(elem) {
          var options = elem.params.options;
          return !options || !options.silent;
        })
      );
    }
    var _typeof2 = __webpack_require__(62),
      _typeof3 = _interopRequireDefault(_typeof2),
      _ = __webpack_require__(3),
      is = {
        number: number,
        ipv4: ipv4,
        ipv4Network: ipv4Network,
        ipv4Prefix: ipv4Prefix,
        ipv6: ipv6,
        ipv6Network: ipv6Network,
        ipv6Prefix: ipv6Prefix,
        mask: mask,
        mac: mac,
        port: isPort,
        domain: domain,
        RPCSuccess: RPCSuccess,
        allRPCSuccess: allRPCSuccess,
        RPCTryLater: RPCTryLater,
        somovdRequest: somovdRequest,
        silentSomovdRequest: silentSomovdRequest,
      };
    module.exports = is;
  },
  function(module, exports, __webpack_require__) {
    'use strict';
    var _ = __webpack_require__(3),
      is = __webpack_require__(73);
    module.exports = (function() {
      var address = (function() {
          function compare(addr1, addr2) {
            for (
              var arrAddr1 = addr1.split('.'),
                arrAddr2 = addr2.split('.'),
                i = 0;
              i < arrAddr1.length;
              i++
            ) {
              var partAddr1 = arrAddr1[i],
                partAddr2 = arrAddr2[i];
              if (parseInt(partAddr1) < parseInt(partAddr2)) return -1;
              if (parseInt(partAddr1) > parseInt(partAddr2)) return 1;
            }
            return 0;
          }

          function and(addr1, addr2) {
            return bitOperation(addr1, addr2, 'and');
          }

          function or(addr1, addr2) {
            return bitOperation(addr1, addr2, 'or');
          }

          function not(addr) {
            for (
              var bits = toBits(addr), result = '', index = 0;
              index < bits.length;
              index++
            ) {
              var bit = bits[index];
              '.' == bit && (result += '.'),
                '1' == bit && (result += '0'),
                '0' == bit && (result += '1');
            }
            return fromBits(result);
          }

          function inc(addr) {
            for (
              var arrAddr = addr.split('.'), index = 3;
              index >= 0;
              --index
            ) {
              if ('255' != arrAddr[index]) {
                arrAddr[index] = (parseInt(arrAddr[index]) + 1).toString();
                break;
              }
              arrAddr[index] = '0';
            }
            return arrAddr.join('.');
          }

          function dec(addr) {
            for (
              var arrAddr = addr.split('.'), index = 3;
              index >= 0;
              --index
            ) {
              if ('0' != arrAddr[index]) {
                arrAddr[index] = (parseInt(arrAddr[index]) - 1).toString();
                break;
              }
              arrAddr[index] = '255';
            }
            return arrAddr.join('.');
          }

          function toBits(addr) {
            var arrAddr = addr.split('.');
            return _.map(arrAddr, function(partAddr) {
              for (var bits = parseInt(partAddr).toString(2); bits.length < 8; )
                bits = '0' + bits;
              return bits;
            }).join('.');
          }

          function fromBits(bits) {
            var arrBits = bits.split('.');
            return _.map(arrBits, function(partBits) {
              return parseInt(partBits, 2).toString();
            }).join('.');
          }

          function bitOperation(addr1, addr2, operation) {
            var arrAddr1 = addr1.split('.'),
              arrAddr2 = addr2.split('.');
            return _.map(arrAddr1, function(partAddr1, index) {
              var result,
                partAddr2 = arrAddr2[index],
                intPartAddr1 = parseInt(partAddr1),
                intPartAddr2 = parseInt(partAddr2);
              return (
                (result =
                  'and' == operation
                    ? intPartAddr1 & intPartAddr2
                    : 'or' == operation
                      ? intPartAddr1 | intPartAddr2
                      : 0),
                result.toString()
              );
            }).join('.');
          }
          return {
            compare: compare,
            and: and,
            or: or,
            not: not,
            inc: inc,
            dec: dec,
            toBits: toBits,
            fromBits: fromBits,
          };
        })(),
        mask = (function(address) {
          function short(msk) {
            var reg = /\.|0/gi,
              bits = address.toBits(msk),
              len = bits.replace(reg, '').length;

            return len.toString();
          }

          function long(msk) {
            function byOctet(msk) {
              for (var result = '', i = 1; 32 >= i; i++) {
                var value = i > parseInt(msk) ? '0' : '1';
                (result += value), 32 == i || i % 8 || (result += '.');
              }
              return result;
            }
            var bits = byOctet(msk);
            return address.fromBits(bits);
          }

          function wildcard(msk) {
            return address.not(msk);
          }

          function hosts(msk) {
            var reg = /\.|0+/gi,
              wild = wildcard(msk),
              str = address.toBits(wild).replace(reg, '');
            return str ? parseInt(str, 2) - 1 : 0;
          }

          function range(start, end) {
            var result = [];
            if (!is.mask(start) || !is.mask(end)) return result;
            if (-1 != address.compare(start, end)) return result;
            var current = start;
            do
              result.push(current),
                (current = next(current)),
                current == end && result.push(current);
            while (current != end);
            return result;
          }

          function next(msk) {
            function getIncIndex(bits) {
              for (var inx = 0; inx < bits.length; inx++)
                if ('11111111' != bits[inx]) return inx;
            }

            function incOctet(octet) {
              function replacer(str, p1, p2, offset, s) {
                return p1 ? p1 + '1' : p2.replace(/0/, '1');
              }
              var regexp = /(1*)(0)/;
              return octet.replace(regexp, replacer);
            }
            var str = address.toBits(msk),
              bits = str.split('.'),
              inx = getIncIndex(bits);
            return (
              (bits[inx] = incOctet(bits[inx])),
              address.fromBits(bits.join('.'))
            );
          }
          return {
            short: short,
            long: long,
            wildcard: wildcard,
            hosts: hosts,
            range: range,
          };
        })(address),
        subnet = (function(address, mask) {
          function getNetworkAddress(addr, msk) {
            return address.and(addr, msk);
          }

          function getBroadcastAddress(addr, msk) {
            var wildcard = mask.wildcard(msk);
            return address.or(addr, wildcard);
          }

          function checkReserved(addr, msk) {
            if (!is.ipv4(addr) || !is.mask(msk)) return null;
            var network = getNetworkAddress(addr, msk),
              broadcast = getBroadcastAddress(addr, msk);
            if (addr == network) return 'network';
            if (addr == broadcast) return 'broadcast';
            switch (network) {
              case '0.0.0.0':
                return 'defroute';
              case '127.0.0.0':
                return 'loopback';
              case '169.254.0.0':
                return 'linklocal';
              case '240.0.0.0':
                return 'future';
              case '192.88.99.0':
                return 'anycast';
              case '224.0.0.0':
                return 'multicast';
            }
            return null;
          }

          function getNetworkRange(addr, msk) {
            if (isHost(msk))
              return {
                start: addr,
                end: addr,
              };
            var network = getNetworkAddress(addr, msk),
              broadcast = getBroadcastAddress(addr, msk),
              start = address.inc(network),
              end = start == broadcast ? broadcast : address.dec(broadcast);
            return {
              start: start,
              end: end,
            };
          }

          function getNetwork(addr, mask) {
            return isHost(mask)
              ? {
                  net: addr,
                  mask: mask,
                }
              : {
                  net: getNetworkAddress(addr, mask),
                  mask: mask,
                };
          }

          function belongNetworkRange(range, addr) {
            return (
              1 != address.compare(range.start, addr) &&
              -1 != address.compare(range.end, addr)
            );
          }

          function belongNetwork(net, addr, mask) {
            return address.and(addr, mask) != net ? !1 : !0;
          }

          function containsNetwork(network1, network2) {
            var range1 = getNetworkRange(network1.ip, network1.mask),
              range2 = getNetworkRange(network2.ip, network2.mask);
            return (
              belongNetworkRange(range1, range2.start) &&
              belongNetworkRange(range1, range2.end)
            );
          }

          function splitNetworkRange(range, addr) {
            var result = [];
            return (
              0 == address.compare(range.start, addr)
                ? result.push({
                    start: address.inc(addr),
                    end: range.end,
                  })
                : 0 == address.compare(range.end, addr)
                  ? result.push({
                      start: range.start,
                      end: address.dec(addr),
                    })
                  : (result.push({
                      start: range.start,
                      end: address.dec(addr),
                    }),
                    result.push({
                      start: address.inc(addr),
                      end: range.end,
                    })),
              result
            );
          }

          function getNetworkClass(addr) {
            if (!is.ipv4(addr)) return null;
            var first = _.first(addr.split('.'));
            return first >= 0 && 128 > first
              ? 'A'
              : first >= 128 && 192 > first
                ? 'B'
                : first >= 192 && 224 > first
                  ? 'C'
                  : first >= 224 && 240 > first
                    ? 'D'
                    : 'E';
          }

          function isHost(msk) {
            return '255.255.255.255' == msk;
          }
          return {
            getNetworkAddress: getNetworkAddress,
            getBroadcastAddress: getBroadcastAddress,
            checkReserved: checkReserved,
            getNetworkRange: getNetworkRange,
            containsNetwork: containsNetwork,
            belongNetworkRange: belongNetworkRange,
            splitNetworkRange: splitNetworkRange,
            getNetworkClass: getNetworkClass,
            belongNetwork: belongNetwork,
            getNetwork: getNetwork,
          };
        })(address, mask);
      return {
        address: address,
        mask: mask,
        subnet: subnet,
      };
    })();
  },
  function(module, exports, __webpack_require__) {
    'use strict';
    var _ = __webpack_require__(3),
      is = __webpack_require__(73);
    module.exports = (function() {
      var address = (function() {
          function compare(addr1, addr2) {
            for (
              var arrAddr1 = full(addr1).split(':'),
                arrAddr2 = full(addr2).split(':'),
                i = 0;
              i < arrAddr1.length;
              i++
            ) {
              var partAddr1 = arrAddr1[i],
                partAddr2 = arrAddr2[i];
              if (parseInt(partAddr1, 16) < parseInt(partAddr2, 16)) return -1;
              if (parseInt(partAddr1, 16) > parseInt(partAddr2, 16)) return 1;
            }
            return 0;
          }

          function isShort(addr) {
            return 39 != addr.length;
          }

          function full(addr) {
            var arrAddr = addr.split(':'),
              arrResult = [],
              shortLen = 8 - _.compact(arrAddr).length;
            return (
              _.each(arrAddr, function(elem, index) {
                if ('' != elem) {
                  for (; elem.length < 4; ) elem = '0' + elem;
                  arrResult.push(elem);
                } else for (; shortLen; ) arrResult.push('0000'), --shortLen;
              }),
              arrResult.join(':')
            );
          }

          function short(addr) {
            function findLongestZeroSeq(addr) {
              var sequences = addr.match(/((^|:)0)+/g);
              return sequences
                ? _.max(sequences, function(seq) {
                    return seq.length;
                  })
                : null;
            }
            var workAddr = _.clone(addr);
            workAddr = workAddr.replace(/([0-9a-f]+)(?=(:|$))/gi, function(
              octet
            ) {
              return (octet = octet.replace(/^0{1,3}/, ''));
            });
            var zeroSequence = findLongestZeroSeq(workAddr);
            return _.isNull(zeroSequence)
              ? workAddr
              : ((workAddr = workAddr.replace(zeroSequence, '::')),
                workAddr.replace(/\:{2,}/, '::'));
          }

          function inc(addr) {
            var isAddrShort = isShort(addr);
            isAddrShort && (addr = full(addr));
            for (
              var arrAddr = addr.split(':'), index = 7;
              index >= 0;
              --index
            ) {
              if ('ffff' != arrAddr[index]) {
                arrAddr[index] = (parseInt(arrAddr[index], 16) + 1).toString(
                  16
                );
                break;
              }
              arrAddr[index] = '0000';
            }
            var result = arrAddr.join(':');
            return isAddrShort ? short(result) : result;
          }

          function dec(addr) {
            var isAddrShort = isShort(addr);
            isAddrShort && (addr = full(addr));
            for (
              var arrAddr = addr.split(':'), index = 7;
              index >= 0;
              --index
            ) {
              if ('0000' != arrAddr[index]) {
                for (
                  arrAddr[index] = (parseInt(arrAddr[index], 16) - 1).toString(
                    16
                  );
                  arrAddr[index].length < 4;

                )
                  arrAddr[index] = '0' + arrAddr[index];
                break;
              }
              arrAddr[index] = 'ffff';
            }
            var result = arrAddr.join(':');
            return isAddrShort ? short(result) : result;
          }

          function toBits(addr) {
            var arrAddr = full(addr).split(':');
            return _.map(arrAddr, function(partAddr) {
              for (
                var bits = parseInt(partAddr, 16).toString(2);
                bits.length < 16;

              )
                bits = '0' + bits;
              return bits;
            }).join(':');
          }

          function fromBits(bits) {
            var arrBits = bits.split(':'),
              result = _.map(arrBits, function(partBits) {
                for (
                  var partAddr = parseInt(partBits, 2).toString(16);
                  partAddr.length < 4;

                )
                  partAddr = '0' + partAddr;
                return partAddr;
              }).join(':');
            return short(result);
          }
          return {
            compare: compare,
            isShort: isShort,
            full: full,
            short: short,
            inc: inc,
            dec: dec,
            toBits: toBits,
            fromBits: fromBits,
          };
        })(),
        subnet = (function(address) {
          function getNetworkAddress(addr, prefix) {
            return prefixMask(addr, prefix, !1);
          }

          function checkReserved(addr, prefix) {
            if (!is.ipv6(addr) || !is.ipv6Prefix(prefix)) return null;
            var network = getNetworkAddress(addr, prefix);
            if (network == addr) return 'network';
            var shortNetwork = address['short'](network);
            switch (shortNetwork) {
              case '::':
                return 'defroute';
              case '::1':
                return 'loopback';
              case '2001:db8::':
                return 'reserved';
              case 'fc00::':
                return 'anycast';
              case 'ff00::':
                return 'multicast';
            }
            return null;
          }

          function getNetworkRange(addr, prefix) {
            var start = prefixMask(addr, prefix, !1),
              end = prefixMask(start, prefix, !0);
            return {
              start: address.inc(start),
              end: end,
            };
          }

          function getNetwork(addr, prefix) {
            var subnet = prefixMask(addr, prefix, !1);
            return {
              net: subnet,
              prefix: prefix,
            };
          }

          function belongNetworkRange(range, addr) {
            return (
              1 != address.compare(range.start, addr) &&
              -1 != address.compare(range.end, addr)
            );
          }

          function belongNetwork(net, addr, prefix) {
            var addrNet = getNetwork(addr, prefix, !1);
            return addrNet.net != net ? !1 : !0;
          }

          function containsNetwork(network1, network2) {
            var range1 = getNetworkRange(network1.ip, network1.prefix),
              range2 = getNetworkRange(network2.ip, network2.prefix);
            return (
              belongNetworkRange(range1, range2.start) &&
              belongNetworkRange(range1, range2.end)
            );
          }

          function splitNetworkRange(range, addr) {
            var result = [];
            return (
              0 == address.compare(range.start, addr)
                ? result.push({
                    start: address.inc(addr),
                    end: range.end,
                  })
                : 0 == address.compare(range.end, addr)
                  ? result.push({
                      start: range.start,
                      end: address.dec(addr),
                    })
                  : (result.push({
                      start: range.start,
                      end: address.dec(addr),
                    }),
                    result.push({
                      start: address.inc(addr),
                      end: range.end,
                    })),
              result
            );
          }

          function prefixMask(addr, prefix, invert) {
            var isAddrShort = address.isShort(addr);
            isAddrShort && (addr = address.full(addr));
            for (
              var bits = address.toBits(addr),
                prefix = parseInt(prefix),
                result = '',
                len = 0,
                index = 0;
              index < bits.length;
              index++
            ) {
              var bit = bits[index];
              ':' != bit
                ? ((result += len >= prefix ? (invert ? '1' : '0') : bit),
                  (len += 1))
                : (result += ':');
            }
            var result = address.fromBits(result);
            return isAddrShort ? address['short'](result) : result;
          }
          return {
            getNetworkAddress: getNetworkAddress,
            checkReserved: checkReserved,
            getNetworkRange: getNetworkRange,
            belongNetworkRange: belongNetworkRange,
            containsNetwork: containsNetwork,
            splitNetworkRange: splitNetworkRange,
            belongNetwork: belongNetwork,
            getNetwork: getNetwork,
          };
        })(address);
      return {
        address: address,
        subnet: subnet,
      };
    })();
  },
  function(module, exports, __webpack_require__) {
    'use strict';
    var _ = (__webpack_require__(5), __webpack_require__(3));
    module.exports = (function() {
      function getModeName(mode, standards) {
        var modes = _.indexBy(getTempModes(standards), 'value');
        return modes[mode] ? modes[mode].name : '';
      }

      function getTempModes(standards) {
        var tempM = [
          {
            name: 'Open',
            value: 'None',
          },
          {
            name: 'WPA-PSK',
            value: 'WPA-Personal',
          },
          {
            name: 'WPA2-PSK',
            value: 'WPA2-Personal',
          },
          {
            name: 'WPA-PSK/WPA2-PSK mixed',
            value: 'WPA-WPA2-Personal',
          },
          {
            name: 'WPA',
            value: 'WPA-Enterprise',
          },
          {
            name: 'WPA2',
            value: 'WPA2-Enterprise',
          },
          {
            name: 'WPA/WPA2 mixed',
            value: 'WPA-WPA2-Enterprise',
          },
        ];
        return (
          isGBStandard(standards) &&
            tempM.splice(
              1,
              0,
              {
                name: 'WEP-64',
                value: 'WEP-64',
              },
              {
                name: 'WEP-128',
                value: 'WEP-128',
              }
            ),
          tempM
        );
      }

      function isGBStandard(standards) {
        return ~['g', 'b', 'bg'].indexOf(standards);
      }

      function getWEPTypes() {
        return ['WEP-64', 'WEP-128'];
      }

      function getDefaultKeysID() {
        return ['1', '2', '3', '4'];
      }

      function getEncrypTypes(point, standards) {
        if (!point && !point.Security) return [];
        var mode = point.Security.ModeEnabled,
          openWEP = point.Security.OpenWEP;
        if (
          !_.contains(['None', 'WEP-64', 'WEP-128'], mode) &&
          standards &&
          !isGBStandard(standards)
        )
          return ['AES'];
        if ('None' == mode && openWEP) return ['WEP'];
        switch (mode) {
          case 'None':
            return ['NONE'];
          case 'WEP-64':
          case 'WEP-128':
            return ['WEP'];
          case 'WPA-Enterprise':
            return ['TKIP'];
          case 'WPA2-Enterprise':
            return ['AES'];
          case 'WPA-Personal':
          case 'WPA2-Personal':
          case 'WPA-WPA2-Personal':
          case 'WPA-WPA2-Enterprise':
            return ['TKIP', 'AES', 'TKIP+AES'];
        }
        return [];
      }

      function checkSecurityType(type, point, standards) {
        if (!point || !point.Security) return !1;
        var mode = point.Security.ModeEnabled,
          enableWEP = point.Security.OpenWEP;
        switch (type) {
          case 'enableWEP':
            return 'None' == mode && (!standards || isGBStandard(standards));
          case 'WEP':
            return (
              'WEP' == mode ||
              'WEP-64' == mode ||
              'WEP-128' == mode ||
              ('None' == mode && enableWEP)
            );
          case 'PSK':
            return (
              'WPA-Personal' == mode ||
              'WPA2-Personal' == mode ||
              'WPA-WPA2-Personal' == mode
            );
          case 'Enterprise':
            return (
              'WPA-Enterprise' == mode ||
              'WPA2-Enterprise' == mode ||
              'WPA-WPA2-Enterprise' == mode
            );
          default:
            return !1;
        }
      }

      function isOpen(point) {
        if (!point || !point.Security) return !1;
        var mode = point.Security.ModeEnabled,
          enableWEP = point.Security.OpenWEP;
        return 'None' == mode && !enableWEP;
      }

      function validPSKKey(pskKey) {
        if (pskKey) {
          if (!(pskKey.length >= 8 && pskKey.length <= 63))
            return 'invalid_password_length';
          if (!/^[^а-яА-ЯёЁ]+$/g.test(pskKey)) return 'invalid_psk_cyrill';
          if (!/^[\x20-\x7E]+$/g.test(pskKey))
            return 'password_contains_illegal';
        }
        return null;
      }

      function getKeyLen(modePrefix, hexkey) {
        var keyLen = '128' == modePrefix ? 26 : 10;
        return hexkey ? keyLen : keyLen / 2;
      }

      function getErrorMsg(modePrefix, hexkey) {
        var msg = 'invalid_wep_';
        return hexkey && (msg += 'hex_'), (msg += modePrefix);
      }

      function isWEP(sec) {
        return (
          _.contains(getWEPTypes(), sec.ModeEnabled) ||
          ('None' == sec.ModeEnabled && sec.OpenWEP)
        );
      }

      function getWEPMode(sec) {
        return _.contains(getWEPTypes(), sec.ModeEnabled)
          ? sec.ModeEnabled
          : 'None' == sec.ModeEnabled && sec.OpenWEP
            ? sec.OpenWEPType
            : null;
      }

      function getWEPKeyLenMessage(point) {
        var security = point.Security;
        if (!isWEP(security)) return null;
        var mode = getWEPMode(security),
          hexkey = security.WEPasHEX,
          modePrefix = mode.split('-')[1];
        return getKeyLen(modePrefix, hexkey), getErrorMsg(modePrefix, hexkey);
      }

      function validWEPKey(wepKey, point) {
        var security = point.Security;
        if (!isWEP(security)) return null;
        var mode = getWEPMode(security),
          hexkey = security.WEPasHEX,
          modePrefix = mode.split('-')[1],
          keyLen = getKeyLen(modePrefix, hexkey);
        return wepKey && wepKey.length != keyLen ? 'invalid_key_format' : null;
      }

      function supportedStandards(standarts) {
        if (!standarts) return {};
        var result = {},
          stList = getStandardsList(),
          stSupported = standarts.split(',');
        return (
          _.each(stList, function(elem) {
            var arrValue = elem.value.split(',');
            _.difference(arrValue, stSupported).length ||
              (result[elem.value] = elem.name);
          }),
          result
        );
      }

      function getStandardsList() {
        return [
          {
            name: '802.11 A',
            value: 'a',
          },
          {
            name: '802.11 B',
            value: 'b',
          },
          {
            name: '802.11 G',
            value: 'g',
          },
          {
            name: '802.11 N',
            value: 'n',
          },
          {
            name: '802.11 AC',
            value: 'ac',
          },
          {
            name: '802.11 B/G mixed',
            value: 'bg',
          },
          {
            name: '802.11 G/N mixed',
            value: 'gn',
          },
          {
            name: '802.11 B/G/N mixed',
            value: 'bgn',
          },
          {
            name: '802.11 B/G/N mixed + 256QAM',
            value: 'bgnac',
          },
          {
            name: '802.11 A/N mixed',
            value: 'an',
          },
          {
            name: '802.11 AC/N mixed',
            value: 'acn',
          },
          {
            name: '802.11 AC/A/N mixed',
            value: 'acan',
          },
          {
            name: '802.11 A/N/AC mixed',
            value: 'anac',
          },
          {
            name: '802.11 N/AC mixed',
            value: 'nac',
          },
        ];
      }
      return {
        getModeName: getModeName,
        getTempModes: getTempModes,
        isGBStandard: isGBStandard,
        getWEPTypes: getWEPTypes,
        getEncrypTypes: getEncrypTypes,
        getDefaultKeysID: getDefaultKeysID,
        checkSecurityType: checkSecurityType,
        isOpen: isOpen,
        validPSKKey: validPSKKey,
        validWEPKey: validWEPKey,
        getWEPKeyLenMessage: getWEPKeyLenMessage,
        supportedStandards: supportedStandards,
      };
    })();
  },
  function(module, exports, __webpack_require__) {
    'use strict';
    var funcs = __webpack_require__(6),
      _ = __webpack_require__(3);
    module.exports = (function() {
      function makeDiff(config, compared, attrs, countObj) {
        function setNewValues(output, compared, newKeys, attrs, countObj) {
          isTemplate(attrs) ? '+' : '',
            _.each(newKeys, function(key) {
              var value = compared[key];
              if (isTemplate(attrs)) {
                countObj.num++;
                var newKey = '+' + countObj.num;
              } else var newKey = key;
              if (_.isObject(value)) {
                var defaultModel = getDefaultModel(attrs, key);
                output[newKey] = makeDiff(
                  defaultModel,
                  value,
                  getAttrsRoot(attrs, key),
                  countObj
                );
              } else output[newKey] = value;
            });
        }

        function updateValues(output, config, compared, keys, attrs, countObj) {
          _.each(keys, function(key) {
            var configValue = config[key],
              compareValue = compared[key];
            if (_.isObject(compareValue)) {
              var changes = makeDiff(
                configValue,
                compareValue,
                getAttrsRoot(attrs, key),
                countObj
              );
              _.isEmpty(changes) || (output[key] = changes);
            } else {
              if (_.isEqual(configValue, compareValue)) return;
              output[key] = compareValue;
            }
          });
        }

        function removeValues(output, attrs, removeKeys, curCount) {
          isTemplate(attrs) &&
            _.each(removeKeys, function(key) {
              var newKey = '-' + key;
              output[newKey] = unsetLinkModel(attrs['#template']);
            });
        }

        function changeOrder(output, config, compared) {
          config.order &&
            compared.order &&
            (funcs.deepEqual(config.order, compared.order) ||
              (output.order = compared.order));
        }

        function getAttrsRoot(attrs, key) {
          var result = isTemplate(attrs) ? attrs['#template'] : attrs[key];
          return result || {};
        }

        function getKeysWithoutServiceKeys(obj) {
          return _.keys(_.omit(obj, 'max_instance', 'order'));
        }

        function isTemplate(obj) {
          return _.has(obj, '#template');
        }

        function getDefaultModel(attrs, key) {
          return funcs.fetchBranch(attrs, key + '.#attr.default.') || {};
        }

        function unsetLinkModel(attrs) {
          var result = {};
          return (
            _.each(attrs, function(value, key) {
              'Enable' == key && (result[key] = !1),
                'link' == value.type &&
                  'readOnly' != value.access &&
                  (result[key] = '');
            }),
            result
          );
        }
        countObj ||
          (countObj = {
            num: 0,
          });
        var output = {},
          configKeys = getKeysWithoutServiceKeys(config),
          comparedKeys = getKeysWithoutServiceKeys(compared),
          newKeys = _.difference(comparedKeys, configKeys),
          removeKeys = _.difference(configKeys, comparedKeys),
          commonKeys = _.intersection(configKeys, comparedKeys);
        return (
          setNewValues(output, compared, newKeys, attrs, countObj),
          updateValues(output, config, compared, commonKeys, attrs, countObj),
          removeValues(output, attrs, removeKeys, countObj),
          changeOrder(output, config, compared),
          output
        );
      }

      function reorder(orders, inst, newOrder) {
        var list = _.clone(orders),
          curInx = _.findIndex(orders, function(e) {
            return e == inst;
          });
        return (
          -1 != curInx && list.splice(curInx, 1),
          list.splice(newOrder, 0, inst),
          list
        );
      }

      function getDiff(config, compared, attrs) {
        function setNewValuesToDiff(output, compared, newKeys, attrs) {
          var postfix = isTemplate(attrs) ? '+' : '';
          _.each(newKeys, function(key) {
            var value = compared[key];
            output[key + postfix] = _.isObject(value)
              ? getDiff({}, value, getAttrsRoot(attrs, key))
              : value;
          });
        }

        function updateValues(output, config, compared, keys, attrs) {
          _.each(keys, function(key) {
            var configValue = config[key],
              compareValue = compared[key];
            if (_.isObject(compareValue)) {
              var changes = getDiff(
                configValue,
                compareValue,
                getAttrsRoot(attrs, key)
              );
              _.isEmpty(changes) || (output[key] = changes);
            } else {
              if (_.isEqual(configValue, compareValue)) return;
              output[key] = compareValue;
            }
          });
        }

        function setRemoveKeysToDiff(output, keys, config) {
          _.each(keys, function(key) {
            output[key + '-'] = config[key];
          });
        }

        function getAttrsRoot(attrs, key) {
          return isTemplate(attrs) ? attrs['#template'] : attrs[key];
        }

        function getKeysWithoutServiceKeys(obj) {
          return _.keys(_.omit(obj, 'max_instance', 'order'));
        }

        function isTemplate(obj) {
          return _.has(obj, '#template');
        }
        var output = {},
          configKeys = getKeysWithoutServiceKeys(config),
          comparedKeys = getKeysWithoutServiceKeys(compared),
          newKeys = _.difference(comparedKeys, configKeys),
          removeKeys = _.difference(configKeys, comparedKeys),
          commonKeys = _.intersection(configKeys, comparedKeys);
        return (
          setNewValuesToDiff(output, compared, newKeys, attrs),
          updateValues(output, config, compared, commonKeys, attrs),
          isTemplate(attrs) && setRemoveKeysToDiff(output, removeKeys, config),
          output
        );
      }

      function checkChanges(original, compared) {
        function setNew(diff, compared, keys) {
          var postfix = isTemplate(compared) ? '+' : '';
          isTemplate(compared) && (keys = _.without(keys, '__template')),
            _.each(keys, function(key) {
              var compValue = compared[key];
              diff[key + postfix] = isValue(compValue)
                ? compValue
                : checkChanges({}, compValue);
            });
        }

        function updateValues(diff, original, compared, keys) {
          _.each(keys, function(key) {
            var origValue = original[key],
              compValue = compared[key];
            if (isValue(compValue)) {
              if (_.isEqual(origValue, compValue)) return;
              diff[key] = compValue;
            } else {
              var changes = checkChanges(origValue, compValue);
              _.isEmpty(changes) || (diff[key] = changes);
            }
          });
        }

        function removeOld(diff, original, keys) {
          _.each(keys, function(key) {
            diff[key + '-'] = original[key];
          });
        }

        function getKeys(obj) {
          return _.keys(rejectServiceKey(obj));
        }

        function rejectServiceKey(obj) {
          return _.omit(obj, 'max_instance', 'order');
        }

        function isValue(value) {
          return !_.isObject(value);
        }

        function isTemplate(obj) {
          return _.has(obj, '__template');
        }
        var diff = {},
          comparedKeys = getKeys(compared),
          originalKeys = getKeys(original),
          newKeys = _.difference(comparedKeys, originalKeys),
          removeKeys = _.difference(originalKeys, comparedKeys),
          commonKeys = _.intersection(originalKeys, comparedKeys);
        return (
          setNew(diff, compared, newKeys),
          updateValues(diff, original, compared, commonKeys),
          isTemplate(compared) && removeOld(diff, original, removeKeys),
          diff
        );
      }

      function makeDefaultModel(attrs) {
        if (_.has(attrs, 'default')) return attrs['default'];
        var result = {};
        return (
          _.each(attrs, function(value, key) {
            '#attr' != key &&
              (result[key] = makeDefaultModel(
                _.has(value, '#template') ? value['#template'] : value
              ));
          }),
          result
        );
      }

      function makeEnumModel(attrs) {
        var result = {};
        return (
          _.each(attrs, function(obj, key) {
            _.isObject(obj) &&
              (_.has(obj, '#template') && (obj = obj['#template']),
              _.has(obj, 'enum')
                ? (result[key] = obj['enum'])
                : _.has(obj, 'default') || (result[key] = makeEnumModel(obj)));
          }),
          result
        );
      }

      function makeSupportedModel(attrs) {
        var result = {};
        return (
          _.each(attrs, function(obj, key) {
            '#attr' != key &&
              (result[key] = _.has(obj, 'default')
                ? !0
                : makeSupportedModel(obj));
          }),
          result
        );
      }

      function makeMinMaxModel(attrs) {
        var result = {};
        return (
          _.each(attrs, function(obj, key) {
            if ('#attr' != key) {
              if (!_.has(obj, 'default'))
                return void (result[key] = makeMinMaxModel(obj));
              result[key] = {};
              var type = obj.type;
              ('int' == type || 'unsignedInt' == type) &&
                ('unsignedInt' == type && (result[key].min = 0),
                _.has(obj, 'minInclusive') &&
                  (result[key].min = obj.minInclusive),
                _.has(obj, 'maxInclusive') &&
                  (result[key].max = obj.maxInclusive));
            }
          }),
          result
        );
      }

      function directTransformTemplate(template, func) {
        function filterTemplate(template) {
          var result = {};
          return (
            _.each(template, function(elem, key) {
              'max_instance' != key && 'order' != key && (result[key] = elem);
            }),
            result
          );
        }
        var template = filterTemplate(template);
        return _.map(template, func);
      }

      function normalize(obj) {
        var result = {};
        return (
          _.each(obj, function(elem, key) {
            'max_instance' != key && 'order' != key && (result[key] = elem);
          }),
          result
        );
      }

      function instanceObjectToArray(elems, convertFn) {
        var elems = normalize(elems);
        return _.map(elems, function(elem, id) {
          return (
            _.isObject(elem) && (elem.__id = id),
            convertFn && (elem = convertFn(elem)),
            elem
          );
        });
      }

      function arrayToInstanceObject(elems, convertFn, filterFn) {
        var output = {};
        return (
          _.each(elems, function(elem, id) {
            if (!filterFn || filterFn(elem, id)) {
              var inst = elem.__id ? elem.__id : (id + 1).toString();
              delete elem.__id,
                (output[inst] = convertFn ? convertFn(elem, inst) : elem);
            }
          }),
          output
        );
      }
      return {
        makeDiff: makeDiff,
        reorder: reorder,
        checkChanges: checkChanges,
        getDiff: getDiff,
        makeDefaultModel: makeDefaultModel,
        makeEnumModel: makeEnumModel,
        makeSupportedModel: makeSupportedModel,
        makeMinMaxModel: makeMinMaxModel,
        directTransformTemplate: directTransformTemplate,
        normalize: normalize,
        instanceObjectToArray: instanceObjectToArray,
        arrayToInstanceObject: arrayToInstanceObject,
      };
    })();
  },
  function(module, exports, __webpack_require__) {
    'use strict';

    function time(sec, keys) {
      var result = {},
        struct = _.filter(
          [
            {
              name: 'year',
              x: 31536e3,
            },
            {
              name: 'month',
              x: 2592e3,
            },
            {
              name: 'week',
              x: 604800,
            },
            {
              name: 'day',
              x: 86400,
            },
            {
              name: 'hour',
              x: 3600,
            },
            {
              name: 'minute',
              x: 60,
            },
            {
              name: 'second',
              x: 1,
            },
          ],
          function(obj) {
            return keys.indexOf(obj.name) >= 0;
          }
        );
      return (
        struct.forEach(function(type) {
          (result[type.name] = Math.floor(sec / type.x)),
            (sec -= result[type.name] * type.x);
        }),
        result
      );
    }
    var _ = __webpack_require__(3),
      format = {
        time: time,
      };
    module.exports = format;
  },
  function(module, exports, __webpack_require__) {
    'use strict';

    function validStaticIP_2KOM_21748(ip, mask) {
      var result = _.find(allowedStaticIP_2KOM_21748, function(elem) {
        return validCustomIP(ip, elem.mask, elem.ip);
      });
      return result ? !0 : !1;
    }

    function validSubnetMask_2KOM_21748(ip, mask) {
      var result = _.find(allowedStaticIP_2KOM_21748, function(elem) {
        return validCustomIP(ip, elem.mask, elem.ip) && mask == elem.mask;
      });
      return result ? !0 : !1;
    }

    function validDNS_2KOM_21748(dns) {
      return dns
        ? -1 != _.indexOf(allowedDns1_2KOM_21748, dns) ||
          -1 != _.indexOf(allowedDns2_2KOM_21748, dns)
          ? !0
          : !1
        : !0;
    }

    function validAllDNS_2KOM_21748(dnsPrim, dnsSec) {
      return dnsPrim || dnsSec
        ? (-1 != _.indexOf(allowedDns1_2KOM_21748, dnsPrim) &&
            -1 != _.indexOf(allowedDns1_2KOM_21748, dnsSec)) ||
          (-1 != _.indexOf(allowedDns2_2KOM_21748, dnsPrim) &&
            -1 != _.indexOf(allowedDns2_2KOM_21748, dnsSec))
          ? !0
          : !1
        : !0;
    }

    function validCustomIP(ip, mask, net) {
      for (
        var arrip = ip.split('.'),
          arrnet = net.split('.'),
          arrmask = mask.split('.'),
          res = !0,
          i = 0;
        i < arrip.length;
        i++
      )
        (arrip[i] & arrmask[i]) != arrnet[i] && (res = !1);
      return res;
    }
    var _ = __webpack_require__(3),
      customValidation = {
        validCustomIP: validCustomIP,
        validDNS_2KOM_21748: validDNS_2KOM_21748,
        validAllDNS_2KOM_21748: validAllDNS_2KOM_21748,
        validStaticIP_2KOM_21748: validStaticIP_2KOM_21748,
        validSubnetMask_2KOM_21748: validSubnetMask_2KOM_21748,
      };
    module.exports = customValidation;
    var allowedStaticIP_2KOM_21748 = [
        {
          ip: '195.98.160.0',
          mask: '255.255.224.0',
        },
        {
          ip: '94.127.168.0',
          mask: '255.255.248.0',
        },
        {
          ip: '185.151.120.0',
          mask: '255.255.252.0',
        },
        {
          ip: '10.120.0.0',
          mask: '255.248.0.0',
        },
        {
          ip: '10.251.0.0',
          mask: '255.255.0.0',
        },
        {
          ip: '10.112.0.0',
          mask: '255.240.0.0',
        },
        {
          ip: '81.25.48.0',
          mask: '255.255.240.0',
        },
        {
          ip: '91.198.104.0',
          mask: '255.255.248.0',
        },
        {
          ip: '91.188.176.0',
          mask: '255.255.240.0',
        },
        {
          ip: '46.188.0.0',
          mask: '255.255.128.0',
        },
        {
          ip: '188.244.32.0',
          mask: '255.255.240.0',
        },
        {
          ip: '86.110.0.0',
          mask: '255.255.224.0',
        },
        {
          ip: '217.170.208.0',
          mask: '255.255.240.0',
        },
        {
          ip: '78.24.24.0',
          mask: '255.255.248.0',
        },
        {
          ip: '188.65.8.0',
          mask: '255.255.248.0',
        },
        {
          ip: '213.167.32.0',
          mask: '255.255.224.0',
        },
        {
          ip: '212.34.32.0',
          mask: '255.255.224.0',
        },
      ],
      allowedDns1_2KOM_21748 = ['212.34.33.1', '212.34.32.39'],
      allowedDns2_2KOM_21748 = ['195.98.160.26', '80.253.27.101'];
  },
  ,
  ,
  ,
  function(module, exports, __webpack_require__) {
    'use strict';
    'use version 6';

    function isTunnel(raw) {
      return 4 == raw.Layer;
    }

    function isService(raw) {
      return 3 == raw.Layer;
    }

    function isPPP(raw) {
      if (isTunnel(raw)) {
        var L4 = raw.L4;
        return 'l2tp' == L4.type || 'pptp' == L4.type;
      }
      if (isService(raw)) {
        var L3 = raw.L3;
        return 'ppp' == L3.type || 'pppdual' == L3.type || 'pppv6' == L3.type;
      }
      return !1;
    }

    function isXoE(raw) {
      switch (raw.MediaType) {
        case 'Ethernet':
        case 'WiFi':
        case 'DSL.PTM':
        case 'Bridging':
          return !0;
        case 'DSL.ATM':
          return 'EoA' == raw.Media.DSL.ATM.LinkType;
      }
      return !1;
    }

    function isPPPoA(raw) {
      return (
        'DSL.ATM' == raw.MediaType && 'PPPoA' == raw.Media.DSL.ATM.LinkType
      );
    }

    function isXv6(raw) {
      if (raw.Params)
        switch (raw.Params.type) {
          case 'ipv6':
          case 'pppv6':
          case 'pppdual':
            return !0;
        }
      return !1;
    }

    function isPPPoA(raw) {
      return (
        'DSL.ATM' == raw.MediaType && 'PPPoA' == raw.Media.DSL.ATM.LinkType
      );
    }

    function is3G(raw) {
      if ('Dongle' == raw.MediaType) {
        var dongle = raw.Media.Dongle;
        return '3G' == dongle.Type || 'USB' == dongle.Type;
      }
      return !1;
    }

    function isIPv4(raw) {
      return raw.Params && 'ip' == raw.Params.type;
    }

    function connTriger(params) {
      return params.ondemand ? 'OnDemand' : params.auto ? 'AlwaysOn' : 'Manual';
    }

    function authProto(params) {
      var auth = params.auth || '0';
      switch (auth) {
        case '0':
          return 'AUTO';
        case '1':
          return 'PAP';
        case '2':
          return 'CHAP';
        case '3':
          return 'MS-CHAP';
        case '4':
          return 'MS-CHAP-V2';
      }
    }

    function encrProto(params) {
      var encrypt = params.encrypt || '0';
      switch (encrypt) {
        case '0':
          return 'None';
        case '1':
          return 'MPPE';
        case '2':
          return 'MPPE40';
        case '3':
          return 'MPPE128';
      }
    }

    function origin(params) {
      return params.ipv6_auto
        ? 'AutoConfigured'
        : params.ipv6_by_dhcpv6
          ? 'AutoConfiguredByDHCPv6'
          : params.ipv6_by_slaac
            ? 'AutoConfiguredBySlaac'
            : params.ipv6_by_dhcpv6_pd
              ? 'AutoConfiguredByDHCPv6PD'
              : 'Static';
    }

    function mediaType(L2) {
      switch (L2.type) {
        case 'ethernet':
          return /WiFiClient/.test(L2.port)
            ? 'WiFi'
            : 'PTM' == L2.port
              ? 'DSL.PTM'
              : 'Ethernet';
        case 'atm':
          return 'DSL.ATM';
        case 'ptm':
          return 'DSL.PTM';
        case '3g':
        case 'lte':
        case 'usb':
          return 'Dongle';
        case 'bridge':
          return 'Bridging';
      }
      return 'Unknown';
    }

    function linkType(L2) {
      switch (L2.link_type) {
        case 'MDMVS_EOA':
          return 'EoA';
        case 'MDMVS_IPOA':
          return 'IPoA';
        case 'MDMVS_PPPOA':
          return 'PPPoA';
      }
      return 'Unknown';
    }

    function qosClass(pvc) {
      switch (pvc.qos) {
        case 'ubr':
          return 'UBR';
        case 'ubr_pcr':
          return 'UBR+';
        case 'cbr':
          return 'CBR';
        case 'nrtvbr':
          return 'VBR-nrt';
        case 'rtvbr':
          return 'VBR-rt';
      }
      return 'Unknown';
    }

    function dongleMode(L2) {
      var mode = L2.mode || '0';
      switch (mode.toString()) {
        case '32':
        case '0':
        case '0x000':
          return 'Auto';
        case '4':
          return '4G';
        case '3':
        case '0x002':
          return '3G';
        case '2':
        case '0x001':
          return '2G';
        case '0x008':
          return 'Auto 2G->3G';
        case '0x010':
          return 'Auto 3G->2G';
        case '0x020':
          return 'Auto 2G->3G->LTE';
        case '0x080':
          return 'Auto 3G->LTE';
        case '0x100':
          return 'Auto LTE->3G';
      }
      return 'Auto';
    }

    function dongleActualType(L2) {
      return L2.type.toUpperCase();
    }

    function eap($8021x) {
      switch ($8021x.eap_method) {
        case 0:
          return 'EAP-MD5';
        case 1:
          return 'EAP-TTLS/CHAP';
        case 2:
          return 'EAP-TTLS/MS-CHAP';
        case 3:
          return 'EAP-TTLS/MS-CHAPv2';
      }
      return 'EAP-MD5';
    }

    function isIPoA(ipv4) {
      return (
        'DSL.ATM' == ipv4.MediaType && 'IPoA' == ipv4.Media.DSL.ATM.LinkType
      );
    }

    function isLTE(ipv4) {
      return 'Dongle' == ipv4.MediaType && 'LTE' == ipv4.Media.Dongle.Type;
    }

    function rejectLANs(iface_names) {
      var obj = {};
      for (var key in iface_names)
        iface_names[key].is_wan && (obj[key] = iface_names[key]);
      return obj;
    }

    function identifyDefaultGateway(wan, version) {
      function isDefaultGateway(conn, version) {
        return 'v4' == version
          ? 1 == conn.DefaultGateway
          : 'v6' == version
            ? 1 == conn.DefaultGatewayv6
            : !1;
      }
      var path = '',
        conns = _.pick(
          wan,
          'IPoA',
          'PPPoE',
          'PPPoEv6',
          'PPPoEDual',
          'PPPoA',
          'PPTP',
          '3G',
          'IPv4oE',
          'LTE',
          'IPv6oE'
        ),
        connsKeys = _.keys(conns).sort(function(a) {
          return 'PPTP' != a;
        });
      return (
        _.some(connsKeys, function(type) {
          var obj = conns[type];
          return obj.Connection
            ? _.some(obj.Connection, function(conn, instance) {
                return isDefaultGateway(conn, version)
                  ? ((path =
                      'Device.WAN.' + type + '.Connection.' + instance + '.'),
                    !0)
                  : !1;
              })
            : !1;
        }),
        path
      );
    }

    function identifyAutomaticalPPTP(wan) {
      return _.some(wan.$Raw, function(r) {
        return r.IsAutoTunnel;
      });
    }

    function getUseMultiPVC(media) {
      return (
        'VlanDefMode' == media.connection_mode ||
        'VlanDefMode' == media.connection_mode
      );
    }
    var T = __webpack_require__(84).T,
      _ = __webpack_require__(3);
    module.exports = T({
      '->': [
        '$Raw',
        '$PPP',
        '$IPv4',
        'IPoA',
        'PPPoE',
        'PPPoEv6',
        'PPPoEDual',
        'PPPoA',
        'PPTP',
        '3G',
        'IPv4oE',
        'LTE',
        'IPv6oE',
        'Media',
        'IPv4DefaultGateway',
        'IPv6DefaultGateway',
        'UseAutomaticalPPTP',
      ],
      $Raw: {
        '->': ['L2', '?', 'MediaType', 'Media', 'Flags', 'VLAN', 'IPv6'],
        iface_names: ':external',
        '?': [
          'L2',
          function(o) {
            return !!o && !!_.size(o);
          },
        ],
        '{L2,L2Key}': [
          'iface_names**',
          function(o) {
            return rejectLANs(o);
          },
        ],
        '{L3,L3Key}': [
          'L2**',
          function(o) {
            return o.services;
          },
        ],
        '{L4,L4Key}': [
          'L3*',
          function(o) {
            return o.tunnels;
          },
        ],
        '{Params, Layer}': [
          'L3*',
          'L4',
          function(L3, L4) {
            return L4
              ? {
                  3: L3,
                  4: L4,
                }
              : {
                  3: L3,
                };
          },
        ],
        IsTunnel: [
          'Layer*',
          function(o) {
            return 4 == o || void 0;
          },
        ],
        IsService: [
          'Layer*',
          function(o) {
            return 3 == o || void 0;
          },
        ],
        IsAutoTunnel: [
          'L2*',
          function(l) {
            return 'auto' == l.type;
          },
        ],
        IPv6: {
          '->': ['IsStatic', 'StaticIP'],
          '?': [
            '$parent',
            function(o) {
              return !!o.Params && isXv6(o);
            },
          ],
          Params: [
            '$parent',
            '?',
            function(o) {
              return o.Params;
            },
          ],
          IsStatic: [
            'Origin',
            function(o) {
              return 'Static' == o || void 0;
            },
          ],
          IsDynamic: [
            'Origin',
            function(o) {
              return 'Static' != o || void 0;
            },
          ],
          Origin: [
            'Params',
            function(o) {
              return origin(o);
            },
          ],
          GatewayIPAddressBySlaac: [
            'Params',
            function(o) {
              return o.slaac;
            },
          ],
          GatewayIPAddress: [
            'Params',
            function(o) {
              return o.gwipv6;
            },
          ],
          DNSAutomatical: [
            'Params',
            'IsDynamic*',
            function(o) {
              return o.dns_from_dhcpv6;
            },
          ],
          DNSServer1: [
            'Params',
            function(o) {
              return o.dns_primv6;
            },
          ],
          DNSServer2: [
            'Params',
            function(o) {
              return o.dns_secv6;
            },
          ],
          DefaultGatewayv6: [
            'Params',
            function(o) {
              return o.gwifv6;
            },
          ],
          StaticIPNumberOfEntries: [
            'StaticIP',
            function(o) {
              return _.size(o);
            },
          ],
          StaticIP: {
            '->': !0,
            $IsStatic: [
              '$parent',
              function(o) {
                return o.IsStatic;
              },
            ],
            ':': [
              '$IsStatic*',
              function() {
                return 1;
              },
            ],
            $IPv6: [
              '$parent',
              '$IsStatic*',
              function(o) {
                return o.Params.ipv6;
              },
            ],
            Address: [
              '$IPv6*',
              function(o) {
                return o.split('/')[0];
              },
            ],
            Prefix: [
              '$IPv6*',
              function(o) {
                return o.split('/')[1];
              },
            ],
          },
          StaticIPAddress0: [
            'StaticIPNumberOfEntries',
            'StaticIP',
            'IsStatic*',
            function(n, o) {
              return n > 0 ? o[1].Address : '';
            },
          ],
          StaticIPPrefix0: [
            'StaticIPNumberOfEntries',
            'StaticIP',
            'IsStatic*',
            function(n, o) {
              return n > 0 ? o[1].Prefix : '';
            },
          ],
        },
        Flags: {
          '->': !0,
          '?': [
            '$parent',
            function(o) {
              return !!o.Params;
            },
          ],
          $Params: [
            '$parent',
            '?',
            function(o) {
              return o.Params;
            },
          ],
          RIP: [
            '$Params',
            function(o) {
              return o.rip;
            },
          ],
          IGMP: [
            '$Params',
            function(o) {
              return o.igmp;
            },
          ],
          NAT: [
            '$Params',
            function(o) {
              return o.nat;
            },
          ],
          Firewall: [
            '$Params',
            function(o) {
              return o.firewall;
            },
          ],
          Ping: [
            '$Params',
            function(o) {
              return o.ping_respond;
            },
          ],
          RTSP: [
            '$Params',
            function(o) {
              return o.rtsp;
            },
          ],
          AltRoutingTable: [
            '$Params',
            function(o) {
              return o.table_alt;
            },
          ],
          MLD: [
            '$Params',
            function(o) {
              return o.mld;
            },
          ],
        },
        MediaType: [
          'L2**',
          'IsTunnel',
          function(l, t) {
            return t ? void 0 : mediaType(l);
          },
        ],
        Media: {
          '->': ['?', 'Ethernet', 'WiFi', 'DSL', 'Bridging', 'Dongle'],
          '?': [
            '$parent',
            function(o) {
              return o.L2 && !o.IsTunnel;
            },
          ],
          Ethernet: {
            '->': !0,
            '?': [
              '$parent',
              function(o) {
                return 'Ethernet' == o.$parent.MediaType;
              },
            ],
            $L2: [
              '$parent',
              '?',
              function(o) {
                return o.$parent.L2;
              },
            ],
            __Key: [
              '$parent',
              '?',
              function(o) {
                return o.$parent.L2Key;
              },
            ],
            __VlanName: [
              '$L2',
              '?',
              function(o) {
                return o.__vlan_name;
              },
            ],
            Enable: [
              '$L2',
              function(o) {
                return o.enable;
              },
            ],
            Name: [
              '$L2',
              function(o) {
                return o.port;
              },
            ],
            MACAddress: [
              '$L2',
              function(o) {
                return o.mac;
              },
            ],
            MACAddressDefault: [
              '$L2',
              function(o) {
                return o.default_mac;
              },
            ],
            MaxMRUSize: [
              '$L2',
              function(o) {
                return o.mtu;
              },
            ],
          },
          WiFi: {
            '->': !0,
            '?': [
              '$parent',
              function(o) {
                return 'WiFi' == o.$parent.MediaType;
              },
            ],
            $L2: [
              '$parent',
              '?',
              function(o) {
                return o.$parent.L2;
              },
            ],
            __Key: [
              '$parent',
              '?',
              function(o) {
                return o.$parent.L2Key;
              },
            ],
            __VlanName: [
              '$L2',
              '?',
              function(o) {
                return o.__vlan_name;
              },
            ],
            Enable: [
              '$L2',
              function(o) {
                return o.enable;
              },
            ],
            Name: [
              '$L2',
              function(o) {
                return o.port;
              },
            ],
            MACAddress: [
              '$L2',
              function(o) {
                return o.mac;
              },
            ],
            MACAddressDefault: [
              '$L2',
              function(o) {
                return o.default_mac;
              },
            ],
            MaxMRUSize: [
              '$L2',
              function(o) {
                return o.mtu;
              },
            ],
          },
          DSL: {
            '->': !0,
            '?': [
              '$parent',
              function(o) {
                return o.$parent.MediaType.match(/^DSL\.\w*$/);
              },
            ],
            ATM: {
              '->': !0,
              $MediaType: [
                '$parent',
                function(o) {
                  return o.$parent.$parent.MediaType;
                },
              ],
              '?': [
                '$MediaType',
                function(o) {
                  return 'DSL.ATM' == o;
                },
              ],
              $L2: [
                '$parent',
                '?',
                function(o) {
                  return o.$parent.$parent.L2;
                },
              ],
              $PVC: [
                '$L2',
                function(o) {
                  return o.pvc_settings;
                },
              ],
              __Key: [
                '$parent',
                '?',
                function(o) {
                  return o.$parent.$parent.L2Key;
                },
              ],
              __VlanName: [
                '$L2',
                '?',
                function(o) {
                  return o.__vlan_name;
                },
              ],
              Enable: [
                '$L2',
                function(o) {
                  return o.enable;
                },
              ],
              Name: [
                '$L2',
                function(o) {
                  return o.iface;
                },
              ],
              DestinationAddress: [
                '$PVC**',
                function(o) {
                  return o.vpi + '/' + o.vci;
                },
              ],
              LinkType: [
                '$L2',
                function(o) {
                  return linkType(o);
                },
              ],
              Encapsulation: [
                '$PVC**',
                function(o) {
                  return o.encap.toUpperCase();
                },
              ],
              ConnectionMode: [
                '$L2',
                function(o) {
                  return o.connection_mode;
                },
              ],
              QoSClass: [
                '$PVC**',
                function(o) {
                  return qosClass(o);
                },
              ],
              PeakCellRate: [
                '$PVC**',
                'QoSClass',
                function(pvc, qos) {
                  return 'UBR' != qos ? pvc.pcr : void 0;
                },
              ],
              MaximumBurstSize: [
                '$PVC**',
                'QoSClass',
                function(pvc, qos) {
                  return 'VBR-nrt' == qos || 'VBR-rt' == qos ? pvc.mbs : void 0;
                },
              ],
              SustainableCellRate: [
                '$PVC**',
                'QoSClass',
                function(pvc, qos) {
                  return 'VBR-nrt' == qos || 'VBR-rt' == qos ? pvc.scr : void 0;
                },
              ],
              UseMultiPVC: [
                '$L2',
                function(o) {
                  return getUseMultiPVC(o);
                },
              ],
            },
            PTM: {
              '->': !0,
              $MediaType: [
                '$parent',
                function(o) {
                  return o.$parent.$parent.MediaType;
                },
              ],
              '?': [
                '$MediaType',
                function(o) {
                  return 'DSL.PTM' == o;
                },
              ],
              $L2: [
                '$parent',
                '?',
                function(o) {
                  return o.$parent.$parent.L2;
                },
              ],
              __Key: [
                '$parent',
                '?',
                function(o) {
                  return o.$parent.$parent.L2Key;
                },
              ],
              __VlanName: [
                '$L2',
                '?',
                function(o) {
                  return o.__vlan_name;
                },
              ],
              __ActualType: [
                '$L2',
                '?',
                function(o) {
                  return o.type;
                },
              ],
              Enable: [
                '$L2',
                function(o) {
                  return o.enable;
                },
              ],
              Name: [
                '$L2',
                function(o) {
                  return o.port;
                },
              ],
              MACAddress: [
                '$L2',
                function(o) {
                  return o.mac;
                },
              ],
              MACAddressDefault: [
                '$L2',
                function(o) {
                  return o.default_mac;
                },
              ],
              LinkType: [
                '$L2',
                function(o) {
                  return linkType(o);
                },
              ],
              ConnectionMode: [
                '$L2',
                function(o) {
                  return o.connection_mode;
                },
              ],
              UseMultiPVC: [
                '$L2',
                function(o) {
                  return getUseMultiPVC(o);
                },
              ],
            },
          },
          Bridging: {
            '->': !0,
            '?': [
              '$parent',
              function(o) {
                return 'Bridging' == o.$parent.MediaType;
              },
            ],
            $L2: [
              '$parent',
              '?',
              function(o) {
                return o.$parent.L2;
              },
            ],
            __Key: [
              '$parent',
              '?',
              function(o) {
                return o.$parent.L2Key;
              },
            ],
            __VlanName: [
              '$L2',
              '?',
              function(o) {
                return o.__vlan_name;
              },
            ],
            Enable: [
              '$L2',
              function(o) {
                return o.enable;
              },
            ],
            Name: [
              '$L2',
              function(o) {
                return o.port;
              },
            ],
            MACAddress: [
              '$L2',
              function(o) {
                return o.mac;
              },
            ],
            MACAddressDefault: [
              '$L2',
              function(o) {
                return o.default_mac;
              },
            ],
          },
          Dongle: {
            '->': !0,
            '?': [
              '$parent',
              function(o) {
                return 'Dongle' == o.$parent.MediaType;
              },
            ],
            $L2: [
              '$parent',
              '?',
              function(o) {
                return o.$parent.L2;
              },
            ],
            __Key: [
              '$parent',
              '?',
              function(o) {
                return o.$parent.L2Key;
              },
            ],
            __VlanName: [
              '$L2',
              '?',
              function(o) {
                return o.__vlan_name;
              },
            ],
            Enable: [
              '$L2',
              function(o) {
                return o.enable;
              },
            ],
            Name: [
              '$L2',
              function(o) {
                return o.port;
              },
            ],
            MACAddress: [
              '$L2',
              function(o) {
                return o.mac;
              },
            ],
            MACAddressDefault: [
              '$L2',
              function(o) {
                return o.default_mac;
              },
            ],
            Type: [
              '$L2',
              function(o) {
                return dongleActualType(o);
              },
            ],
            DongleType: [
              '$L2',
              function(o) {
                return o.dongle_type;
              },
            ],
            Mode: [
              '$L2',
              function(o) {
                return dongleMode(o);
              },
            ],
          },
        },
        VLAN: {
          '->': !0,
          '?': [
            '$parent',
            function(o) {
              return !!o.Params && !!o.Params.vlan;
            },
          ],
          $vlan: [
            '$parent',
            '?',
            function(o) {
              return o.Params.vlan;
            },
          ],
          Enable: [
            '$vlan',
            function(v) {
              return _.has(v, 'vlanid') && v.vlanid >= 0;
            },
          ],
          ID: [
            '$vlan',
            function(v) {
              return v.vlanid;
            },
          ],
          Priority: [
            '$vlan',
            function(v) {
              return v.vlanpr;
            },
          ],
        },
      },
      $PPP: {
        '->': ['?', 'StaticIPAddress0', 'StaticIP'],
        '{$Raw}': [
          '$root',
          function(o) {
            return _.filter(o.$Raw, function(e) {
              return isPPP(e);
            });
          },
        ],
        '?': [
          '$Raw',
          function(o) {
            return !!o;
          },
        ],
        $Params: [
          '$Raw',
          '?',
          function(o) {
            return o.Params;
          },
        ],
        $IsTunnel: [
          '$Raw',
          '?',
          function(o) {
            return isTunnel(o) || void 0;
          },
        ],
        $IsService: [
          '$Raw',
          '?',
          function(o) {
            return !isTunnel(o) || void 0;
          },
        ],
        $IsAutoTunnel: [
          '$Raw',
          '?',
          function(o) {
            return o.IsAutoTunnel;
          },
        ],
        $IsXoE: [
          '$Raw',
          '?',
          function(o) {
            return isXoE(o) || void 0;
          },
        ],
        $IsPPPoX: [
          '$Raw',
          '?',
          function(o) {
            return isPPPoA(o) || isXoE(o) || void 0;
          },
        ],
        $Is3G: [
          '$Raw',
          '?',
          function(o) {
            return is3G(o) || void 0;
          },
        ],
        $IPv6: [
          '$Raw',
          '?',
          function(o) {
            return o.IPv6;
          },
        ],
        __Layer: [
          '$Raw',
          '?',
          function(o) {
            return o.Layer;
          },
        ],
        __LowerLayer: [
          '$Raw',
          '?',
          function(o) {
            return o.L4Key ? o.L3Key : o.L2Key;
          },
        ],
        __Key: [
          '$Raw',
          '?',
          function(o) {
            return o.L4Key ? o.L4Key : o.L3Key;
          },
        ],
        __OriginInterface: [
          '$Params',
          function(o) {
            return o.iface;
          },
        ],
        Enable: [
          '$Params',
          function(o) {
            return o.enable;
          },
        ],
        Status: [
          '$Params',
          function(o) {
            return o.connection_status;
          },
        ],
        PPPState: [
          '$Params',
          function(o) {
            return o.ppp_state;
          },
        ],
        PPPDebug: [
          '$Params',
          function(o) {
            return o.ppp_debug;
          },
        ],
        Name: [
          '$Params',
          function(o) {
            return o.name;
          },
        ],
        Username: [
          '$Params',
          function(o) {
            return o.username;
          },
        ],
        Password: [
          '$Params',
          function(o) {
            return o.password;
          },
        ],
        WithoutAuth: [
          'Username',
          'Password',
          function(u, p) {
            return !p;
          },
        ],
        ServiceName: [
          '$Params',
          function(o) {
            return o.servicename;
          },
        ],
        AutomaticalConnection: [
          '$IsAutoTunnel',
          function(o) {
            return o || void 0;
          },
        ],
        APN: [
          '$Params',
          '$Is3G*',
          function(o) {
            return o.apn;
          },
        ],
        DialNumber: [
          '$Params',
          '$Is3G*',
          function(o) {
            return o.dial_num;
          },
        ],
        MaxMRUSize: [
          '$Params',
          function(o) {
            return o.mtu;
          },
        ],
        DefaultGateway: [
          '$Params',
          function(o) {
            return o.gwif;
          },
        ],
        KeepAlive: [
          '$Params',
          function(o) {
            return !(!o.keep_alive || _.isEmpty(o.keep_alive));
          },
        ],
        LCPEcho: [
          '$Params',
          'KeepAlive',
          function(o, ka) {
            return ka ? o.keep_alive.interval : void 0;
          },
        ],
        LCPEchoRetry: [
          '$Params',
          'KeepAlive',
          function(o, ka) {
            return ka ? o.keep_alive.fails : void 0;
          },
        ],
        IdleDisconnectTime: [
          '$Params',
          function(o) {
            return o.ondemand;
          },
        ],
        PPPMPPC: [
          '$Params',
          function(o) {
            return _.isUndefined(o.ppp_mppc) ? !0 : o.ppp_mppc;
          },
        ],
        Flags: [
          '$Raw',
          '?',
          function(o) {
            return o.Flags;
          },
        ],
        VLAN: [
          '$Raw',
          '?',
          function(o) {
            return o.VLAN;
          },
        ],
        ActualType: [
          '$Params',
          '$IsTunnel*',
          function(o) {
            return o.type.toUpperCase();
          },
        ],
        ConnectionTrigger: [
          '$Params',
          function(o) {
            return connTriger(o);
          },
        ],
        AuthenticationProtocol: [
          '$Params',
          function(o) {
            return authProto(o);
          },
        ],
        EncryptionProtocol: [
          '$Params',
          '$IsTunnel*',
          function(o) {
            return encrProto(o);
          },
        ],
        IPExtension: [
          '$Params',
          '$IsPPPoX*',
          function(o) {
            return o.ppp_ip_ext;
          },
        ],
        ExtraOptions: [
          '$Params',
          '$Raw',
          function(p, r) {
            return is3G(r) || isTunnel(r) ? p.extra_options : void 0;
          },
        ],
        StaticIPNumberOfEntries: [
          'StaticIP',
          function(o) {
            return _.size(o);
          },
        ],
        StaticIP: {
          '->': !0,
          '?': [
            '$parent',
            function(o) {
              return !!o.StaticIPAddress0;
            },
          ],
          ':': 1,
          Address: [
            '$parent',
            '?',
            function(o) {
              return o.StaticIPAddress0;
            },
          ],
        },
        StaticIPAddress0: [
          '$Params',
          function(o) {
            return o.static_ip || '';
          },
        ],
        IPAddress: [
          '$Params',
          function(o) {
            return o.ip;
          },
        ],
        IPv6Address: [
          '$Params',
          function(o) {
            return o.ipv6 && o.ipv6.split('/')[0];
          },
        ],
        Prefix: [
          '$Params',
          function(o) {
            return o.ipv6 && o.ipv6.split('/')[1];
          },
        ],
        SubnetMask: [
          '$Params',
          function(o) {
            return o.mask;
          },
        ],
        DNSServer1: [
          '$Params',
          function(o) {
            return o.dns_prim;
          },
        ],
        DNSServer2: [
          '$Params',
          function(o) {
            return o.dns_sec;
          },
        ],
        Origin: [
          '$IPv6*',
          function(o) {
            return o.Origin;
          },
        ],
        StaticIPv6NumberOfEntries: [
          '$IPv6*',
          function(o) {
            return o.StaticIPNumberOfEntries;
          },
        ],
        StaticIPv6: [
          '$IPv6*',
          function(o) {
            return o.StaticIP;
          },
        ],
        StaticIPv6Address0: [
          '$IPv6*',
          function(o) {
            return o.StaticIPAddress0;
          },
        ],
        StaticIPv6Prefix0: [
          '$IPv6*',
          function(o) {
            return o.StaticIPPrefix0;
          },
        ],
        GatewayIPv6Address: [
          '$IPv6*',
          function(o) {
            return o.GatewayIPAddress;
          },
        ],
        GatewayIPv6AddressBySlaac: [
          '$IPv6*',
          function(o) {
            return o.GatewayIPAddressBySlaac;
          },
        ],
        DNSIPv6Automatical: [
          '$IPv6*',
          function(o) {
            return o.DNSAutomatical;
          },
        ],
        DNSIPv6Server1: [
          '$IPv6*',
          function(o) {
            return o.DNSServer1;
          },
        ],
        DNSIPv6Server2: [
          '$IPv6*',
          function(o) {
            return o.DNSServer2;
          },
        ],
        DefaultGatewayv6: [
          '$IPv6*',
          function(o) {
            return o.DefaultGatewayv6;
          },
        ],
        MediaType: [
          '$Raw',
          '$IsService*',
          '?',
          function(o) {
            return o.MediaType;
          },
        ],
        Media: [
          '$Raw',
          '$IsService*',
          '?',
          function(o) {
            return o.Media;
          },
        ],
      },
      $IPv4: {
        '->': [
          '$Params',
          'StaticIP',
          'Authorization8021x',
          'Kabinet',
          'HealthCheck',
        ],
        '{$Raw}': [
          '$root',
          function(o) {
            return _.filter(o.$Raw, function(e) {
              return isIPv4(e);
            });
          },
        ],
        '?': [
          '$Raw',
          function(o) {
            return !!o;
          },
        ],
        $Params: [
          '$Raw',
          '?',
          function(o) {
            return o.L3;
          },
        ],
        $IsLTE: [
          '$Raw',
          '?',
          function(o) {
            return isLTE(o) || void 0;
          },
        ],
        $IsStatic: [
          '$Params',
          function(o) {
            return !o.dhcp || void 0;
          },
        ],
        __Layer: [
          '$Raw',
          '?',
          function(o) {
            return o.Layer;
          },
        ],
        __LowerLayer: [
          '$Raw',
          '?',
          function(o) {
            return o.L2Key;
          },
        ],
        __Key: [
          '$Raw',
          '?',
          function(o) {
            return o.L3Key;
          },
        ],
        __OriginInterface: [
          '$Params',
          function(o) {
            return o.iface;
          },
        ],
        Enable: [
          '$Params',
          function(o) {
            return o.enable;
          },
        ],
        Name: [
          '$Params',
          function(o) {
            return o.name;
          },
        ],
        Status: [
          '$Params',
          function(o) {
            return o.connection_status;
          },
        ],
        AddressingType: [
          '$Params',
          function(o) {
            return o.dhcp ? 'DHCP' : 'Static';
          },
        ],
        StaticIPNumberOfEntries: [
          'StaticIP',
          function(o) {
            return _.size(o);
          },
        ],
        StaticIP: {
          '->': !0,
          ':': 1,
          $Params: [
            '$parent',
            function(o) {
              return o.$Params;
            },
          ],
          Address: [
            '$Params',
            function(o) {
              return o.ip || '';
            },
          ],
          SubnetMask: [
            '$Params',
            function(o) {
              return o.mask || '';
            },
          ],
        },
        StaticIPAddress0: [
          'StaticIPNumberOfEntries',
          'StaticIP',
          function(n, o) {
            return n > 0 ? o[1].Address : '';
          },
        ],
        StaticIPSubnetMask0: [
          'StaticIPNumberOfEntries',
          'StaticIP',
          function(n, o) {
            return n > 0 ? o[1].SubnetMask : '';
          },
        ],
        Authorization8021x: {
          '->': !0,
          '?': [
            '$parent',
            function(o) {
              return !!o.$Params['8021x'];
            },
          ],
          $8021x: [
            '$parent',
            '?',
            function(o) {
              return o.$Params['8021x'];
            },
          ],
          Enable: [
            '$8021x',
            function(o) {
              return o.enable;
            },
          ],
          EAPMethod: [
            '$8021x',
            function(o) {
              return eap(o);
            },
          ],
          Username: [
            '$8021x',
            function(o) {
              return o.login;
            },
          ],
          Password: [
            '$8021x',
            function(o) {
              return o.passwd;
            },
          ],
        },
        Kabinet: {
          '->': !0,
          '?': [
            '$parent',
            function(o) {
              return !!o.$Params.kabinet;
            },
          ],
          Enable: [
            '$parent',
            '?',
            function(o) {
              return o.$Params.kabinet.enable;
            },
          ],
          Password: [
            '$parent',
            '?',
            function(o) {
              return o.$Params.kabinet.pass;
            },
          ],
        },
        HealthCheck: {
          '->': !0,
          '?': [
            '$parent',
            function(o) {
              return !!o.$Params && !!o.$Params.health_check;
            },
          ],
          $hc: [
            '$parent',
            '?',
            function(o) {
              return o.$Params.health_check;
            },
          ],
          Enable: [
            '$hc',
            function(hc) {
              return hc.enable || !1;
            },
          ],
          PingAddress: [
            '$hc',
            function(hc) {
              return hc.ping_address || '8.8.8.8';
            },
          ],
          MaxPing: [
            '$hc',
            function(hc) {
              return hc.max_ping || 10;
            },
          ],
        },
        GatewayIPAddress: [
          '$Params',
          function(o) {
            return o.gwip;
          },
        ],
        DNSAutomatical: [
          '$Params',
          function(o) {
            return o.dhcp ? o.dns_from_dhcp : void 0;
          },
        ],
        DNSServer1: [
          '$Params',
          function(o) {
            return o.dns_prim;
          },
        ],
        DNSServer2: [
          '$Params',
          function(o) {
            return o.dns_sec;
          },
        ],
        DefaultGateway: [
          '$Params',
          function(o) {
            return o.gwif;
          },
        ],
        VendorID: [
          '$Params',
          function(o) {
            return o.vendor_id;
          },
        ],
        Hostname: [
          '$Params',
          function(o) {
            return o.hostname;
          },
        ],
        APN: [
          '$Params',
          '$IsLTE*',
          function(o) {
            return o.apn;
          },
        ],
        Login: [
          '$Params',
          '$IsLTE*',
          function(o) {
            return o.login;
          },
        ],
        Password: [
          '$Params',
          '$IsLTE*',
          function(o) {
            return o.password;
          },
        ],
        WithoutAuth: [
          '$Params',
          '$IsLTE*',
          function(o) {
            return o.noauth;
          },
        ],
        AuthenticationProtocol: [
          '$Params',
          '$IsLTE*',
          function(o) {
            return o.noauth || !o.auth ? 'pap' : o.auth;
          },
        ],
        Flags: [
          '$Raw',
          '?',
          function(o) {
            return o.Flags;
          },
        ],
        VLAN: [
          '$Raw',
          '?',
          function(o) {
            return o.VLAN;
          },
        ],
        MediaType: [
          '$Raw',
          '?',
          function(o) {
            return o.MediaType;
          },
        ],
        Media: [
          '$Raw',
          '?',
          function(o) {
            return o.Media;
          },
        ],
      },
      PPPoE: {
        '->': !0,
        ConnectionNumberOfEntries: [
          'Connection',
          function(o) {
            return _.size(o);
          },
        ],
        Connection: {
          '->': !0,
          '{$PPP,$i}': [
            '$root',
            function(o) {
              return _.filter(o.$PPP, function(e) {
                return isXoE(e.$Raw) && 'ppp' == e.$Params.type;
              });
            },
          ],
          ':': [
            '$i*',
            function(i) {
              return i + 1;
            },
          ],
          $return: [
            '$PPP*',
            function(o) {
              return o;
            },
          ],
        },
      },
      PPPoEv6: {
        '->': !0,
        ConnectionNumberOfEntries: [
          'Connection',
          function(o) {
            return _.size(o);
          },
        ],
        Connection: {
          '->': !0,
          '{$PPP,$i}': [
            '$root',
            function(o) {
              return _.filter(o.$PPP, function(e) {
                return isXoE(e.$Raw) && 'pppv6' == e.$Params.type;
              });
            },
          ],
          ':': [
            '$i*',
            function(i) {
              return i + 1;
            },
          ],
          $return: [
            '$PPP*',
            function(o) {
              return o;
            },
          ],
        },
      },
      PPPoEDual: {
        '->': !0,
        ConnectionNumberOfEntries: [
          'Connection',
          function(o) {
            return _.size(o);
          },
        ],
        Connection: {
          '->': !0,
          '{$PPP,$i}': [
            '$root',
            function(o) {
              return _.filter(o.$PPP, function(e) {
                return isXoE(e) && 'pppdual' == e.$Params.type;
              });
            },
          ],
          ':': [
            '$i*',
            function(i) {
              return i + 1;
            },
          ],
          $return: [
            '$PPP*',
            function(o) {
              return o;
            },
          ],
        },
      },
      PPPoA: {
        '->': !0,
        ConnectionNumberOfEntries: [
          'Connection',
          function(o) {
            return _.size(o);
          },
        ],
        Connection: {
          '->': !0,
          '{$PPP,$i}': [
            '$root',
            function(o) {
              return _.filter(o.$PPP, function(e) {
                return isPPPoA(e.$Raw);
              });
            },
          ],
          ':': [
            '$i*',
            function(i) {
              return i + 1;
            },
          ],
          $return: [
            '$PPP*',
            function(o) {
              return o;
            },
          ],
        },
      },
      PPTP: {
        '->': !0,
        ConnectionNumberOfEntries: [
          'Connection',
          function(o) {
            return _.size(o);
          },
        ],
        Connection: {
          '->': !0,
          '{$PPP,$i}': [
            '$root',
            function(o) {
              return _.filter(o.$PPP, function(e) {
                return isTunnel(e.$Raw);
              });
            },
          ],
          ':': [
            '$i*',
            function(i) {
              return i + 1;
            },
          ],
          $return: [
            '$PPP*',
            function(o) {
              return o;
            },
          ],
        },
      },
      '3G': {
        '->': !0,
        ConnectionNumberOfEntries: [
          'Connection',
          function(o) {
            return _.size(o);
          },
        ],
        Connection: {
          '->': !0,
          '{$PPP,$i}': [
            '$root',
            function(o) {
              return _.filter(o.$PPP, function(e) {
                return is3G(e.$Raw);
              });
            },
          ],
          ':': [
            '$i*',
            function(i) {
              return i + 1;
            },
          ],
          $return: [
            '$PPP*',
            function(o) {
              return o;
            },
          ],
        },
      },
      IPv4oE: {
        '->': !0,
        ConnectionNumberOfEntries: [
          'Connection',
          function(o) {
            return _.size(o);
          },
        ],
        Connection: {
          '->': !0,
          '{$IPv4,$i}': [
            '$root',
            function(o) {
              return _.filter(o.$IPv4, function(e) {
                return !isIPoA(e) && !isLTE(e);
              });
            },
          ],
          ':': [
            '$i*',
            function(i) {
              return i + 1;
            },
          ],
          $return: [
            '$IPv4*',
            function(o) {
              return o;
            },
          ],
        },
      },
      LTE: {
        '->': !0,
        ConnectionNumberOfEntries: [
          'Connection',
          function(o) {
            return _.size(o);
          },
        ],
        Connection: {
          '->': !0,
          '{$IPv4,$i}': [
            '$root',
            function(o) {
              return _.filter(o.$IPv4, function(e) {
                return isLTE(e);
              });
            },
          ],
          ':': [
            '$i*',
            function(i) {
              return i + 1;
            },
          ],
          $return: [
            '$IPv4*',
            function(o) {
              return o;
            },
          ],
        },
      },
      IPoA: {
        '->': !0,
        ConnectionNumberOfEntries: [
          'Connection',
          function(o) {
            return _.size(o);
          },
        ],
        Connection: {
          '->': !0,
          '{$IPv4,$i}': [
            '$root',
            function(o) {
              return _.filter(o.$IPv4, function(e) {
                return isIPoA(e);
              });
            },
          ],
          ':': [
            '$i*',
            function(i) {
              return i + 1;
            },
          ],
          $return: [
            '$IPv4*',
            function(o) {
              return o;
            },
          ],
        },
      },
      IPv6oE: {
        '->': !0,
        ConnectionNumberOfEntries: [
          'Connection',
          function(o) {
            return _.size(o);
          },
        ],
        Connection: {
          '->': ['$Params', 'StaticIP'],
          '{$Raw,$i}': [
            '$root',
            function(o) {
              return _.filter(o.$Raw, function(e) {
                return e.Params && 'ipv6' == e.Params.type;
              });
            },
          ],
          ':': [
            '$i*',
            function(i) {
              return i + 1;
            },
          ],
          '?': [
            '$Raw',
            function(o) {
              return !!o;
            },
          ],
          $Params: [
            '$Raw',
            '?',
            function(o) {
              return o.L3;
            },
          ],
          $IPv6: [
            '$Raw',
            '?',
            function(o) {
              return o.IPv6;
            },
          ],
          __Layer: [
            '$Raw',
            '?',
            function(o) {
              return o.Layer;
            },
          ],
          __LowerLayer: [
            '$Raw',
            '?',
            function(o) {
              return o.L2Key;
            },
          ],
          __Key: [
            '$Raw',
            '?',
            function(o) {
              return o.L3Key;
            },
          ],
          __OriginInterface: [
            '$Params',
            function(o) {
              return o.iface;
            },
          ],
          Enable: [
            '$Params',
            function(o) {
              return o.enable;
            },
          ],
          Name: [
            '$Params',
            function(o) {
              return o.name;
            },
          ],
          Status: [
            '$Params',
            function(o) {
              return o.connection_status;
            },
          ],
          Origin: [
            '$IPv6',
            function(o) {
              return o.Origin;
            },
          ],
          IPAddress: [
            '$Params',
            '$IPv6*',
            function(o) {
              return o.ipv6 && o.ipv6.split('/')[0];
            },
          ],
          Prefix: [
            '$Params',
            '$IPv6*',
            function(o) {
              return o.ipv6 && o.ipv6.split('/')[1];
            },
          ],
          StaticIPNumberOfEntries: [
            '$IPv6',
            function(o) {
              return o.StaticIPNumberOfEntries;
            },
          ],
          StaticIP: [
            '$IPv6',
            function(o) {
              return o.StaticIP;
            },
          ],
          StaticIPAddress0: [
            '$IPv6',
            function(o) {
              return o.StaticIPAddress0;
            },
          ],
          StaticIPPrefix0: [
            '$IPv6',
            function(o) {
              return o.StaticIPPrefix0;
            },
          ],
          GatewayIPAddress: [
            '$IPv6',
            function(o) {
              return o.GatewayIPAddress;
            },
          ],
          GatewayIPAddressBySlaac: [
            '$IPv6',
            function(o) {
              return o.GatewayIPAddressBySlaac;
            },
          ],
          DNSAutomatical: [
            '$IPv6',
            function(o) {
              return o.DNSAutomatical;
            },
          ],
          DNSServer1: [
            '$IPv6',
            function(o) {
              return o.DNSServer1;
            },
          ],
          DNSServer2: [
            '$IPv6',
            function(o) {
              return o.DNSServer2;
            },
          ],
          DefaultGatewayv6: [
            '$IPv6',
            function(o) {
              return o.DefaultGatewayv6;
            },
          ],
          Flags: [
            '$Raw',
            '?',
            function(o) {
              return o.Flags;
            },
          ],
          VLAN: [
            '$Raw',
            '?',
            function(o) {
              return o.VLAN;
            },
          ],
          MediaType: [
            '$Raw',
            '?',
            function(o) {
              return o.MediaType;
            },
          ],
          Media: [
            '$Raw',
            '?',
            function(o) {
              return o.Media;
            },
          ],
        },
      },
      Bridge: {
        '->': !0,
        ConnectionNumberOfEntries: [
          'Connection',
          function(o) {
            return _.size(o);
          },
        ],
        Connection: {
          '->': !0,
          '{$Raw,$i}': [
            '$root',
            function(o) {
              return _.filter(o.$Raw, function(e) {
                return e.Params && 'bridge' == e.Params.type;
              });
            },
          ],
          ':': [
            '$i*',
            function(i) {
              return i + 1;
            },
          ],
          '?': [
            '$Raw',
            function(o) {
              return !!o;
            },
          ],
          $Params: [
            '$Raw',
            '?',
            function(o) {
              return o.L3;
            },
          ],
          __Layer: [
            '$Raw',
            '?',
            function(o) {
              return o.Layer;
            },
          ],
          __LowerLayer: [
            '$Raw',
            '?',
            function(o) {
              return o.L2Key;
            },
          ],
          __Key: [
            '$Raw',
            '?',
            function(o) {
              return o.L3Key;
            },
          ],
          __OriginInterface: [
            '$Params',
            function(o) {
              return o.iface;
            },
          ],
          Enable: [
            '$Params',
            function(o) {
              return o.enable;
            },
          ],
          Name: [
            '$Params',
            function(o) {
              return o.name;
            },
          ],
          Status: [
            '$Params',
            function(o) {
              return o.connection_status;
            },
          ],
          VLAN: [
            '$Raw',
            '?',
            function(o) {
              return o.VLAN;
            },
          ],
          MediaType: [
            '$Raw',
            '?',
            function(o) {
              return o.MediaType;
            },
          ],
          Media: [
            '$Raw',
            '?',
            function(o) {
              return o.Media;
            },
          ],
        },
      },
      Media: {
        Ethernet: {
          '->': !0,
          InterfaceNumberOfEntries: [
            'Interface',
            function(o) {
              return _.size(o);
            },
          ],
          Interface: {
            '->': !0,
            '{$Raw,$i}': [
              '$root',
              function(o) {
                return _.uniq(
                  _.filter(o.$Raw, function(e) {
                    return 'Ethernet' == e.MediaType;
                  }),
                  function(e) {
                    return e.Media.Ethernet.__Key;
                  }
                );
              },
            ],
            ':': [
              '$i*',
              function(i) {
                return i + 1;
              },
            ],
            $return: [
              '$Raw*',
              function(o) {
                return o.Media.Ethernet;
              },
            ],
          },
        },
        WiFi: {
          '->': !0,
          NetworkNumberOfEntries: [
            'Network',
            function(o) {
              return _.size(o);
            },
          ],
          Network: {
            '->': !0,
            '{$Raw,$i}': [
              '$root',
              function(o) {
                return _.uniq(
                  _.filter(o.$Raw, function(e) {
                    return 'WiFi' == e.MediaType;
                  }),
                  function(e) {
                    return e.Media.WiFi.__Key;
                  }
                );
              },
            ],
            ':': [
              '$i*',
              function(i) {
                return i + 1;
              },
            ],
            $return: [
              '$Raw*',
              function(o) {
                return o.Media.WiFi;
              },
            ],
          },
        },
        DSL: {
          ATM: {
            '->': !0,
            LinkNumberOfEntries: [
              'Link',
              function(o) {
                return _.size(o);
              },
            ],
            Link: {
              '->': !0,
              '{$Raw,$i}': [
                '$root',
                function(o) {
                  return _.uniq(
                    _.filter(o.$Raw, function(e) {
                      return 'DSL.ATM' == e.MediaType;
                    }),
                    function(e) {
                      return e.Media.DSL.ATM.__Key;
                    }
                  );
                },
              ],
              ':': [
                '$i*',
                function(i) {
                  return i + 1;
                },
              ],
              $return: [
                '$Raw*',
                function(o) {
                  return o.Media.DSL.ATM;
                },
              ],
            },
          },
          PTM: {
            '->': !0,
            LinkNumberOfEntries: [
              'Link',
              function(o) {
                return _.size(o);
              },
            ],
            Link: {
              '->': !0,
              '{$Raw,$i}': [
                '$root',
                function(o) {
                  return _.uniq(
                    _.filter(o.$Raw, function(e) {
                      return 'DSL.PTM' == e.MediaType;
                    }),
                    function(e) {
                      return e.Media.DSL.PTM.__Key;
                    }
                  );
                },
              ],
              ':': [
                '$i*',
                function(i) {
                  return i + 1;
                },
              ],
              $return: [
                '$Raw*',
                function(o) {
                  return o.Media.DSL.PTM;
                },
              ],
            },
          },
        },
        Bridging: {
          '->': !0,
          BridgeNumberOfEntries: [
            'Bridge',
            function(o) {
              return _.size(o);
            },
          ],
          Bridge: {
            '->': !0,
            '{$Raw,$i}': [
              '$root',
              function(o) {
                return _.uniq(
                  _.filter(o.$Raw, function(e) {
                    return 'Bridging' == e.MediaType;
                  }),
                  function(e) {
                    return e.Media.Bridging.__Key;
                  }
                );
              },
            ],
            ':': [
              '$i*',
              function(i) {
                return i + 1;
              },
            ],
            $return: [
              '$Raw*',
              function(o) {
                return o.Media.Bridging;
              },
            ],
          },
        },
        Dongle: {
          '->': !0,
          InterfaceNumberOfEntries: [
            'Interface',
            function(o) {
              return _.size(o);
            },
          ],
          Interface: {
            '->': !0,
            '{$Raw,$i}': [
              '$root',
              function(o) {
                return _.uniq(
                  _.filter(o.$Raw, function(e) {
                    return 'Dongle' == e.MediaType;
                  }),
                  function(e) {
                    return e.Media.Dongle.__Key;
                  }
                );
              },
            ],
            ':': [
              '$i*',
              function(i) {
                return i + 1;
              },
            ],
            $return: [
              '$Raw*',
              function(o) {
                return o.Media.Dongle;
              },
            ],
          },
        },
      },
      IPv4DefaultGateway: [
        '$root',
        function(o) {
          return identifyDefaultGateway(o, 'v4');
        },
      ],
      IPv6DefaultGateway: [
        '$root',
        function(o) {
          return identifyDefaultGateway(o, 'v6');
        },
      ],
      UseAutomaticalPPTP: [
        '$root',
        function(o) {
          return identifyAutomaticalPPTP(o);
        },
      ],
    });
  },
  function(module, exports, __webpack_require__) {
    function T(template) {
      if (!(this instanceof T)) return new T(template);
      var tobj = private.compile(template);
      this.build = function(data) {
        return private.build(tobj, data);
      };
    }
    var private = __webpack_require__(85);
    module.exports = {
      T: T,
    };
  },
  function(module, exports, __webpack_require__) {
    function depk(depsMap) {
      return function(key) {
        return (function step(_key, k) {
          if (k && key == _key) {
            var error = new Error('Cyclic dependency at ');
            throw ((error.code = 'cyclic_deps'), (error.key = _key), error);
          }
          var deps = depsMap[_key];
          if (_.isArray(deps))
            return _.max(
              _.map(deps, function(e) {
                return step(e, k + 1);
              })
            );
          if (deps) return k;
          var error = new Error('Key is not found: ');
          throw ((error.code = 'key_not_found'), (error.key = _key), error);
        })(_.isArray(key) ? key[0] : key, 0);
      };
    }

    function mapd(template) {
      var obj = {
          $parent: !0,
          $root: !0,
        },
        q = template['->'];
      if (q && _.isArray(q) && q.length > 0)
        if (q.length > 1)
          for (var i = q.length - 1; i > 0; i--) {
            var e0 = q[i],
              e1 = q[i - 1];
            (obj[e0] = [e1]), (obj[e1] = !0);
          }
        else obj[q[0]] = !0;
      return (
        _.each(template, function(e, i) {
          function setDeps(key) {
            var preDeps = obj[key];
            (obj[key] = _.isArray(preDeps) ? fnDeps.concat(preDeps) : fnDeps),
              (obj[key] = _.uniq(obj[key]));
          }
          if ('->' != i && '-->' != i) {
            var keys;
            if (isOrdinaryKey(i) || isSpecialKey(i)) keys = [i];
            else if (((keys = parseVarietyKey(i)), !keys)) {
              var error = new Error('Invalid key format: ');
              throw ((error.code = 'invalid_key_format'),
              (error.key = i),
              error);
            }
            if (isFn(e) && _.isArray(e) && e.length > 1)
              for (var fnDeps = _.initial(e), j = 0; j < keys.length; j++)
                setDeps(stripDep(keys[j]));
            else
              for (var j = 0; j < keys.length; j++) {
                var k = keys[j];
                _.isArray(obj[k]) || (obj[k] = !0);
              }
          }
        }),
        stripDepsMap(obj)
      );
    }

    function isSpecialKey(key) {
      return '$return' == key || '?' == key || ':' == key;
    }

    function isQueueKey(key) {
      return '->' == key || '-->' == key;
    }

    function isFn(value) {
      if (_.isArray(value)) {
        if (value.length > 1) {
          var fn = _.last(value);
          if (!_.isFunction(fn)) return !1;
          for (var deps = _.initial(value), i = 0; i < deps.length; i++)
            if (!_.isString(deps[i])) return !1;
          return !0;
        }
        return 1 == value.length ? _.isFunction(value[0]) : !1;
      }
      return _.isFunction(value);
    }

    function parseVarietyKey(key) {
      var arr = key.replace(/\s/g, '').match(/^\s*{([\w\s,\.\x24]+)}\s*$/);
      return arr &&
        (keys = arr[1].split(',')) &&
        keys.length > 0 &&
        keys.length < 4
        ? _.contains(keys, '')
          ? null
          : keys
        : null;
    }

    function buildVarietyKey(arr) {
      var str = '{' + arr[0];
      if (arr.length > 1)
        for (var i = 1; i < arr.length; i++) str += ',' + arr[i];
      return (str += '}');
    }

    function isOrdinaryKey(key) {
      return !!key.match(/^[@\w\.\x24]+$/);
    }

    function queue(template) {
      var depsMap = mapd(template);
      return _.sortBy(
        _.map(
          _.sortBy(
            _.filter(_.keys(template), function(e) {
              return !isQueueKey(e);
            }),
            function(e) {
              return e;
            }
          ),
          function(i) {
            if (isOrdinaryKey(i) || isSpecialKey(i)) return i;
            var value = template[i];
            if (_.isObject(value) || ':external' == value)
              return parseVarietyKey(i);
            var error = new Error('Misplaced variety key: ');
            throw ((error.code = 'misplaced_variety_key'),
            (error.key = i),
            error);
          }
        ),
        depk(depsMap)
      );
    }

    function isLiteralObject(value) {
      return Object.getPrototypeOf(Object.getPrototypeOf(value)) ? !1 : !0;
    }

    function compile(template, tpath) {
      var obj = {};
      _.isUndefined(tpath) && (tpath = '');
      try {
        template['->'] && (obj['-->'] = queue(template));
      } catch (err) {
        if (!err.key) throw err;
        var path = tpath + err.key;
        throw ((error = new Error(err.message + '"' + path + '"')),
        (error.code = 'compile_error'),
        (error.path = path),
        error);
      }
      for (var i in template) {
        var e = template[i];
        if (_.isObject(e) && isLiteralObject(e)) {
          var o = compile(e, tpath + i + '.'),
            subQ = o['-->'];
          if (subQ) {
            var q = obj['-->'];
            q ? q && !_.contains(q, i) && q.push(i) : (obj['-->'] = [i]);
          }
          obj[i] = o;
        } else
          '->' != i &&
            (i.search('{') >= 0
              ? (obj[i.replace(/\s/g, '')] = e)
              : (obj[i] = e));
      }
      return obj;
    }

    function genObjColl(obj, keyval, coll) {
      return _.map(coll, function(e, i) {
        var o = _.extend({}, obj),
          val = keyval[0],
          key = keyval[1];
        return (o[val] = e), key && (o[key] = i), o;
      });
    }

    function callFn(context, depsfn) {
      function isMandatory(dep) {
        return !!dep.match(/^[^\*]+\*$/);
      }

      function isCritical(dep) {
        return !!dep.match(/^[^\*]+\*\*$/);
      }
      if (_.isFunction(depsfn)) return depsfn.call(context);
      if (1 == depsfn.length) return depsfn[0].call(context);
      var fn = _.last(depsfn),
        deps = _.initial(depsfn),
        margs = [],
        cargs = [],
        args = [];
      if (
        (_.each(deps, function(e) {
          var arg = stripDep(e);
          args.push(arg),
            isMandatory(e) ? margs.push(arg) : isCritical(e) && cargs.push(arg);
        }),
        !_.some(margs, function(e) {
          return _.isUndefined(context[e]);
        }))
      ) {
        var undefDep = _.find(cargs, function(e) {
          return _.isUndefined(context[e]);
        });
        if (undefDep) {
          var error = new Error(
            'Undefined critical dependency "' + undefDep + '" for key: '
          );
          throw ((error.code = 'callfn_cdepundef'),
          (error.dep = undefDep),
          error);
        }
        return fn.apply(
          context,
          _.map(args, function(e) {
            return context[e];
          })
        );
      }
    }

    function stripDep(dep) {
      return dep.match(/^[^\*]+/)[0];
    }

    function stripDepsMap(depsMap) {
      var _depsMap = {};
      return (
        _.each(depsMap, function(e, i) {
          var deps;
          (deps = _.isArray(e)
            ? _.map(e, function(_e) {
                return stripDep(_e);
              })
            : e),
            (_depsMap[i] = deps);
        }),
        _depsMap
      );
    }

    function addVariety(obj, keyval, constructor) {
      function _expand(e) {
        var arr;
        if (
          ((arr = isFn(constructor) ? callFn(e, constructor) : constructor),
          _.isUndefined(arr) || (_.isObject(arr) && 0 == _.size(arr)))
        )
          return e;
        if (!_.isObject(arr) || (!_.isArray(arr) && !isLiteralObject(arr))) {
          var error = new Error('Incorrect value for variety key: ');
          throw ((error.code = 'incorrect_value_for_variety_key'),
          (error.key = buildVarietyKey(keyval)),
          error);
        }
        return genObjColl(e, keyval, arr);
      }

      function _addKeys(arr) {
        return (
          3 == keyval.length &&
            _.each(arr, function(e, i) {
              e[keyval[2]] = i;
            }),
          arr
        );
      }
      try {
        return isLiteralObject(obj)
          ? _.isUndefined(constructor) ||
            (isFn(constructor) && _.isUndefined(callFn(obj, constructor)))
            ? obj
            : _addKeys(_expand(obj))
          : _addKeys(_.flatten(_.map(obj, _expand)));
      } catch (err) {
        if ('callfn_cdepundef' != err.code) throw err;
        var error = new Error(err.message);
        throw ((error.code = 'adding_cdepundef'),
        (error.dep = err.dep),
        (error.key = buildVarietyKey(keyval)),
        error);
      }
    }

    function addProperty(obj, key, constructor) {
      try {
        if (isLiteralObject(obj)) {
          var value = callFn(obj, constructor);
          _.isUndefined(value) || (obj[key] = value);
        } else
          _.each(obj, function(e) {
            var value = callFn(e, constructor);
            _.isUndefined(value) || (e[key] = value);
          });
      } catch (err) {
        if ('callfn_cdepundef' != err.code) throw err;
        var error = new Error(err.message);
        throw ((error.code = 'adding_cdepundef'),
        (error.dep = err.dep),
        (error.key = key),
        error);
      }
      return obj;
    }

    function addConstant(obj, key, value) {
      return (
        isLiteralObject(obj)
          ? _.isUndefined(value) || (obj[key] = value)
          : _.each(obj, function(e) {
              _.isUndefined(value) || (e[key] = value);
            }),
        obj
      );
    }

    function build(tobj, data, parent, root, curKey) {
      function qq(o) {
        var _q = o['?'];
        return _.isUndefined(_q) || _q;
      }
      try {
        var obj = {
            '->': !0,
          },
          q = tobj['-->'];
        root || (root = obj),
          (obj.$root = root),
          parent && (obj.$parent = parent);
        for (var i = 0; i < q.length; i++) {
          var e = q[i];
          if (_.isArray(e)) {
            var key = buildVarietyKey(e),
              value = tobj[key];
            obj = isFn(value)
              ? addVariety(obj, e, value)
              : ':external' == value
                ? addVariety(obj, e, data[key])
                : addVariety(obj, e, value);
          } else {
            var key = e,
              value = tobj[key];
            if (isFn(value)) addProperty(obj, key, value);
            else if (_.isObject(value))
              if (isLiteralObject(value) && value['-->'])
                if (_.isArray(obj))
                  for (var j = 0; j < obj.length; j++) {
                    var _e = obj[j];
                    _e[key] = build(value, data, _e, root, key);
                  }
                else obj[key] = build(value, data, obj, root, key);
              else addConstant(obj, key, value);
            else
              ':external' == value
                ? (obj = addConstant(obj, key, data[key]))
                : addConstant(obj, key, value);
          }
          if ('?' == e)
            if (_.isArray(obj))
              obj = _.filter(obj, function(_e) {
                return qq(_e);
              });
            else if (!qq(obj)) return;
        }
        return curKey ? postBuild(obj, tobj) : clean(postBuild(obj, tobj));
      } catch (err) {
        if (!err.key) throw err;
        var error = new Error();
        error.messageBase = err.messageBase ? err.messageBase : err.message;
        var key;
        throw ((key = curKey ? curKey + '.' + err.key : err.key),
        (error.code = 'build_error'),
        (error.key = key),
        (error.message = error.messageBase + '"' + error.key + '"'),
        err.dep && (error.dep = err.dep),
        error);
      }
    }

    function postBuild(obj, tobj) {
      function isEmptyColl(obj) {
        return _.find(tobj['-->'], function(e) {
          return _.isArray(e);
        }) && !_.isArray(obj)
          ? !0
          : !1;
      }
      if (isEmptyColl(obj)) return tobj[':'] ? {} : [];
      if (tobj.$return) {
        if (tobj[':']) {
          if (_.isArray(obj)) {
            var _obj = {};
            return (
              _.each(obj, function(e) {
                _.isUndefined(e[':']) || (_obj[e[':']] = e.$return);
              }),
              _obj
            );
          }
          var _obj = {};
          return (
            _.isUndefined(obj[':']) || (_obj[obj[':']] = obj.$return), _obj
          );
        }
        return _.isArray(obj)
          ? _.map(obj, function(e) {
              return e.$return;
            })
          : obj.$return;
      }
      if (tobj[':']) {
        if (_.isArray(obj)) {
          var _obj = {};
          return (
            _.each(obj, function(e) {
              _.isUndefined(e[':']) || (_obj[e[':']] = e);
            }),
            _obj
          );
        }
        var _obj = {};
        return _.isUndefined(obj[':']) || (_obj[obj[':']] = obj), _obj;
      }
      return obj;
    }

    function clean(obj) {
      function cln(obj, inx) {
        var o = clean(obj[inx]);
        _.isUndefined(o) ? delete obj[inx] : (obj[inx] = o);
      }
      if (_.isObject(obj) && isLiteralObject(obj))
        if (obj['->']) {
          if (!_.isUndefined(obj['?']) && !obj['?']) return;
          delete obj['->'], delete obj['-->'], delete obj[':'], delete obj['?'];
          for (var i in obj) '$' == i[0] ? delete obj[i] : cln(obj, i);
        } else for (var i in obj) cln(obj, i);
      else if (_.isArray(obj)) {
        for (var i = 0; i < obj.length; i++) obj[i] = clean(obj[i]);
        return _.filter(obj, function(e) {
          return !_.isUndefined(e);
        });
      }
      return obj;
    }
    var _ = __webpack_require__(3);
    module.exports = {
      depk: depk,
      mapd: mapd,
      isSpecialKey: isSpecialKey,
      isQueueKey: isQueueKey,
      isFn: isFn,
      parseVarietyKey: parseVarietyKey,
      buildVarietyKey: buildVarietyKey,
      isOrdinaryKey: isOrdinaryKey,
      isLiteralObject: isLiteralObject,
      queue: queue,
      compile: compile,
      genObjColl: genObjColl,
      callFn: callFn,
      addVariety: addVariety,
      addProperty: addProperty,
      addConstant: addConstant,
      clean: clean,
      postBuild: postBuild,
      build: build,
      stripDep: stripDep,
      stripDepsMap: stripDepsMap,
    };
  },
  ,
  function(module, exports, __webpack_require__) {
    'use strict';
    'use version 6';

    function linkType(o) {
      switch (o) {
        case 'EoA':
          return 'MDMVS_EOA';
        case 'IPoA':
          return 'MDMVS_IPOA';
        case 'PPPoA':
          return 'MDMVS_PPPOA';
      }
      return 'unknown';
    }

    function qosClass(o) {
      switch (o) {
        case 'UBR':
          return 'ubr';
        case 'UBR+':
          return 'ubr_pcr';
        case 'CBR':
          return 'cbr';
        case 'VBR-nrt':
          return 'nrtvbr';
        case 'VBR-rt':
          return 'rtvbr';
      }
      return 'unknown';
    }

    function dongleActualType(o) {
      return o.Type.toLowerCase();
    }

    function dongleMode(o) {
      switch (o.Type) {
        case '3G':
          switch (o.Mode) {
            case 'Auto':
              return '32';
            case '3G':
              return '3';
            case '2G':
              return '2';
          }
          return '32';
        case 'USB':
          switch (o.Mode) {
            case 'Auto':
              return '0x000';
            case '3G':
              return '0x002';
            case '2G':
              return '0x001';
            case 'Auto 2G->3G':
              return '0x008';
            case 'Auto 3G->2G':
              return '0x010';
            case 'Auto 2G->3G->LTE':
              return '0x020';
            case 'Auto 3G->LTE':
              return '0x080';
            case 'Auto LTE->3G':
              return '0x100';
          }
          return '0x000';
        case 'LTE':
          switch (o.Mode) {
            case 'Auto':
              return '0';
            case '4G':
              return '4';
            case '3G':
              return '3';
            case '2G':
              return '2';
          }
          return '0';
      }
      return '0';
    }

    function is3G(o) {
      if ('Dongle' == o.MediaType) {
        var dongle = o.Media.Dongle;
        return '3G' == dongle.Type || 'USB' == dongle.Type;
      }
      return !1;
    }

    function authProto(o) {
      var auth = o.AuthenticationProtocol || 'Auto';
      switch (auth) {
        case 'AUTO':
          return '0';
        case 'PAP':
          return '1';
        case 'CHAP':
          return '2';
        case 'MS-CHAP':
          return '3';
        case 'MS-CHAP-V2':
          return '4';
      }
    }

    function encrProto(params) {
      var encrypt = params.EncryptionProtocol || 'None';
      switch (encrypt) {
        case 'None':
          return '0';
        case 'MPPE':
          return '1';
        case 'MPPE40':
          return '2';
        case 'MPPE128':
          return '3';
      }
    }

    function onDemand(params) {
      return 'OnDemand' == params.ConnectionTrigger
        ? params.IdleDisconnectTime
        : 0;
    }

    function isPPPoA(o) {
      return 'DSL.ATM' == o.MediaType && 'PPPoA' == o.Media.DSL.ATM.LinkType;
    }

    function isXoE(o) {
      switch (o.MediaType) {
        case 'Ethernet':
        case 'WiFi':
        case 'DSL.PTM':
        case 'Bridging':
          return !0;
        case 'DSL.ATM':
          return 'EoA' == o.Media.DSL.ATM.LinkType;
      }
      return !1;
    }

    function isTunnel(o) {
      return !!o.ActualType;
    }

    function eap(o) {
      switch (o.EAPMethod) {
        case 'EAP-MD5':
          return 0;
        case 'EAP-TTLS/CHAP':
          return 1;
        case 'EAP-TTLS/MS-CHAP':
          return 2;
        case 'EAP-TTLS/MS-CHAPv2':
          return 3;
      }
      return 0;
    }

    function getFullIPv6(address, prefix) {
      var ipv6 = address;
      return prefix && (ipv6 += '/' + prefix), ipv6;
    }

    function isIPv6(o) {
      return o.Origin ? !0 : !1;
    }

    function getLayersSets(device) {
      function convert(data, tname, type) {
        return data
          ? _.map(data.Connection, function(e) {
              var media = getMedia(e),
                l2 = getL2(e);
              return {
                l3: _.extend(
                  tname
                    ? components[tname].build({
                        $Connection: e,
                        type: type,
                      })
                    : {
                        type: type,
                      },
                  components.header.build({
                    $Connection: e,
                  }),
                  components.flags.build({
                    $Connection: e,
                  }),
                  components.vlan.build({
                    $Connection: e,
                    $Media: media,
                  }),
                  components.health_check.build({
                    $Connection: e,
                  })
                ),
                l2: l2,
              };
            })
          : [];
      }

      function getAutoConnectionLayers() {
        return {
          l2: {
            __key: 'auto',
            is_wan: !0,
            type: 'auto',
          },
          l3: {
            __key: 'auto',
            type: 'auto',
          },
        };
      }

      function getL2(e) {
        switch (e.MediaType) {
          case 'Ethernet':
            return components.ethernet.build({
              $Interface: getMedia(e),
            });
          case 'DSL.ATM':
            return components.atm.build({
              $Link: getMedia(e),
            });
          case 'DSL.PTM':
            return components.ptm.build({
              $Link: getMedia(e),
            });
          case 'WiFi':
            return components.wifi.build({
              $Network: getMedia(e),
            });
          case 'Bridging':
            return components.bridging.build({
              $Bridge: getMedia(e),
            });
          case 'Dongle':
            return components.dongle.build({
              $Interface: getMedia(e),
            });
        }
      }

      function getMedia(e) {
        switch (e.MediaType) {
          case 'Ethernet':
            return e.Media.Ethernet;
          case 'DSL.ATM':
            return e.Media.DSL.ATM;
          case 'DSL.PTM':
            return e.Media.DSL.PTM;
          case 'WiFi':
            return e.Media.WiFi;
          case 'Bridging':
            return e.Media.Bridging;
          case 'Dongle':
            return e.Media.Dongle;
        }
      }
      var lset = []
        .concat(convert(device.Bridge, '', 'bridge'))
        .concat(convert(device.PPPoE, 'ppp', 'ppp'))
        .concat(convert(device.PPPoEv6, 'ppp', 'pppv6'))
        .concat(convert(device.PPPoEDual, 'ppp', 'pppdual'))
        .concat(convert(device.PPPoA, 'ppp', 'ppp'))
        .concat(convert(device['3G'], 'ppp', 'ppp'))
        .concat(convert(device.IPv4oE, 'ip', 'ip'))
        .concat(convert(device.LTE, 'ip'))
        .concat(convert(device.IPoA, 'ip'))
        .concat(convert(device.IPv6oE, 'ipv6'));
      return (
        device.PPTP &&
          _.each(device.PPTP.Connection, function(c) {
            if (c.AutomaticalConnection) {
              var obj = getAutoConnectionLayers();
              lset.push(obj);
            } else
              var obj = _.find(lset, function(e) {
                return e.l3.__key == c.__LowerLayer;
              });
            obj &&
              (obj.l4 = _.extend(
                components.ppp.build({
                  $Connection: c,
                  type: c.ActualType.toLowerCase(),
                }),
                components.header.build({
                  $Connection: c,
                }),
                components.flags.build({
                  $Connection: c,
                }),
                components.vlan.build({
                  $Connection: c,
                })
              ));
          }),
        lset
      );
    }
    var T = __webpack_require__(84).T,
      _ = __webpack_require__(3);
    module.exports = function(data) {
      return _.map(getLayersSets(data), function(e) {
        var obj = {},
          l2key = e.l2.__key,
          l3key = e.l3.__key;
        (obj[l2key] = e.l2), delete obj[l2key].__key;
        var services = (obj[l2key].services = {});
        if (
          ((services[l3key] = e.l3),
          delete services[l3key].__key,
          delete services[l3key].__lower_layer,
          e.l4)
        ) {
          var l4key = e.l4.__key,
            tunnels = (services[l3key].tunnels = {});
          (tunnels[l4key] = e.l4),
            delete tunnels[l4key].__key,
            delete tunnels[l4key].__lower_layer;
        }
        return obj;
      });
    };
    var components = {
      ethernet: T({
        '->': !0,
        $Interface: ':external',
        __key: [
          '$Interface',
          function(o) {
            return o.__Key;
          },
        ],
        __vlan_name: [
          '$Interface',
          function(o) {
            return o.__VlanName;
          },
        ],
        type: 'ethernet',
        is_wan: !0,
        enable: [
          '$Interface',
          function(o) {
            return o.Enable;
          },
        ],
        port: [
          '$Interface',
          function(o) {
            return o.Name;
          },
        ],
        mac: [
          '$Interface',
          function(o) {
            return o.MACAddress;
          },
        ],
        mtu: [
          '$Interface',
          function(o) {
            return o.MaxMRUSize;
          },
        ],
      }),
      atm: T({
        '->': ['$Link', 'pvc_settings'],
        $Link: ':external',
        __key: [
          '$Link',
          function(o) {
            return o.__Key;
          },
        ],
        __vlan_name: [
          '$Link',
          function(o) {
            return o.__VlanName;
          },
        ],
        type: 'atm',
        is_wan: !0,
        enable: [
          '$Link',
          function(o) {
            return o.Enable;
          },
        ],
        iface: [
          '$Link',
          function(o) {
            return o.Name;
          },
        ],
        link_type: [
          '$Link',
          function(o) {
            return linkType(o.LinkType);
          },
        ],
        connection_mode: [
          '$Link',
          function(o) {
            return o.ConnectionMode;
          },
        ],
        pvc_settings: {
          '->': !0,
          $vpivci: [
            '$parent',
            function(o) {
              return o.$Link.DestinationAddress.split('/');
            },
          ],
          encap: [
            '$parent',
            function(o) {
              return o.$Link.Encapsulation.toLowerCase();
            },
          ],
          vpi: [
            '$vpivci',
            function(o) {
              return parseInt(o[0]);
            },
          ],
          vci: [
            '$vpivci',
            function(o) {
              return parseInt(o[1]);
            },
          ],
          qos: [
            '$parent',
            function(o) {
              return qosClass(o.$Link.QoSClass);
            },
          ],
          pcr: [
            '$parent',
            'qos',
            function(p, qos) {
              return 'ubr' != qos ? p.$Link.PeakCellRate : void 0;
            },
          ],
          mbs: [
            '$parent',
            'qos',
            function(p, qos) {
              return 'nrtvbr' == qos || 'rtvbr' == qos
                ? p.$Link.MaximumBurstSize
                : void 0;
            },
          ],
          scr: [
            '$parent',
            'qos',
            function(p, qos) {
              return 'nrtvbr' == qos || 'rtvbr' == qos
                ? p.$Link.SustainableCellRate
                : void 0;
            },
          ],
        },
      }),
      ptm: T({
        '->': !0,
        $Link: ':external',
        __key: [
          '$Link',
          function(o) {
            return o.__Key;
          },
        ],
        __vlan_name: [
          '$Link',
          function(o) {
            return o.__VlanName;
          },
        ],
        type: [
          '$Link',
          function(o) {
            return o.__ActualType ? o.__ActualType : 'ptm';
          },
        ],
        is_wan: !0,
        enable: [
          '$Link',
          function(o) {
            return o.Enable;
          },
        ],
        port: [
          '$Link',
          function(o) {
            return o.Name;
          },
        ],
        mac: [
          '$Link',
          function(o) {
            return o.MACAddress;
          },
        ],
        link_type: [
          '$Link',
          function(o) {
            return linkType(o.LinkType);
          },
        ],
        connection_mode: [
          '$Link',
          function(o) {
            return o.ConnectionMode;
          },
        ],
      }),
      wifi: T({
        '->': !0,
        $Network: ':external',
        __key: [
          '$Network',
          function(o) {
            return o.__Key;
          },
        ],
        __vlan_name: [
          '$Network',
          function(o) {
            return o.__VlanName;
          },
        ],
        type: 'ethernet',
        is_wan: !0,
        port: [
          '$Network',
          function(o) {
            return o.Name;
          },
        ],
        enable: [
          '$Network',
          function(o) {
            return o.Enable;
          },
        ],
        mac: [
          '$Network',
          function(o) {
            return o.MACAddress;
          },
        ],
        mtu: [
          '$Network',
          function(o) {
            return o.MaxMRUSize;
          },
        ],
      }),
      bridging: T({
        '->': !0,
        $Bridge: ':external',
        __key: [
          '$Bridge',
          function(o) {
            return o.__Key;
          },
        ],
        __vlan_name: [
          '$Bridge',
          function(o) {
            return o.__VlanName;
          },
        ],
        type: 'bridge',
        is_wan: !0,
        enable: [
          '$Bridge',
          function(o) {
            return o.Enable;
          },
        ],
        port: [
          '$Bridge',
          function(o) {
            return o.Name;
          },
        ],
        mac: [
          '$Bridge',
          function(o) {
            return o.MACAddress;
          },
        ],
      }),
      dongle: T({
        '->': !0,
        $Interface: ':external',
        __key: [
          '$Interface',
          function(o) {
            return o.__Key;
          },
        ],
        __vlan_name: [
          '$Interface',
          function(o) {
            return o.__VlanName;
          },
        ],
        is_wan: !0,
        enable: [
          '$Interface',
          function(o) {
            return o.Enable;
          },
        ],
        port: [
          '$Interface',
          function(o) {
            return o.Name;
          },
        ],
        mac: [
          '$Interface',
          function(o) {
            return o.MACAddress;
          },
        ],
        type: [
          '$Interface',
          function(o) {
            return dongleActualType(o);
          },
        ],
        dongle_type: [
          '$Interface',
          function(o) {
            return o.DongleType;
          },
        ],
        mode: [
          '$Interface',
          function(o) {
            return dongleMode(o);
          },
        ],
      }),
      header: T({
        '->': !0,
        $Connection: ':external',
        __lower_layer: [
          '$Connection',
          function(o) {
            return o.__LowerLayer;
          },
        ],
        __key: [
          '$Connection',
          function(o) {
            return o.__Key;
          },
        ],
        enable: [
          '$Connection',
          function(o) {
            return o.Enable;
          },
        ],
        name: [
          '$Connection',
          function(o) {
            return o.Name;
          },
        ],
        connection_status: [
          '$Connection',
          function(o) {
            return o.Status;
          },
        ],
      }),
      ppp: T({
        '->': ['$Connection', 'keep_alive'],
        $Connection: ':external',
        $Is3G: [
          '$Connection',
          function(o) {
            return is3G(o) || void 0;
          },
        ],
        $IsPPPoX: [
          '$Connection',
          function(o) {
            return isPPPoA(o) || isXoE(o) || void 0;
          },
        ],
        $IsTunnel: [
          '$Connection',
          function(o) {
            return isTunnel(o) || void 0;
          },
        ],
        $IsIPv6: [
          '$Connection',
          function(o) {
            return !!o.Origin || void 0;
          },
        ],
        $IsStaticIPv6: [
          '$Connection',
          '$IsIPv6*',
          function(o) {
            return 'Static' == o.Origin || void 0;
          },
        ],
        $IsDynamicIPv6: [
          '$Connection',
          '$IsIPv6*',
          function(o) {
            return 'Static' != o.Origin || void 0;
          },
        ],
        type: ':external',
        ppp_state: [
          '$Connection',
          function(o) {
            return o.PPPState;
          },
        ],
        ppp_debug: [
          '$Connection',
          function(o) {
            return o.PPPDebug;
          },
        ],
        ppp_mppc: [
          '$Connection',
          function(o) {
            return o.PPPMPPC;
          },
        ],
        username: [
          '$Connection',
          function(o) {
            return o.Username;
          },
        ],
        password: [
          '$Connection',
          function(o) {
            return o.WithoutAuth ? '' : o.Password;
          },
        ],
        servicename: [
          '$Connection',
          function(o) {
            return o.ServiceName;
          },
        ],
        apn: [
          '$Connection',
          '$Is3G*',
          function(o) {
            return o.APN;
          },
        ],
        dial_num: [
          '$Connection',
          '$Is3G*',
          function(o) {
            return o.DialNumber;
          },
        ],
        mtu: [
          '$Connection',
          function(o) {
            return o.MaxMRUSize;
          },
        ],
        gwif: [
          '$Connection',
          function(o) {
            return o.DefaultGateway;
          },
        ],
        keep_alive: {
          '->': !0,
          interval: [
            '$parent',
            function(o) {
              return o.$Connection.KeepAlive ? o.$Connection.LCPEcho : void 0;
            },
          ],
          fails: [
            '$parent',
            function(o) {
              return o.$Connection.KeepAlive
                ? o.$Connection.LCPEchoRetry
                : void 0;
            },
          ],
        },
        ondemand: [
          '$Connection',
          function(o) {
            return onDemand(o);
          },
        ],
        auto: [
          '$Connection',
          '$IsTunnel*',
          function(o) {
            return 'AlwaysOn' == o.ConnectionTrigger;
          },
        ],
        auth: [
          '$Connection',
          function(o) {
            return authProto(o);
          },
        ],
        encrypt: [
          '$Connection',
          '$IsTunnel*',
          function(o) {
            return encrProto(o);
          },
        ],
        ppp_ip_ext: [
          '$Connection',
          '$IsPPPoX*',
          function(o) {
            return o.IPExtension;
          },
        ],
        extra_options: [
          '$Connection',
          function(o) {
            return is3G(o) || isTunnel(o) ? o.ExtraOptions : void 0;
          },
        ],
        static_ip: [
          '$Connection',
          function(o) {
            return o.StaticIPAddress0;
          },
        ],
        ipv6_auto: [
          '$Connection',
          '$IsIPv6*',
          function(o) {
            return 'AutoConfigured' == o.Origin;
          },
        ],
        ipv6_by_dhcpv6: [
          '$Connection',
          '$IsIPv6*',
          function(o) {
            return 'AutoConfiguredByDHCPv6' == o.Origin;
          },
        ],
        ipv6_by_slaac: [
          '$Connection',
          '$IsIPv6*',
          function(o) {
            return 'AutoConfiguredBySlaac' == o.Origin;
          },
        ],
        ipv6_by_dhcpv6_pd: [
          '$Connection',
          '$IsIPv6*',
          function(o) {
            return 'AutoConfiguredByDHCPv6PD' == o.Origin;
          },
        ],
        ipv6: [
          '$Connection',
          '$IsIPv6*',
          function(o) {
            return getFullIPv6(o.StaticIPv6Address0, o.StaticIPv6Prefix0);
          },
        ],
        gwipv6: [
          '$Connection',
          '$IsIPv6*',
          function(o) {
            return o.GatewayIPv6Address;
          },
        ],
        slaac: [
          '$Connection',
          '$IsIPv6*',
          function(o) {
            return o.GatewayIPv6AddressBySlaac;
          },
        ],
        dns_from_dhcpv6: [
          '$Connection',
          '$IsDynamicIPv6*',
          function(o) {
            return o.DNSIPv6Automatical;
          },
        ],
        dns_primv6: [
          '$Connection',
          function(o) {
            return o.DNSIPv6Server1;
          },
        ],
        dns_secv6: [
          '$Connection',
          function(o) {
            return o.DNSIPv6Server2;
          },
        ],
        gwifv6: [
          '$Connection',
          '$IsIPv6*',
          function(o) {
            return o.DefaultGatewayv6;
          },
        ],
      }),
      ip: T({
        '->': ['$Connection', '8021x', 'kabinet'],
        $Connection: ':external',
        $IsStatic: [
          '$Connection',
          function(o) {
            return 'Static' == o.AddressingType || void 0;
          },
        ],
        $IsDynamic: [
          '$Connection',
          function(o) {
            return 'DHCP' == o.AddressingType || void 0;
          },
        ],
        type: 'ip',
        dhcp: [
          '$Connection',
          function(o) {
            return 'DHCP' == o.AddressingType;
          },
        ],
        ip: [
          '$Connection',
          '$IsStatic*',
          function(o) {
            return o.StaticIPAddress0;
          },
        ],
        mask: [
          '$Connection',
          '$IsStatic*',
          function(o) {
            return o.StaticIPSubnetMask0;
          },
        ],
        gwip: [
          '$Connection',
          function(o) {
            return o.GatewayIPAddress;
          },
        ],
        dns_from_dhcp: [
          '$Connection',
          '$IsDynamic*',
          function(o) {
            return o.DNSAutomatical;
          },
        ],
        dns_prim: [
          '$Connection',
          function(o) {
            return o.DNSServer1;
          },
        ],
        dns_sec: [
          '$Connection',
          function(o) {
            return o.DNSServer2;
          },
        ],
        gwif: [
          '$Connection',
          function(o) {
            return o.DefaultGateway;
          },
        ],
        vendor_id: [
          '$Connection',
          function(o) {
            return o.VendorID;
          },
        ],
        hostname: [
          '$Connection',
          function(o) {
            return o.Hostname;
          },
        ],
        apn: [
          '$Connection',
          '$IsDynamic*',
          function(o) {
            return o.APN;
          },
        ],
        noauth: [
          '$Connection',
          '$IsDynamic*',
          function(o) {
            return o.WithoutAuth;
          },
        ],
        auth: [
          '$Connection',
          '$IsDynamic*',
          function(o) {
            return o.WithoutAuth ? 'none' : o.AuthenticationProtocol;
          },
        ],
        login: [
          '$Connection',
          '$IsDynamic*',
          function(o) {
            return o.Login;
          },
        ],
        password: [
          '$Connection',
          '$IsDynamic*',
          function(o) {
            return o.WithoutAuth ? '' : o.Password;
          },
        ],
        '8021x': {
          '->': !0,
          '?': [
            '$parent',
            function(o) {
              return !!o.$Connection.Authorization8021x;
            },
          ],
          $8021x: [
            '$parent',
            '?',
            function(o) {
              return o.$Connection.Authorization8021x;
            },
          ],
          enable: [
            '$8021x',
            function(o) {
              return o.Enable;
            },
          ],
          eap_method: [
            '$8021x',
            function(o) {
              return eap(o);
            },
          ],
          login: [
            '$8021x',
            function(o) {
              return o.Username;
            },
          ],
          passwd: [
            '$8021x',
            function(o) {
              return o.Password;
            },
          ],
        },
        kabinet: {
          '->': !0,
          '?': [
            '$parent',
            function(o) {
              return !!o.$Connection.Kabinet && o.$Connection.Kabinet.Enable;
            },
          ],
          enable: [
            '$parent',
            '?',
            function(o) {
              return o.$Connection.Kabinet.Enable;
            },
          ],
          pass: [
            '$parent',
            '?',
            function(o) {
              return o.$Connection.Kabinet.Password;
            },
          ],
        },
      }),
      ipv6: T({
        '->': !0,
        $Connection: ':external',
        type: 'ipv6',
        dhcp: [
          '$Connection',
          function(o) {
            return 'Static' != o.Origin;
          },
        ],
        ipv6_auto: [
          '$Connection',
          function(o) {
            return 'AutoConfigured' == o.Origin;
          },
        ],
        ipv6_by_dhcpv6: [
          '$Connection',
          function(o) {
            return 'AutoConfiguredByDHCPv6' == o.Origin;
          },
        ],
        ipv6_by_slaac: [
          '$Connection',
          function(o) {
            return 'AutoConfiguredBySlaac' == o.Origin;
          },
        ],
        ipv6_by_dhcpv6_pd: [
          '$Connection',
          function(o) {
            return 'AutoConfiguredByDHCPv6PD' == o.Origin;
          },
        ],
        ipv6: [
          '$Connection',
          function(o) {
            return getFullIPv6(o.StaticIPAddress0, o.StaticIPPrefix0);
          },
        ],
        gwipv6: [
          '$Connection',
          function(o) {
            return o.GatewayIPAddress;
          },
        ],
        slaac: [
          '$Connection',
          function(o) {
            return o.GatewayIPAddressBySlaac;
          },
        ],
        dns_from_dhcpv6: [
          '$Connection',
          function(o) {
            return o.DNSAutomatical;
          },
        ],
        dns_primv6: [
          '$Connection',
          function(o) {
            return o.DNSServer1;
          },
        ],
        dns_secv6: [
          '$Connection',
          function(o) {
            return o.DNSServer2;
          },
        ],
        gwifv6: [
          '$Connection',
          function(o) {
            return o.DefaultGatewayv6;
          },
        ],
      }),
      flags: T({
        '->': !0,
        $Connection: ':external',
        $IsIPv4: [
          '$Connection',
          function(o) {
            return !isIPv6(o) || void 0;
          },
        ],
        $Flags: [
          '$Connection',
          function(o) {
            return o.Flags;
          },
        ],
        rip: [
          '$Flags*',
          function(o) {
            return o.RIP;
          },
        ],
        nat: [
          '$Flags*',
          function(o) {
            return o.NAT;
          },
        ],
        igmp: [
          '$Flags*',
          function(o) {
            return o.IGMP;
          },
        ],
        firewall: [
          '$Flags*',
          function(o) {
            return o.Firewall;
          },
        ],
        ping_respond: [
          '$Flags*',
          function(o) {
            return o.Ping;
          },
        ],
        rtsp: [
          '$Flags*',
          function(o) {
            return o.RTSP;
          },
        ],
        table_alt: [
          '$Flags*',
          function(o) {
            return o.AltRoutingTable;
          },
        ],
        mld: [
          '$Flags*',
          function(o) {
            return o.MLD;
          },
        ],
      }),
      vlan: T({
        '->': ['?', '$vlan', 'vlan'],
        $Connection: ':external',
        $Media: ':external',
        '?': [
          '$Connection',
          '$Media',
          function(o, m) {
            return (!!o.VLAN && !!o.VLAN.Enable) || (!!m && !!m.UseMultiPVC);
          },
        ],
        $vlan: [
          '$Connection',
          function(o) {
            return o.VLAN;
          },
        ],
        vlan: {
          '->': !0,
          $vlan: [
            '$parent',
            function(p) {
              return p.$vlan;
            },
          ],
          vlanid: [
            '$vlan*',
            function(v) {
              return v.Enable ? v.ID : void 0;
            },
          ],
          vlanpr: [
            '$vlan*',
            function(v) {
              return v.Enable ? v.Priority : void 0;
            },
          ],
        },
      }),
      health_check: T({
        '->': ['?', '$hc', 'health_check'],
        $Connection: ':external',
        '?': [
          '$Connection',
          function(o) {
            return !!o.HealthCheck;
          },
        ],
        $hc: [
          '$Connection',
          '?',
          function(o) {
            return o.HealthCheck;
          },
        ],
        health_check: {
          '->': !0,
          $hc: [
            '$parent',
            function(p) {
              return p.$hc;
            },
          ],
          enable: [
            '$hc',
            function(hc) {
              return hc.Enable;
            },
          ],
          ping_address: [
            '$hc',
            function(hc) {
              return hc.Enable ? hc.PingAddress : void 0;
            },
          ],
          max_ping: [
            '$hc',
            function(hc) {
              return hc.Enable ? hc.MaxPing : void 0;
            },
          ],
        },
      }),
    };
  },
  ,
  ,
  ,
  function(module, exports, __webpack_require__) {
    'use strict';

    function hasRadioGHz(wifi, ghz) {
      return wifi[35]
        ? '2.4GHz' == ghz
          ? _.has(wifi[35], 'Radio') || _.has(wifi[35], 'apcli')
          : '5GHz' == ghz
            ? _.has(wifi[35], '5G_Radio') || _.has(wifi[35], '5G_apcli')
            : void 0
        : !1;
    }

    function radioNumberOfEntries(wifi) {
      var result = 0;
      return (
        hasRadioGHz(wifi, '2.4GHz') && result++,
        hasRadioGHz(wifi, '5GHz') && result++,
        result
      );
    }

    function supportedStandards(modes, band) {
      return modes
        ? _.chain(modes)
            .map(function(mode) {
              return standardsModes[mode.Name]
                ? standardsModes[mode.Name].split(',')
                : [];
            })
            .flatten()
            .uniq()
            .value()
            .join(',')
        : void 0;
    }

    function operatingStandards(modes, id, band) {
      return modes
        ? supportedStandards(
            _.filter(modes, function(m) {
              return m.Id == id;
            })
          )
        : void 0;
    }

    function autoChannelEnable(channel) {
      return channel ? ('auto' == channel ? !0 : !1) : void 0;
    }

    function channel(ch, autoCh) {
      return autoCh
        ? autoCh
        : ch
          ? 'auto' != ch
            ? parseInt(ch)
            : 'auto'
          : void 0;
    }

    function authModesSupported(modes) {
      var allModes = _.values(authModes);
      if (!modes) return allModes.join(',');
      var supportModes = _.chain(modes)
        .map(function(mode) {
          return 'SHARED' == mode.Id
            ? ['WEP-64', 'WEP-128']
            : authModes[mode.Id];
        })
        .flatten()
        .uniq()
        .value();
      return _.union(allModes, supportModes).join(',');
    }

    function authModeEnabled(mode, key) {
      if (mode) {
        if ('SHARED' == mode) {
          if (5 == key.length || 10 == key.length) return 'WEP-64';
          if (13 == key.length || 26 == key.length) return 'WEP-128';
        }
        return authModes[mode];
      }
    }

    function getSupportedChannelBandwidth(ba) {
      if (ba) {
        var list = _.pluck(ba, 'Name');
        _.each(list, function(elem, inx) {
          list[inx] =
            -1 != elem.search(' ') ? elem.substring(0, elem.search(' ')) : elem;
        });
        var result = _.uniq(list).join(',');
        return result;
      }
    }

    function getCoexistence(bandwidth, bandwidthList) {
      return _.find(bandwidthList, function(elem) {
        return -1 != elem.Name.search('Coexistence');
      })
        ? '1' == bandwidth ||
          '5' == bandwidth ||
          '9' == bandwidth ||
          '10' == bandwidth
          ? !0
          : !1
        : void 0;
    }

    function getChannelBandwidth(ba, bw) {
      var result = _.find(ba, function(elem) {
        return elem.Id == bw;
      });
      if (result) {
        var name =
          -1 != result.Name.search(' ')
            ? result.Name.substring(0, result.Name.search(' '))
            : result.Name;
        return name ? name : void 0;
      }
    }

    function getHTGI(htgi) {
      switch (htgi) {
        case 'enable':
          return 'Enable';
        case 'disable':
          return 'Disable';
        case 'auto':
          return 'Auto';
      }
    }

    function getBGProtection(pr) {
      switch (pr) {
        case '0':
          return 'Auto';
        case '1':
          return 'Always On';
        case '2':
          return 'Always Off';
      }
    }

    function formContriesList(obj38) {
      var result = {};
      return (
        _.each(obj38.CountryList, function(elem) {
          return (result[elem.code] = elem.name);
        }),
        result
      );
    }

    function formScanList(wifi) {
      var result = {},
        index = 1,
        obj133 = components.scanList.build({
          $scanList: wifi[133],
          $band: '2.4GHz',
        });
      _.each(obj133, function(value) {
        return (result[index++] = value);
      });
      var obj185 = components.scanList.build({
        $scanList: wifi[185],
        $band: '5GHz',
      });
      return (
        _.each(obj185, function(value) {
          return (result[index++] = value);
        }),
        result
      );
    }

    function getClientBand(range) {
      return '5 GHz' == range ? '5GHz' : '2.4GHz';
    }

    function getScanModeEnabled(sec) {
      if (sec) {
        var mode = sec.split('/')[0];
        switch (mode) {
          case 'NONE':
          case 'OPEN':
            return 'None';
          case 'SHARED':
          case 'WEP':
            return 'WEP';
          case 'WPA':
            return 'WPA-Enterprise';
          case 'WPA2':
            return 'WPA2-Enterprise';
          case 'WPA1WPA2':
            return 'WPA-WPA2-Enterprise';
          case 'WPAPSK':
            return 'WPA-Personal';
          case 'WPA2PSK':
            return 'WPA2-Personal';
          case 'WPAPSKWPA2PSK':
          case 'WPA1PSKWPA2PSK':
            return 'WPA-WPA2-Personal';
          default:
            return 'Unknown';
        }
      }
    }

    function getScanEncryptionType(sec) {
      if (sec) {
        var encr = sec.split('/')[1];
        return 'TKIPAES' == encr ? 'TKIP+AES' : encr;
      }
    }

    function getWDSEncryptionType(mode) {
      switch (mode) {
        case 'WEP':
          return 'WEP';
        case 'TKIP':
          return 'TKIP';
        case 'AES':
          return 'AES';
        default:
          return 'None';
      }
    }

    function getHideSSIDCommon(o, m) {
      return m && m[0] && _.has(m[0], 'HideSSID') ? void 0 : o.HideSSID;
    }

    function getWDSMode(mode) {
      switch (mode) {
        case '0':
          return 'Disabled';
        case '2':
          return 'Bridge';
        case '3':
          return 'Repeater';
      }
    }
    var _ = __webpack_require__(3),
      T = __webpack_require__(84).T;
    module.exports = T({
      '->': [
        'Radio',
        'RadioNumberOfEntries',
        'EndPoint',
        'EndPointNumberOfEntries',
        'ScanList',
        'WDS',
      ],
      $wifi: ':external',
      RadioNumberOfEntries: [
        '$wifi',
        function(w) {
          return radioNumberOfEntries(w);
        },
      ],
      Radio: {
        '->': !0,
        1: [
          '$root',
          function(r) {
            return hasRadioGHz(r.$wifi, '2.4GHz')
              ? components.radio.build({
                  $wifi: r.$wifi,
                  $band: '2.4GHz',
                })
              : void 0;
          },
        ],
        2: [
          '$root',
          function(r) {
            return hasRadioGHz(r.$wifi, '5GHz')
              ? components.radio.build({
                  $wifi: r.$wifi,
                  $band: '5GHz',
                })
              : void 0;
          },
        ],
      },
      CountriesList: [
        '$wifi',
        function(w) {
          return w[38] ? formContriesList(w[38]) : void 0;
        },
      ],
      ScanList: [
        '$wifi',
        function(w) {
          return w[133] || w[185] ? formScanList(w) : void 0;
        },
      ],
      WDS: [
        '$wifi',
        function(w) {
          return w[35]
            ? components.wds.build({
                $wifi: w[35],
              })
            : void 0;
        },
      ],
    });
    var components = {
        radio: T({
          '->': ['$mbssid', 'AccessPoint', 'EndPoint', 'WMM'],
          $wifi: ':external',
          $band: ':external',
          $prefix: [
            '$band',
            function(b) {
              return '2.4GHz' == b ? '' : '5G_';
            },
          ],
          $obj35: [
            '$wifi',
            function(w) {
              return w[35];
            },
          ],
          $obj37: [
            '$wifi',
            function(w) {
              return w[37];
            },
          ],
          $obj111: [
            '$wifi',
            function(w) {
              return w[111];
            },
          ],
          $mbssid: [
            '$obj35',
            '$prefix',
            function(o, p) {
              return o[p + 'mbssid'];
            },
          ],
          $addons: [
            '$obj35',
            '$prefix',
            function(o, p) {
              return o[p + 'addon_settings'];
            },
          ],
          $client: [
            '$wifi',
            '$band',
            function(wifi, band) {
              return components.client.build({
                $wifi: wifi,
                $band: band,
              });
            },
          ],
          OperatingFrequencyBand: [
            '$band',
            function(b) {
              return b;
            },
          ],
          Enable: [
            '$obj35',
            '$prefix',
            function(o, p) {
              return o[p + 'Radio'];
            },
          ],
          RegulatoryDomain: [
            '$obj35',
            function(o) {
              return o.CountryCode;
            },
          ],
          SupportedStandards: [
            '$obj35',
            '$prefix',
            '$band',
            function(o, p, b) {
              return supportedStandards(o[p + 'ModeAvailable'], b);
            },
          ],
          OperatingStandards: [
            '$obj35',
            '$prefix',
            '$band',
            function(o, p, b) {
              return operatingStandards(
                o[p + 'ModeAvailable'],
                o[p + 'WirelessMode'],
                b
              );
            },
          ],
          PossibleChannels: [
            '$obj37*',
            '$prefix',
            function(o, p) {
              return _.without(o[p + 'ChannelList'], 'auto');
            },
          ],
          AutoChannelSupported: [
            '$obj37*',
            '$prefix',
            function(o, p) {
              return _.contains(o[p + 'ChannelList'], 'auto');
            },
          ],
          AutoChannelEnable: [
            '$obj35',
            '$prefix',
            function(o, p) {
              return autoChannelEnable(o[p + 'Channel']);
            },
          ],
          AutoChannelReselect: [
            '$obj35',
            '$prefix',
            function(o, p) {
              return o[p + 'ReselectAutoChannel'];
            },
          ],
          AutoChannelReselectPeriod: [
            '$obj35',
            '$prefix',
            function(o, p) {
              return o[p + 'PeriodReselectChannel'];
            },
          ],
          Channel: [
            '$obj35',
            '$prefix',
            function(o, p) {
              return channel(o[p + 'Channel'], o[p + 'Auto_channel']);
            },
          ],
          HighChannelEnable: [
            '$obj35',
            function(o) {
              return o.allowHighChannels;
            },
          ],
          SSIDAdvertisementEnabledCommon: [
            '$obj35',
            '$mbssid',
            function(o, m) {
              return getHideSSIDCommon(o, m);
            },
          ],
          TransmitPowerSupported: [
            '$obj35',
            function(o) {
              return o.TxPowerAvailable ? o.TxPowerAvailable.join(',') : void 0;
            },
          ],
          SupportedChannelBandwidth: [
            '$obj35',
            '$prefix',
            function(o, p) {
              return getSupportedChannelBandwidth(o[p + 'BandwidthAvailable']);
            },
          ],
          OperatingChannelBandwidth: [
            '$addons*',
            '$obj35',
            '$prefix',
            function(a, o, p) {
              return getChannelBandwidth(
                o[p + 'BandwidthAvailable'],
                a.BandWidth
              );
            },
          ],
          Coexistence: [
            '$addons*',
            '$obj35',
            '$prefix',
            function(a, o, p) {
              return getCoexistence(a.BandWidth, o[p + 'BandwidthAvailable']);
            },
          ],
          CurrentChannelBandwidth: [
            '$addons*',
            function(a) {
              return a.CurrWidth ? a.CurrWidth : void 0;
            },
          ],
          CurrentChannelBandwidthDetail: [
            '$addons*',
            function(a) {
              return a.CheckWidthDetail ? a.CheckWidthDetail : void 0;
            },
          ],
          BeaconPeriod: [
            '$addons*',
            function(a) {
              return a.BeaconPeriod ? parseInt(a.BeaconPeriod) : void 0;
            },
          ],
          RTSThreshold: [
            '$addons*',
            function(a) {
              return a.RTSThreshold ? parseInt(a.RTSThreshold) : void 0;
            },
          ],
          FragmentationThreshold: [
            '$addons*',
            function(a) {
              return a.FragThreshold ? parseInt(a.FragThreshold) : void 0;
            },
          ],
          DTIMPeriod: [
            '$addons*',
            function(a) {
              return a.DtimPeriod ? parseInt(a.DtimPeriod) : void 0;
            },
          ],
          StationKeepAlive: [
            '$addons*',
            function(a) {
              return a.StationKeepAlive ? parseInt(a.StationKeepAlive) : void 0;
            },
          ],
          HTGI: [
            '$addons*',
            function(a) {
              return a.HTGI ? getHTGI(a.HTGI) : void 0;
            },
          ],
          AdaptivityMode: [
            '$addons*',
            function(a) {
              return a.AdaptivityMode;
            },
          ],
          Igmpdrop: [
            '$addons*',
            function(a) {
              return a.igmpdrop;
            },
          ],
          BGProtection: [
            '$addons*',
            function(a) {
              return getBGProtection(a.BGProtection);
            },
          ],
          TxPreamble: [
            '$addons*',
            function(a) {
              return a.TxPreamble;
            },
          ],
          TxBeamforming: [
            '$addons*',
            function(a) {
              return a.TxBeamforming;
            },
          ],
          TransmitPower: [
            '$addons*',
            function(a) {
              return a.TxPower;
            },
          ],
          AccessPointMax: [
            '$obj35',
            '$prefix',
            function(o, p) {
              return o[p + 'mbssidMax'];
            },
          ],
          AccessPointCurrent: [
            '$obj35',
            '$prefix',
            function(o, p) {
              return o[p + 'mbssidCur'];
            },
          ],
          AccessPointNumberOfEntries: [
            '$obj35',
            '$prefix',
            function(o, p) {
              return o[p + 'mbssidNum'];
            },
          ],
          AccessPoint: {
            '->': [
              '?',
              '$mbssid',
              '$index',
              ':',
              '$obj35',
              '$prefix',
              'Security',
              'WPS',
            ],
            '?': [
              '$parent',
              function(p) {
                return !!p.$mbssid;
              },
            ],
            '{$mbssid, $index}': [
              '$parent',
              function(p) {
                return p.$mbssid;
              },
            ],
            ':': [
              '$index',
              function(i) {
                return i + 1;
              },
            ],
            $obj35: [
              '$parent',
              function(p) {
                return p.$obj35;
              },
            ],
            $obj111: [
              '$parent',
              function(p) {
                return p.$obj111;
              },
            ],
            $prefix: [
              '$parent',
              function(p) {
                return p.$prefix;
              },
            ],
            SSID: [
              '$mbssid',
              function(m) {
                return m.SSID;
              },
            ],
            Broadcast: [
              '$mbssid',
              function(m) {
                return m.WifiBroadcast;
              },
            ],
            GuestAccess: [
              '$mbssid',
              function(m) {
                return m.GuestAccess;
              },
            ],
            BSSID: [
              '$mbssid',
              function(m) {
                return m.BSSID;
              },
            ],
            SSIDAdvertisementEnabled: [
              '$mbssid',
              function(m) {
                return m.HideSSID;
              },
            ],
            MaxAssociatedDevices: [
              '$mbssid',
              function(m) {
                return m.MaxStaNum ? parseInt(m.MaxStaNum) : void 0;
              },
            ],
            BandwidthRestricted: [
              '$mbssid',
              function(m) {
                return m.BwRestrict && m.BwRestrict >= 1024
                  ? m.BwRestrict / 1024
                  : m.BwRestrict;
              },
            ],
            CPEBlock: [
              '$mbssid',
              function(m) {
                return m.CPE_block;
              },
            ],
            ClientIsolation: [
              '$mbssid',
              function(m) {
                return m.Isolation;
              },
            ],
            NSG: [
              '$mbssid',
              function(m) {
                return m.nsg;
              },
            ],
            Security: {
              '->': !0,
              '?': [
                '$mbssid',
                function(m) {
                  return !_.isUndefined(m.AuthMode);
                },
              ],
              $obj35: [
                '$parent',
                function(p) {
                  return p.$obj35;
                },
              ],
              $prefix: [
                '$parent',
                function(p) {
                  return p.$prefix;
                },
              ],
              $mbssid: [
                '$parent',
                function(p) {
                  return p.$mbssid;
                },
              ],
              $key1Str: [
                '$mbssid',
                function(m) {
                  return m.Key1Str;
                },
              ],
              $enType: [
                '$mbssid',
                function(m) {
                  return m.EncrypType;
                },
              ],
              ModesSupported: [
                '$obj35',
                function(o) {
                  return authModesSupported(o.AuthAvailable);
                },
              ],
              ModeEnabled: [
                '$mbssid',
                function(m) {
                  return authModeEnabled(m.AuthMode, m.Key1Str);
                },
              ],
              PreSharedKey: [
                '$mbssid',
                function(m) {
                  return m.WPAPSK;
                },
              ],
              EncryptionType: [
                '$enType*',
                function(en) {
                  return 'TKIPAES' == en ? 'TKIP+AES' : en;
                },
              ],
              RekeyingInterval: [
                '$mbssid',
                function(m) {
                  return m.RekeyInterval ? parseInt(m.RekeyInterval) : void 0;
                },
              ],
              RadiusServerIPAddr: [
                '$mbssid',
                function(m) {
                  return m.RADIUS_Server;
                },
              ],
              RadiusServerPort: [
                '$mbssid',
                function(m) {
                  return m.RADIUS_Port ? parseInt(m.RADIUS_Port) : void 0;
                },
              ],
              RadiusSecret: [
                '$mbssid',
                function(m) {
                  return m.RADIUS_Key;
                },
              ],
              DefaultKeyID: [
                '$mbssid',
                function(m) {
                  return m.DefaultKeyID
                    ? (parseInt(m.DefaultKeyID) + 1).toString()
                    : void 0;
                },
              ],
              AccessPolicy: [
                '$mbssid',
                function(m) {
                  return m.AccessPolicy;
                },
              ],
              PreAuthentication: [
                '$mbssid',
                function(m) {
                  return m.PreAuth;
                },
              ],
              IEEE8021X: [
                '$mbssid',
                function(m) {
                  return m.IEEE8021X;
                },
              ],
              OpenWEP: [
                '$enType*',
                function(en) {
                  return 'WEP' == en;
                },
              ],
              OpenWEPType: [
                '$key1Str*',
                function(k1s) {
                  return _.contains([0, 5, 10], k1s.length)
                    ? 'WEP-64'
                    : 'WEP-128';
                },
              ],
              WEPasHEX: [
                '$key1Str*',
                function(k1s) {
                  return _.contains([10, 26], k1s.length);
                },
              ],
              WEPKey1: [
                '$mbssid',
                function(m) {
                  return m.Key1Str;
                },
              ],
              WEPKey1Type: [
                '$mbssid',
                function(m) {
                  return m.Key1Type;
                },
              ],
              WEPKey2: [
                '$mbssid',
                function(m) {
                  return m.Key2Str;
                },
              ],
              WEPKey2Type: [
                '$mbssid',
                function(m) {
                  return m.Key2Type;
                },
              ],
              WEPKey3: [
                '$mbssid',
                function(m) {
                  return m.Key3Str;
                },
              ],
              WEPKey3Type: [
                '$mbssid',
                function(m) {
                  return m.Key3Type;
                },
              ],
              WEPKey4: [
                '$mbssid',
                function(m) {
                  return m.Key4Str;
                },
              ],
              WEPKey4Type: [
                '$mbssid',
                function(m) {
                  return m.Key4Type;
                },
              ],
            },
            WPS: {
              '->': !0,
              '?': [
                '$wps',
                function(w) {
                  return !_.isUndefined(w);
                },
              ],
              $obj35: [
                '$parent',
                function(p) {
                  return p.$obj35;
                },
              ],
              $prefix: [
                '$parent',
                function(p) {
                  return p.$prefix;
                },
              ],
              $wps: [
                '$obj35',
                '$prefix',
                function(o, p) {
                  return o[p + 'wps'];
                },
              ],
              Enable: [
                '$wps',
                function(w) {
                  return w.WscEnable;
                },
              ],
              Configured: [
                '$wps',
                function(w) {
                  return w.WscConfigured;
                },
              ],
              Check: [
                '$wps',
                function(w) {
                  return w.WscCheck;
                },
              ],
              PIN: [
                '$wps',
                function(w) {
                  return w.WscPin;
                },
              ],
              DefaultPIN: [
                '$wps',
                function(w) {
                  return w.WscDefaultPin;
                },
              ],
              DevicePIN: [
                '$wps*',
                function(w) {
                  return w.WscDevPin;
                },
              ],
              ClientPIN: [
                '$wps*',
                function(w) {
                  return w.WscCliPin;
                },
              ],
              Authentication: [
                '$wps',
                function(w) {
                  return w.WscAuth;
                },
              ],
              Method: [
                '$wps*',
                function(w) {
                  return w.WscMethod;
                },
              ],
            },
          },
          EndPointNumberOfEntries: [
            '$client',
            function(c) {
              return _.size(c) ? 1 : 0;
            },
          ],
          EndPoint: {
            '->': !0,
            $client: [
              '$parent',
              function(p) {
                return p.$client;
              },
            ],
            1: [
              '$client',
              function(c) {
                return _.size(c) ? c : void 0;
              },
            ],
          },
          WMM: [
            '$obj111*',
            function(obj111) {
              return components.wmm.build({
                $obj111: obj111,
              });
            },
          ],
        }),
        client: T({
          '->': ['$obj35', 'Security', 'MacAddressClone'],
          $wifi: ':external',
          $band: ':external',
          $obj35: [
            '$wifi',
            function(w) {
              return w[35];
            },
          ],
          $obj111: [
            '$wifi',
            function(w) {
              return w[111];
            },
          ],
          $apcli: [
            '$obj35*',
            '$band*',
            function(o, b) {
              return '2.4GHz' == b ? o.apcli : o['5G_apcli'];
            },
          ],
          Enable: [
            '$apcli*',
            function(a) {
              return a.ApCliEnable;
            },
          ],
          Connect: [
            '$apcli*',
            function(a) {
              return a.ApCliConnect;
            },
          ],
          SSID: [
            '$apcli*',
            function(a) {
              return a.ApCliSsid;
            },
          ],
          BSSID: [
            '$apcli*',
            function(a) {
              return a.ApCliBssid;
            },
          ],
          Band: [
            '$apcli*',
            '$band*',
            function(a, b) {
              return a.ApCliRangeFreq ? getClientBand(a.ApCliRangeFreq) : b;
            },
          ],
          Security: {
            '->': !0,
            '?': [
              '$parent',
              function(p) {
                return !!p.$apcli;
              },
            ],
            $obj35: [
              '$parent',
              function(p) {
                return p.$obj35;
              },
            ],
            $apcli: [
              '$parent',
              function(p) {
                return p.$apcli;
              },
            ],
            $key1Str: [
              '$apcli',
              function(a) {
                return a.ApCliKey1Str;
              },
            ],
            ModesSupported: [
              '$obj35',
              function(o) {
                return authModesSupported(o.AuthAvailable);
              },
            ],
            ModeEnabled: [
              '$apcli*',
              function(a) {
                return authModeEnabled(a.ApCliAuthMode, a.ApCliKey1Str);
              },
            ],
            PreSharedKey: [
              '$apcli*',
              function(a) {
                return a.ApCliWPAPSK;
              },
            ],
            EncryptionType: [
              '$apcli*',
              function(a) {
                return a.ApCliEncrypType;
              },
            ],
            OpenWEP: [
              '$apcli*',
              function(a) {
                return a.ApCliEncrypType ? 'WEP' == a.ApCliEncrypType : void 0;
              },
            ],
            OpenWEPType: [
              '$key1Str*',
              function(k1s) {
                return _.contains([0, 5, 10], k1s.length)
                  ? 'WEP-64'
                  : 'WEP-128';
              },
            ],
            WEPasHEX: [
              '$key1Str*',
              function(k1s) {
                return _.contains([10, 26], k1s.length);
              },
            ],
            DefaultKeyID: [
              '$apcli*',
              function(a) {
                return a.ApCliDefaultKeyId;
              },
            ],
            WEPKey1: [
              '$apcli*',
              function(a) {
                return a.ApCliKey1Str;
              },
            ],
            WEPKey1Type: [
              '$apcli*',
              function(a) {
                return a.ApCliKey1Type;
              },
            ],
            WEPKey2: [
              '$apcli*',
              function(a) {
                return a.ApCliKey2Str;
              },
            ],
            WEPKey2Type: [
              '$apcli*',
              function(a) {
                return a.ApCliKey2Type;
              },
            ],
            WEPKey3: [
              '$apcli*',
              function(a) {
                return a.ApCliKey3Str;
              },
            ],
            WEPKey3Type: [
              '$apcli*',
              function(a) {
                return a.ApCliKey3Type;
              },
            ],
            WEPKey4: [
              '$apcli*',
              function(a) {
                return a.ApCliKey4Str;
              },
            ],
            WEPKey4Type: [
              '$apcli*',
              function(a) {
                return a.ApCliKey4Type;
              },
            ],
          },
          MacAddressClone: {
            '->': !0,
            '?': [
              '$parent',
              function(p) {
                return !!p.$apcli && !!p.$apcli.ApCliMCMode;
              },
            ],
            $apcli: [
              '$parent',
              function(p) {
                return p.$apcli;
              },
            ],
            Mode: [
              '$apcli*',
              function(a) {
                return a.ApCliMCMode;
              },
            ],
            Address: [
              '$apcli*',
              function(a) {
                return 'off' == a.ApCliMCMode ? '' : a.ApCliMCAddr;
              },
            ],
          },
        }),
        wmm: T({
          '->': ['$obj111', 'AP', 'EP'],
          $obj111: ':external',
          Enable: [
            '$obj111',
            function(o) {
              return o.WmmCapable;
            },
          ],
          Mode: [
            '$obj111',
            function(o) {
              return o.WmmMode;
            },
          ],
          AP: {
            '->': !0,
            $obj111: [
              '$parent',
              function(p) {
                return p.$obj111;
              },
            ],
            1: [
              '$obj111',
              function(obj111) {
                return components.wmmPoint.build({
                  $obj111: obj111,
                  $mode: 'ap',
                });
              },
            ],
          },
          EP: {
            '->': !0,
            $obj111: [
              '$parent',
              function(p) {
                return p.$obj111;
              },
            ],
            1: [
              '$obj111',
              function(obj111) {
                return components.wmmPoint.build({
                  $obj111: obj111,
                  $mode: 'ep',
                });
              },
            ],
          },
        }),
        wmmPoint: T({
          '->': ['$obj111', '$mode', 'AC'],
          $obj111: ':external',
          $mode: ':external',
          $categories: ['BK', 'BE', 'VI', 'VO'],
          ACNumberOfEntries: [
            '$categories',
            function(cs) {
              return cs.length;
            },
          ],
          AC: {
            '->': !0,
            '?': [
              '$parent',
              function(p) {
                return !!p.$obj111;
              },
            ],
            $obj111: [
              '$parent',
              function(p) {
                return p.$obj111;
              },
            ],
            $mode: [
              '$parent',
              function(p) {
                return p.$mode;
              },
            ],
            $categories: [
              '$parent',
              function(p) {
                return p.$categories;
              },
            ],
            $acs: [
              '$obj111',
              '$mode',
              function(o, m) {
                return 'ap' == m ? o.ap : o.sta;
              },
            ],
            '{$ac, $index}': [
              '$acs',
              function(acs) {
                return acs;
              },
            ],
            ':': [
              '$index',
              function(i) {
                return i + 1;
              },
            ],
            AccessCategory: [
              '$categories',
              '$index',
              function(cs, index) {
                return cs[index];
              },
            ],
            AIFSN: [
              '$ac*',
              function(ac) {
                return ac.aifsn ? parseInt(ac.aifsn) : void 0;
              },
            ],
            ECWMin: [
              '$ac*',
              function(ac) {
                return ac.cwmin ? parseInt(ac.cwmin) : void 0;
              },
            ],
            ECWMax: [
              '$ac*',
              function(ac) {
                return ac.cwmax ? parseInt(ac.cwmax) : void 0;
              },
            ],
            TxOpMax: [
              '$ac*',
              function(ac) {
                return ac.txop ? parseInt(ac.txop) : void 0;
              },
            ],
            AcmPolicy: [
              '$ac*',
              function(ac) {
                return ac.acm ? '0' != ac.acm : void 0;
              },
            ],
            AckPolicy: [
              '$ac*',
              function(ac) {
                return ac.ack ? '0' != ac.ack : void 0;
              },
            ],
          },
        }),
        scanList: T({
          '->': ['$obj35', 'Security'],
          $scanList: ':external',
          $band: ':external',
          '{$elem, $index}': [
            '$scanList',
            function(sl) {
              return sl;
            },
          ],
          ':': [
            '$index',
            function(i) {
              return parseInt(i) + 1;
            },
          ],
          SSID: [
            '$elem*',
            function(e) {
              return e.ssid;
            },
          ],
          BSSID: [
            '$elem*',
            function(e) {
              return e.bssid;
            },
          ],
          Mode: [
            '$elem*',
            function(e) {
              return '802.' + e.wmode;
            },
          ],
          Channel: [
            '$elem*',
            function(e) {
              return e.channel ? parseInt(e.channel) : void 0;
            },
          ],
          AdvancedChannel: [
            '$elem*',
            function(e) {
              return e.nt;
            },
          ],
          ModeEnabled: [
            '$elem*',
            function(e) {
              return getScanModeEnabled(e.sec);
            },
          ],
          EncryptionType: [
            '$elem*',
            function(e) {
              return getScanEncryptionType(e.sec);
            },
          ],
          SignalStrength: [
            '$elem*',
            function(e) {
              return e.sig;
            },
          ],
          Band: [
            '$band',
            function(b) {
              return b;
            },
          ],
        }),
        wds: T({
          '->': ['$wifi', '$wds', '?', 'Mac'],
          '?': [
            '$wds',
            function(w) {
              return !!w;
            },
          ],
          $wifi: ':external',
          $wds: [
            '$wifi',
            function(o) {
              return o.wds;
            },
          ],
          Mode: [
            '$wds*',
            function(w) {
              return getWDSMode(w.WdsEnable);
            },
          ],
          EncryptionType: [
            '$wds*',
            function(w) {
              return getWDSEncryptionType(w.WdsEncrypType);
            },
          ],
          EncryptionKey: [
            '$wds*',
            function(w) {
              return w.WdsKey;
            },
          ],
          MacNumberOfEntries: 4,
          Mac: {
            '->': !0,
            1: [
              '$parent',
              function(p) {
                return p.$wds.Wds1Mac;
              },
            ],
            2: [
              '$parent',
              function(p) {
                return p.$wds.Wds2Mac;
              },
            ],
            3: [
              '$parent',
              function(p) {
                return p.$wds.Wds3Mac;
              },
            ],
            4: [
              '$parent',
              function(p) {
                return p.$wds.Wds4Mac;
              },
            ],
          },
        }),
      },
      standardsModes = {
        '802.11 A': 'a',
        '802.11 B': 'b',
        '802.11 G': 'g',
        '802.11 N': 'n',
        '802.11 AC': 'ac',
        '802.11 B/G mixed': 'bg',
        '802.11 G/N mixed': 'gn',
        '802.11 A/N mixed': 'an',
        '802.11 B/G/N mixed': 'bgn',
        '802.11 B/G/N mixed + 256QAM': 'bgnac',
        '802.11 AC/N mixed': 'acn',
        '802.11 AC/A/N mixed': 'acan',
      },
      authModes = {
        OPEN: 'None',
        'WEP-64': 'WEP-64',
        'WEP-128': 'WEP-128',
        WPAPSK: 'WPA-Personal',
        WPA2PSK: 'WPA2-Personal',
        WPAPSKWPA2PSK: 'WPA-WPA2-Personal',
        WPA: 'WPA-Enterprise',
        WPA2: 'WPA2-Enterprise',
        WPA1WPA2: 'WPA-WPA2-Enterprise',
      };
  },
  ,
  function(module, exports, __webpack_require__) {
    'use strict';

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule
        ? obj
        : {
            default: obj,
          };
    }

    function primaryAP(r) {
      return r.AccessPoint && 0 != r.AccessPointNumberOfEntries
        ? _.find(r.AccessPoint, function(ap, inst) {
            return _.size(r.AccessPoint) == parseInt(inst);
          })
        : void 0;
    }

    function channel(r) {
      return r.AutoChannelEnable
        ? 'auto'
        : r.Channel
          ? r.Channel.toString()
          : void 0;
    }

    function getWDSEncryptionType(mode) {
      switch (mode) {
        case 'WEP':
          return 'WEP';
        case 'TKIP':
          return 'TKIP';
        case 'AES':
          return 'AES';
        default:
          return 'NONE';
      }
    }

    function getWDSMode(mode) {
      switch (mode) {
        case 'Disabled':
          return '0';
        case 'Bridge':
          return '2';
        case 'Repeater':
          return '3';
      }
    }

    function authMode(mode) {
      var modes = {
        None: 'OPEN',
        WEP: 'SHARED',
        'WEP-64': 'SHARED',
        'WEP-128': 'SHARED',
        'WPA-Enterprise': 'WPA',
        'WPA-Personal': 'WPAPSK',
        'WPA2-Enterprise': 'WPA2',
        'WPA2-Personal': 'WPA2PSK',
        'WPA-WPA2-Enterprise': 'WPA1WPA2',
        'WPA-WPA2-Personal': 'WPAPSKWPA2PSK',
      };
      return modes[mode];
    }

    function encryptionType(security) {
      switch (security.EncryptionType) {
        case 'TKIP+AES':
          return 'TKIPAES';
        case 'TKIP':
        case 'WEP':
        case 'AES':
          return security.EncryptionType;
        default:
          return security.OpenWEP ? 'WEP' : 'NONE';
      }
    }

    function getWEPKeyType(security) {
      return _.isUndefined(security.WEPasHEX) || _.isNull(security.WEPasHEX)
        ? void 0
        : security.WEPasHEX
          ? '0'
          : '1';
    }

    function getCliWEPKeyType(security) {
      return security.WEPKey1 && '' != security.WEPKey1
        ? security.WEPasHEX
          ? '0'
          : '1'
        : '';
    }

    function getBandwidthIDEndPoint(advChannel) {
      var bandwidth;
      switch (advChannel) {
        case 'NONE':
          bandwidth = '0';
          break;
        case 'BELOW':
          bandwidth = '1';
          break;
        case 'ABOVE':
          bandwidth = '2';
          break;
        default:
          bandwidth = '0';
      }
      return bandwidth;
    }

    function getSecondChannel(r, ep, prefix) {
      return _.isUndefined(ep) ||
        '5G_' == prefix ||
        _.isUndefined(ep.AdvancedChannel) ||
        _.isNull(ep.AdvancedChannel)
        ? 'Auto'
        : void 0;
    }

    function getBandwidthWithCoex(r) {
      var res,
        bandwidth = r.OperatingChannelBandwidth,
        coex = r.Coexistence;
      switch (bandwidth) {
        case '20MHz':
          res = '0';
          break;
        case '20/40MHz':
          res = coex ? '1' : '3';
          break;
        case '20/40/80MHz':
          res = coex ? '5' : '4';
          break;
        case '20/40/80/8080MHz':
          res = coex ? '9' : '7';
          break;
        case '20/40/80/160MHz':
          res = coex ? '10' : '8';
      }
      return res;
    }

    function getBandWidth(r, ep, prefix) {
      return _.isUndefined(r.OperatingChannelBandwidth) ||
        _.isNull(r.OperatingChannelBandwidth)
        ? '5G_' == prefix ||
          _.isUndefined(ep.AdvancedChannel) ||
          _.isNull(ep.AdvancedChannel)
          ? void 0
          : getBandwidthIDEndPoint(ep.AdvancedChannel)
        : getBandwidthWithCoex(r);
    }

    function getClientBand(range) {
      return '5GHz' == range ? '5 GHz' : '2.4 GHz';
    }

    function getHTGI(htgi) {
      switch (htgi) {
        case 'Enable':
          return 'enable';
        case 'Disable':
          return 'disable';
        case 'Auto':
          return 'auto';
      }
    }

    function getBGProtection(pr) {
      switch (pr) {
        case 'Auto':
          return '0';
        case 'Always On':
          return '1';
        case 'Always Off':
          return '2';
      }
    }

    function onlyWMM(point) {
      return _.every(point, function(elem, key) {
        return _.contains(wmmParamsList, key);
      });
    }

    function onlyWPS(point) {
      var keys = _.keys(point);
      return 1 == keys.length && 'WPS' == keys[0];
    }
    var _defineProperty2 = __webpack_require__(94),
      _defineProperty3 = _interopRequireDefault(_defineProperty2),
      _ = __webpack_require__(3),
      T = __webpack_require__(84).T;
    module.exports = T({
      '->': !0,
      $wifi: ':external',
      35: {
        '->': !0,
        '?': [
          '$parent',
          function(p) {
            return !!p.$wifi.Radio || !!p.$wifi.EndPoint || !!p.$wifi.WDS;
          },
        ],
        $return: [
          '$parent',
          function(p) {
            return _.extend(
              {},
              components.obj35('2.4GHz').build({
                $wifi: p.$wifi,
              }),
              components.obj35('5GHz').build({
                $wifi: p.$wifi,
              }),
              components.obj35wds.build({
                $wifi: p.$wifi,
              })
            );
          },
        ],
      },
      111: [
        '$wifi',
        function($wifi) {
          if ($wifi.Radio && $wifi.Radio[1] && $wifi.Radio[1].WMM) {
            var wmm = $wifi.Radio[1].WMM;
            return components.obj111().build({
              $wmm: wmm,
            });
          }
        },
      ],
    });
    var components = {
        obj35wds: T({
          '->': ['$wifi', '?', 'wds'],
          $wifi: ':external',
          '?': [
            '$wifi',
            function(w) {
              return !!w.WDS;
            },
          ],
          wds: {
            '->': !0,
            $wds: [
              '$parent',
              function(p) {
                return p.$wifi.WDS;
              },
            ],
            WdsEnable: [
              '$wds',
              function(w) {
                return getWDSMode(w.Mode);
              },
            ],
            WdsKey: [
              '$wds',
              function(w) {
                return w.EncryptionKey;
              },
            ],
            WdsEncrypType: [
              '$wds',
              function(w) {
                return getWDSEncryptionType(w.EncryptionType);
              },
            ],
            Wds1Mac: [
              '$wds',
              function(w) {
                return w.Mac[1];
              },
            ],
            Wds2Mac: [
              '$wds',
              function(w) {
                return w.Mac[2];
              },
            ],
            Wds3Mac: [
              '$wds',
              function(w) {
                return w.Mac[3];
              },
            ],
            Wds4Mac: [
              '$wds',
              function(w) {
                return w.Mac[4];
              },
            ],
          },
        }),
        obj35: function(band) {
          function hasProp(object, propName) {
            return (
              !_.isUndefined(object[propName]) && !_.isNull(object[propName])
            );
          }
          var _T,
            prefix = '2.4GHz' == band ? '' : '5G_';
          return T(
            ((_T = {
              '->': [
                '$wifi',
                '$radio',
                '$endpoint',
                '?',
                prefix + 'mbssid',
                prefix + 'addon_settings',
                prefix + 'wps',
                prefix + 'apcli',
              ],
              '?': [
                '$radio',
                '$endpoint',
                function(r, ep) {
                  return !(!r && !ep);
                },
              ],
              $wifi: ':external',
              $radio: [
                '$wifi',
                function(w) {
                  return w.Radio
                    ? _.find(w.Radio, function(r) {
                        return r.OperatingFrequencyBand == band;
                      })
                    : void 0;
                },
              ],
              $endpoint: [
                '$radio',
                function(r) {
                  return r && r.EndPoint ? r.EndPoint[1] : void 0;
                },
              ],
              $prAP: [
                '$radio*',
                function(r) {
                  return primaryAP(r);
                },
              ],
              $prAPSec: [
                '$prAP*',
                function(a) {
                  return a.Security;
                },
              ],
            }),
            _defineProperty3['default'](_T, prefix + 'Radio', [
              '$radio*',
              function(r) {
                return r.Enable;
              },
            ]),
            _defineProperty3['default'](_T, 'CountryCode', [
              '$radio*',
              function(r) {
                return r.RegulatoryDomain;
              },
            ]),
            _defineProperty3['default'](_T, prefix + 'WirelessMode', [
              '$radio*',
              function(r) {
                return standardsID[r.OperatingStandards];
              },
            ]),
            _defineProperty3['default'](_T, prefix + 'Channel', [
              '$radio*',
              function(r) {
                return channel(r);
              },
            ]),
            _defineProperty3['default'](_T, 'allowHighChannels', [
              '$radio*',
              function(r) {
                return r.HighChannelEnable;
              },
            ]),
            _defineProperty3['default'](_T, prefix + 'HideSSID', [
              '$radio*',
              function(r) {
                return r.SSIDAdvertisementEnabledCommon;
              },
            ]),
            _defineProperty3['default'](_T, prefix + 'ReselectAutoChannel', [
              '$radio*',
              function(r) {
                return r.AutoChannelReselect;
              },
            ]),
            _defineProperty3['default'](_T, prefix + 'PeriodReselectChannel', [
              '$radio*',
              function(r) {
                return r.AutoChannelReselectPeriod;
              },
            ]),
            _defineProperty3['default'](_T, prefix + 'mbssidNum', [
              '$radio*',
              function(r) {
                return r.AccessPointNumberOfEntries;
              },
            ]),
            _defineProperty3['default'](_T, prefix + 'mbssidMax', [
              '$radio*',
              function(r) {
                return r.AccessPointMax;
              },
            ]),
            _defineProperty3['default'](_T, prefix + 'mbssidCur', [
              '$radio*',
              function(r) {
                return r.AccessPointCurrent;
              },
            ]),
            _defineProperty3['default'](_T, prefix + 'mbssid', {
              '->': !0,
              '?': [
                '$parent',
                function(p) {
                  return !(
                    !p.$radio ||
                    !p.$radio.AccessPoint ||
                    _.isEmpty(p.$radio.AccessPoint) ||
                    onlyWMM(p.$radio.AccessPoint[1]) ||
                    onlyWPS(p.$radio.AccessPoint)
                  );
                },
              ],
              '{$ap}': [
                '$parent',
                function(p) {
                  return p.$radio.AccessPoint;
                },
              ],
              $security: [
                '$ap',
                function(a) {
                  return a.Security;
                },
              ],
              SSID: [
                '$ap',
                function(a) {
                  return a.SSID;
                },
              ],
              BSSID: [
                '$ap',
                function(a) {
                  return a.BSSID;
                },
              ],
              HideSSID: [
                '$ap',
                function(a) {
                  return a.SSIDAdvertisementEnabled;
                },
              ],
              Isolation: [
                '$ap',
                function(a) {
                  return a.ClientIsolation;
                },
              ],
              WifiBroadcast: [
                '$ap',
                function(a) {
                  return a.Broadcast;
                },
              ],
              MaxStaNum: [
                '$ap',
                function(a) {
                  return hasProp(a, 'MaxAssociatedDevices')
                    ? a.MaxAssociatedDevices.toString()
                    : void 0;
                },
              ],
              BwRestrict: [
                '$ap',
                function(a) {
                  return a.BandwidthRestricted
                    ? 1024 * a.BandwidthRestricted
                    : a.BandwidthRestricted;
                },
              ],
              CPE_block: [
                '$ap',
                function(a) {
                  return a.CPEBlock;
                },
              ],
              GuestAccess: [
                '$ap',
                function(a) {
                  return a.GuestAccess;
                },
              ],
              nsg: [
                '$ap',
                function(a) {
                  return a.NSG;
                },
              ],
              AuthMode: [
                '$security*',
                function(s) {
                  return authMode(s.ModeEnabled);
                },
              ],
              WPAPSK: [
                '$security*',
                function(s) {
                  return s.PreSharedKey;
                },
              ],
              EncrypType: [
                '$security*',
                function(s) {
                  return encryptionType(s);
                },
              ],
              DefaultKeyID: [
                '$security*',
                function(s) {
                  return s.DefaultKeyID
                    ? (parseInt(s.DefaultKeyID) - 1).toString()
                    : void 0;
                },
              ],
              AccessPolicy: [
                '$security*',
                function(s) {
                  return s.AccessPolicy;
                },
              ],
              PreAuth: [
                '$security*',
                function(s) {
                  return s.PreAuthentication;
                },
              ],
              IEEE8021X: [
                '$security*',
                function(s) {
                  return s.IEEE8021X;
                },
              ],
              Key1Str: [
                '$security*',
                function(s) {
                  return s.WEPKey1;
                },
              ],
              Key1Type: [
                '$security*',
                function(s) {
                  return getWEPKeyType(s);
                },
              ],
              Key2Str: [
                '$security*',
                function(s) {
                  return s.WEPKey2;
                },
              ],
              Key2Type: [
                '$security*',
                function(s) {
                  return getWEPKeyType(s);
                },
              ],
              Key3Str: [
                '$security*',
                function(s) {
                  return s.WEPKey3;
                },
              ],
              Key3Type: [
                '$security*',
                function(s) {
                  return getWEPKeyType(s);
                },
              ],
              Key4Str: [
                '$security*',
                function(s) {
                  return s.WEPKey4;
                },
              ],
              Key4Type: [
                '$security*',
                function(s) {
                  return getWEPKeyType(s);
                },
              ],
              RekeyInterval: [
                '$security*',
                function(s) {
                  return hasProp(s, 'RekeyingInterval')
                    ? s.RekeyingInterval.toString()
                    : void 0;
                },
              ],
              RADIUS_Server: [
                '$security*',
                function(s) {
                  return s.RadiusServerIPAddr;
                },
              ],
              RADIUS_Port: [
                '$security*',
                function(s) {
                  return s.RadiusServerPort
                    ? s.RadiusServerPort.toString()
                    : void 0;
                },
              ],
              RADIUS_Key: [
                '$security*',
                function(s) {
                  return s.RadiusSecret;
                },
              ],
            }),
            _defineProperty3['default'](_T, prefix + 'addon_settings', {
              '->': ['$radio', '?'],
              $radio: [
                '$parent',
                function(p) {
                  return p.$radio;
                },
              ],
              $endpoint: [
                '$parent',
                function(p) {
                  return p.$endpoint;
                },
              ],
              '?': [
                '$radio',
                '$endpoint',
                function(r, ep) {
                  return (
                    _.some(addonSettingsParamsList, function(key) {
                      return _.has(r, key);
                    }) ||
                    (_.some(addonSettingsParamsList, function(key) {
                      return _.has(ep, key);
                    }) &&
                      '5G_' != prefix)
                  );
                },
              ],
              BandWidth: [
                '$radio*',
                '$endpoint',
                function(r, ep) {
                  return getBandWidth(r, ep, prefix);
                },
              ],
              SecondChannel: [
                '$radio*',
                '$endpoint',
                function(r, ep) {
                  return getSecondChannel(r, ep, prefix);
                },
              ],
              BeaconPeriod: [
                '$radio*',
                function(r) {
                  return hasProp(r, 'BeaconPeriod')
                    ? r.BeaconPeriod.toString()
                    : void 0;
                },
              ],
              RTSThreshold: [
                '$radio*',
                function(r) {
                  return hasProp(r, 'RTSThreshold')
                    ? r.RTSThreshold.toString()
                    : void 0;
                },
              ],
              FragThreshold: [
                '$radio*',
                function(r) {
                  return hasProp(r, 'FragmentationThreshold')
                    ? r.FragmentationThreshold.toString()
                    : void 0;
                },
              ],
              DtimPeriod: [
                '$radio*',
                function(r) {
                  return hasProp(r, 'DTIMPeriod')
                    ? r.DTIMPeriod.toString()
                    : void 0;
                },
              ],
              StationKeepAlive: [
                '$radio*',
                function(r) {
                  return hasProp(r, 'StationKeepAlive')
                    ? r.StationKeepAlive.toString()
                    : void 0;
                },
              ],
              HTGI: [
                '$radio*',
                function(r) {
                  return _.isUndefined(r.HTGI) ? void 0 : getHTGI(r.HTGI);
                },
              ],
              AdaptivityMode: [
                '$radio*',
                function(r) {
                  return r.AdaptivityMode;
                },
              ],
              igmpdrop: [
                '$radio*',
                function(r) {
                  return r.Igmpdrop;
                },
              ],
              BGProtection: [
                '$radio*',
                function(r) {
                  return getBGProtection(r.BGProtection);
                },
              ],
              TxPreamble: [
                '$radio*',
                function(r) {
                  return r.TxPreamble;
                },
              ],
              TxBeamforming: [
                '$radio*',
                function(r) {
                  return r.TxBeamforming;
                },
              ],
              TxPower: [
                '$radio*',
                function(r) {
                  return r.TransmitPower;
                },
              ],
            }),
            _defineProperty3['default'](_T, prefix + 'wps', {
              '->': ['$wps', '?'],
              $prAP: [
                '$parent',
                function(p) {
                  return p.$prAP;
                },
              ],
              $wps: [
                '$prAP*',
                function(ap) {
                  return ap.WPS;
                },
              ],
              '?': [
                '$wps',
                function(w) {
                  return !!w;
                },
              ],
              WscEnable: [
                '$wps*',
                function(w) {
                  return w.Enable;
                },
              ],
              WscConfigured: [
                '$wps*',
                function(w) {
                  return w.Configured;
                },
              ],
              WscCheck: [
                '$wps*',
                function(w) {
                  return w.Check;
                },
              ],
              WscPin: [
                '$wps*',
                function(w) {
                  return w.PIN;
                },
              ],
              WscDefaultPin: [
                '$wps*',
                function(w) {
                  return w.DefaultPIN;
                },
              ],
              WscDevPin: [
                '$wps*',
                function(w) {
                  return w.DevicePIN;
                },
              ],
              WscCliPin: [
                '$wps*',
                function(w) {
                  return w.ClientPIN;
                },
              ],
              WscAuth: [
                '$wps*',
                function(w) {
                  return w.Authentication;
                },
              ],
              WscMethod: [
                '$wps*',
                function(w) {
                  return w.Method;
                },
              ],
            }),
            _defineProperty3['default'](_T, prefix + 'apcli', {
              '->': !0,
              '?': [
                '$parent',
                function(p) {
                  return !!p.$endpoint && !onlyWMM(p.$endpoint);
                },
              ],
              $endpoint: [
                '$parent',
                function(p) {
                  return p.$endpoint;
                },
              ],
              $sec: [
                '$endpoint*',
                function(ep) {
                  return ep.Security;
                },
              ],
              ApCliEnable: [
                '$endpoint*',
                function(ep) {
                  return ep.Enable;
                },
              ],
              ApCliConnect: [
                '$endpoint*',
                function(ep) {
                  return ep.Connect;
                },
              ],
              ApCliSsid: [
                '$endpoint*',
                function(ep) {
                  return ep.SSID;
                },
              ],
              ApCliBssid: [
                '$endpoint*',
                function(ep) {
                  return ep.BSSID;
                },
              ],
              ApCliRangeFreq: [
                '$endpoint*',
                function(ep) {
                  return ep.Band ? getClientBand(ep.Band) : '2.4 GHz';
                },
              ],
              ApCliMCMode: [
                '$endpoint*',
                function(ep) {
                  return ep.MacAddressClone ? ep.MacAddressClone.Mode : void 0;
                },
              ],
              ApCliMCAddr: [
                '$endpoint*',
                function(ep) {
                  return ep.MacAddressClone
                    ? ep.MacAddressClone.Address || ''
                    : void 0;
                },
              ],
              ApCliAuthMode: [
                '$sec*',
                function(s) {
                  return authMode(s.ModeEnabled);
                },
              ],
              ApCliWPAPSK: [
                '$sec*',
                function(s) {
                  return s.PreSharedKey;
                },
              ],
              ApCliEncrypType: [
                '$sec*',
                function(s) {
                  return encryptionType(s);
                },
              ],
              ApCliDefaultKeyId: [
                '$sec*',
                function(s) {
                  return s.DefaultKeyID;
                },
              ],
              ApCliKey1Str: [
                '$sec*',
                function(s) {
                  return s.WEPKey1;
                },
              ],
              ApCliKey1Type: [
                '$sec*',
                function(s) {
                  return getCliWEPKeyType(s);
                },
              ],
              ApCliKey2Str: [
                '$sec*',
                function(s) {
                  return s.WEPKey2;
                },
              ],
              ApCliKey2Type: [
                '$sec*',
                function(s) {
                  return getCliWEPKeyType(s);
                },
              ],
              ApCliKey3Str: [
                '$sec*',
                function(s) {
                  return s.WEPKey3;
                },
              ],
              ApCliKey3Type: [
                '$sec*',
                function(s) {
                  return getCliWEPKeyType(s);
                },
              ],
              ApCliKey4Str: [
                '$sec*',
                function(s) {
                  return s.WEPKey4;
                },
              ],
              ApCliKey4Type: [
                '$sec*',
                function(s) {
                  return getCliWEPKeyType(s);
                },
              ],
            }),
            _T)
          );
        },
        obj111: function() {
          function ac() {
            return T({
              '->': !0,
              $ac: ':external',
              '{$raw}': [
                '$ac',
                function(a) {
                  return a;
                },
              ],
              aifsn: [
                '$raw*',
                function(r) {
                  return _.has(r, 'AIFSN') ? r.AIFSN.toString() : void 0;
                },
              ],
              cwmin: [
                '$raw*',
                function(r) {
                  return _.has(r, 'ECWMin') ? r.ECWMin.toString() : void 0;
                },
              ],
              cwmax: [
                '$raw*',
                function(r) {
                  return _.has(r, 'ECWMax') ? r.ECWMax.toString() : void 0;
                },
              ],
              txop: [
                '$raw*',
                function(r) {
                  return _.has(r, 'TxOpMax') ? r.TxOpMax.toString() : void 0;
                },
              ],
              acm: [
                '$raw*',
                function(r) {
                  return _.has(r, 'AcmPolicy')
                    ? r.AcmPolicy
                      ? '1'
                      : '0'
                    : void 0;
                },
              ],
              ack: [
                '$raw*',
                function(r) {
                  return _.has(r, 'AckPolicy')
                    ? r.AckPolicy
                      ? '1'
                      : '0'
                    : void 0;
                },
              ],
            });
          }
          return T({
            '->': ['$wmm', 'ap', 'sta'],
            $wmm: ':external',
            WmmCapable: [
              '$wmm',
              function(wmm) {
                return wmm.Enable;
              },
            ],
            WmmMode: [
              '$wmm',
              function(wmm) {
                return wmm.Mode;
              },
            ],
            ap: {
              '->': !0,
              $return: [
                '$parent',
                function(p) {
                  return ac().build({
                    $ac: p.$wmm.AP[1].AC,
                  });
                },
              ],
            },
            sta: {
              '->': !0,
              $return: [
                '$parent',
                function(p) {
                  return ac().build({
                    $ac: p.$wmm.EP[1].AC,
                  });
                },
              ],
            },
          });
        },
      },
      standardsID = {
        b: '1',
        g: '4',
        n: '15',
        bg: '0',
        gn: '7',
        bgn: '9',
        bgnac: '14',
        a: '5',
        an: '12',
        ac: '18',
        acn: '21',
        acan: '24',
      },
      addonSettingsParamsList = [
        'OperatingChannelBandwidth',
        'AdvancedChannel',
        'BeaconPeriod',
        'RTSThreshold',
        'FragmentationThreshold',
        'DTIMPeriod',
        'StationKeepAlive',
        'HTGI',
        'BandWidth',
        'AdaptivityMode',
        'Igmpdrop',
        'BGProtection',
        'TxBeamforming',
        'TxPreamble',
        'TransmitPower',
      ],
      wmmParamsList = ['WMMEnable', 'WMMMode', 'AC'];
  },
  function(module, exports, __webpack_require__) {
    'use strict';

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule
        ? obj
        : {
            default: obj,
          };
    }
    var _defineProperty = __webpack_require__(95),
      _defineProperty2 = _interopRequireDefault(_defineProperty);
    (exports['default'] = function(obj, key, value) {
      return (
        key in obj
          ? _defineProperty2['default'](obj, key, {
              value: value,
              enumerable: !0,
              configurable: !0,
              writable: !0,
            })
          : (obj[key] = value),
        obj
      );
    }),
      (exports.__esModule = !0);
  },
  function(module, exports, __webpack_require__) {
    module.exports = {
      default: __webpack_require__(96),
      __esModule: !0,
    };
  },
  function(module, exports, __webpack_require__) {
    var $ = __webpack_require__(23);
    module.exports = function(it, key, desc) {
      return $.setDesc(it, key, desc);
    };
  },
  ,
  ,
  ,
  ,
  ,
  ,
  ,
  ,
  ,
  ,
  ,
  ,
  ,
  ,
  ,
  ,
  ,
  ,
  ,
  ,
  ,
  ,
  ,
  ,
  function(module, exports, __webpack_require__) {
    'use strict';
    'use version 6';

    function getEnablev6(d6, d6s, constants) {
      return d6.Mode
        ? constants && constants.isAPMode
          ? !1
          : 'Disable' == d6s.AutoconfigurationMode
            ? !1
            : !0
        : void 0;
    }

    function numOfIPv4(l3) {
      return _.isUndefined(l3.alias_ip) && _.isUndefined(l3.alias_mask) ? 1 : 2;
    }

    function getVlan(vlans, key) {
      var result = '';
      return (
        _.every(vlans, function(elem) {
          return elem.ifname && elem.ifname == key
            ? ((result = elem.name), !1)
            : !0;
        }),
        result
      );
    }

    function hasNoBridge(groups, key) {
      return groups && groups[key]
        ? groups[key].nat ||
            _.isUndefined(groups[key].wans) ||
            !groups[key].wans.length
        : !0;
    }

    function getIPv4Reserved(reserved) {
      var reservedIpv4 = _.filter(reserved, function(elem) {
        return funcs.is.ipv4(elem.ip);
      });
      return reservedIpv4;
    }

    function getIPv6Reserved(reserved) {
      var reservedIpv6 = _.filter(reserved, function(elem) {
        return funcs.is.ipv6(funcs.ipv6.address.full(elem.ip));
      });
      return reservedIpv6;
    }

    function getReservedClients(d4s, d6s) {
      var reservedv4 = [],
        reservedv6 = [];
      return (
        d4s &&
          (reservedv4 = _.filter(d4s.StaticAddress, function(st, inst) {
            return /[^-]$/.test(inst);
          })),
        d6s &&
          (reservedv6 = _.filter(d6s.StaticAddress, function(st, inst) {
            return /[^-]$/.test(inst);
          })),
        _.union(reservedv4, reservedv6)
      );
    }
    var T = __webpack_require__(84).T,
      _ = __webpack_require__(3),
      funcs = __webpack_require__(5);
    module.exports = (function() {
      var somovdToNative = function(ifaces, vlans, groups) {
          var pattern = T({
            '->': ['$L1', '$vlans', '$groups', '$raw', 'LAN'],
            $L1: ':external',
            $L2: [
              '$raw',
              function(r) {
                return r.L2;
              },
            ],
            $vlans: ':external',
            $groups: ':external',
            $raw: {
              '->': !0,
              '{L2,L2Key}': [
                '$parent',
                function(p) {
                  return p.$L1;
                },
              ],
              '{L3,L3Key}': [
                'L2',
                '?',
                function(l2) {
                  return l2.services;
                },
              ],
              '?': [
                'L2',
                'L2Key',
                '$parent',
                function(l2, L2Key, p) {
                  return (
                    !l2.is_wan &&
                    _.has(l2, 'services') &&
                    hasNoBridge(p.$groups, L2Key)
                  );
                },
              ],
            },
            LANNumberOfEntries: [
              'LAN',
              function(lan) {
                return _.size(lan);
              },
            ],
            LAN: {
              '->': ['$L3', 'IPv4', 'IPv6'],
              '{$raw,$i}': [
                '$parent',
                function(p) {
                  return _.sortBy(p.$raw, 'L3Key');
                },
              ],
              ':': [
                '$i',
                function(i) {
                  return i + 1;
                },
              ],
              $vlans: [
                '$parent',
                function(p) {
                  return p.$vlans;
                },
              ],
              $L2: [
                '$raw',
                function(r) {
                  return r.L2;
                },
              ],
              $L3: [
                '$raw',
                function(r) {
                  return r.L3;
                },
              ],
              __l2Key: [
                '$raw',
                function(r) {
                  return r.L2Key;
                },
              ],
              __l3Key: [
                '$raw',
                function(r) {
                  return r.L3Key;
                },
              ],
              __isNewInterface: [
                '$L3',
                function(l3) {
                  return l3 ? void 0 : !0;
                },
              ],
              __vlanName: [
                '$raw*',
                '$vlans*',
                function(r, vlans) {
                  return getVlan(vlans, r.L2Key);
                },
              ],
              Enable: [
                '$L3*',
                function(l3) {
                  return l3.enable;
                },
              ],
              Name: [
                '$L3*',
                function(l3) {
                  return l3.name;
                },
              ],
              Interface: [
                '$L3*',
                function(l3) {
                  return l3.iface;
                },
              ],
              IPv4: {
                '->': ['$L3*', '$dhcpd', 'StaticIP', 'DHCP'],
                $L3: [
                  '$parent',
                  function(p) {
                    return p.$L3;
                  },
                ],
                $dhcpd: [
                  '$L3*',
                  function(l3) {
                    return l3.dhcpd;
                  },
                ],
                StaticIPNumberOfEntries: [
                  '$L3*',
                  function(l3) {
                    return numOfIPv4(l3);
                  },
                ],
                AddressingMode: [
                  '$L3*',
                  function(l3) {
                    return l3.dhcp ? 'Dynamic' : 'Static';
                  },
                ],
                StaticIP: {
                  1: {
                    '->': !0,
                    $L3: [
                      '$parent',
                      function(p) {
                        return p.$parent.$L3;
                      },
                    ],
                    '?': [
                      '$L3*',
                      function(l3) {
                        return l3;
                      },
                    ],
                    $dhcpd: [
                      '$L3*',
                      function(l3) {
                        return l3.dhcpd;
                      },
                    ],
                    Address: [
                      '$L3*',
                      function(l3) {
                        return l3.ip || '';
                      },
                    ],
                    SubnetMask: [
                      '$L3*',
                      function(l3) {
                        return l3.mask || '';
                      },
                    ],
                    GatewayAddress: [
                      '$L3*',
                      function(l3) {
                        return l3.gwip;
                      },
                    ],
                    AddnHostname: [
                      '$dhcpd*',
                      function(d) {
                        return d.addn_hostname;
                      },
                    ],
                  },
                  2: {
                    '->': !0,
                    $L3: [
                      '$parent',
                      function(p) {
                        return p.$parent.$L3;
                      },
                    ],
                    '?': [
                      '$L3*',
                      function(l3) {
                        return (
                          !_.isUndefined(l3.alias_ip) ||
                          !_.isUndefined(l3.alias_mask)
                        );
                      },
                    ],
                    Address: [
                      '$L3*',
                      function(l3) {
                        return l3.alias_ip || '';
                      },
                    ],
                    SubnetMask: [
                      '$L3*',
                      function(l3) {
                        return l3.alias_mask || '';
                      },
                    ],
                  },
                },
                DHCP: {
                  '->': ['$dhcpd', 'Server', 'Relay'],
                  $dhcpd: [
                    '$parent',
                    function(p) {
                      return p.$dhcpd;
                    },
                  ],
                  Mode: [
                    '$dhcpd*',
                    function(d) {
                      return _.has(d, 'enable')
                        ? d.enable
                          ? d.enable && !d.relay
                            ? 'Server'
                            : d.enable && d.relay
                              ? 'Relay'
                              : void 0
                          : 'Disable'
                        : void 0;
                    },
                  ],
                  Server: {
                    '->': ['$dhcpd', 'StaticAddress'],
                    $dhcpd: [
                      '$parent',
                      function(p) {
                        return p.$dhcpd;
                      },
                    ],
                    MinAddress: [
                      '$dhcpd*',
                      function(d) {
                        return d.start_ip;
                      },
                    ],
                    MaxAddress: [
                      '$dhcpd*',
                      function(d) {
                        return d.end_ip;
                      },
                    ],
                    LeaseTime: [
                      '$dhcpd*',
                      function(d) {
                        return d.lease && !_.isNaN(parseInt(d.lease, 10))
                          ? d.lease / 60
                          : void 0;
                      },
                    ],
                    DNSRelay: [
                      '$dhcpd*',
                      function(d) {
                        return _.has(d, 'dns_relay') ? !!d.dns_relay : void 0;
                      },
                    ],
                    DNSPrim: [
                      '$dhcpd*',
                      function(d) {
                        return d.dns_prim;
                      },
                    ],
                    DNSSec: [
                      '$dhcpd*',
                      function(d) {
                        return d.dns_sec;
                      },
                    ],
                    StaticAddressNumberOfEntries: [
                      'StaticAddress*',
                      function(st) {
                        return _.size(st);
                      },
                    ],
                    StaticAddress: {
                      '->': !0,
                      $dhcpd: [
                        '$parent',
                        function(p) {
                          return p.$dhcpd;
                        },
                      ],
                      '?': [
                        '$dhcpd',
                        function(d) {
                          return _.has(d, 'reserved');
                        },
                      ],
                      '{$raw, $i}': [
                        '$dhcpd*',
                        function(d) {
                          return getIPv4Reserved(d.reserved);
                        },
                      ],
                      ':': [
                        '$i',
                        function(i) {
                          return i + 1;
                        },
                      ],
                      IPAddress: [
                        '$raw*',
                        function(r) {
                          return r.ip || '';
                        },
                      ],
                      MACAddress: [
                        '$raw*',
                        function(r) {
                          return r.mac || '';
                        },
                      ],
                      Hostname: [
                        '$raw*',
                        function(r) {
                          return r.hostname || '';
                        },
                      ],
                      Mode: [
                        '$raw*',
                        function(r) {
                          return r.mode ? r.mode : void 0;
                        },
                      ],
                    },
                  },
                  Relay: {
                    '->': !0,
                    $dhcpd: [
                      '$parent',
                      function(p) {
                        return p.$dhcpd;
                      },
                    ],
                    '?': [
                      '$dhcpd',
                      function(d) {
                        return _.has(d, 'relay');
                      },
                    ],
                    DHCPServerIPAddress: [
                      '$dhcpd*',
                      function(d) {
                        return d.relay && d.relay.ip ? d.relay.ip : '';
                      },
                    ],
                  },
                },
              },
              IPv6: {
                '->': ['$L3', '$dhcpd', 'AddressingMode', 'StaticIP', 'DHCP'],
                $L3: [
                  '$parent',
                  function(p) {
                    return p.$L3;
                  },
                ],
                $dhcpd: [
                  '$L3*',
                  function(l3) {
                    return l3.dhcpd;
                  },
                ],
                '?': [
                  '$L3',
                  function(l3) {
                    return l3 && !_.isUndefined(l3.ipv6);
                  },
                ],
                AddressingMode: [
                  '$dhcpd*',
                  '$L3*',
                  function($d, $L3) {
                    return $L3.dhcpv6
                      ? 'Dynamic'
                      : $d.dhcp6_pd
                        ? 'PD'
                        : 'Static';
                  },
                ],
                StaticIPNumberOfEntries: 1,
                StaticIP: {
                  1: {
                    '->': !0,
                    $L3: [
                      '$parent',
                      function(p) {
                        return p.$parent.$L3;
                      },
                    ],
                    $arrIpv6: [
                      '$L3*',
                      function(l3) {
                        return l3.ipv6.split('/');
                      },
                    ],
                    Address: [
                      '$arrIpv6*',
                      function(arr) {
                        return arr[0];
                      },
                    ],
                    Prefix: [
                      '$arrIpv6*',
                      function(arr) {
                        return arr[1];
                      },
                    ],
                    GatewayAddress: [
                      '$L3*',
                      function(l3) {
                        return l3.gwipv6;
                      },
                    ],
                  },
                  2: {
                    '->': !0,
                    $L3: [
                      '$parent',
                      function(p) {
                        return p.$parent.$L3;
                      },
                    ],
                    $arrIpv6: [
                      '$L3*',
                      function(l3) {
                        return l3.alias_ipv6 && l3.alias_ipv6.split('/');
                      },
                    ],
                    Address: [
                      '$arrIpv6*',
                      function(arr) {
                        return arr[0];
                      },
                    ],
                    Prefix: [
                      '$arrIpv6*',
                      function(arr) {
                        return arr[1];
                      },
                    ],
                  },
                },
                DHCP: {
                  '->': ['$dhcpd', 'Server'],
                  $dhcpd: [
                    '$parent',
                    function(p) {
                      return p.$dhcpd;
                    },
                  ],
                  Mode: [
                    '$dhcpd*',
                    function(d) {
                      return '0' == d.modev6 || '1' == d.modev6
                        ? 'Server'
                        : 'Disable';
                    },
                  ],
                  Server: {
                    '->': ['$dhcpd', 'StaticAddress'],
                    $dhcpd: [
                      '$parent',
                      function(p) {
                        return p.$dhcpd;
                      },
                    ],
                    AutoconfigurationMode: [
                      '$dhcpd*',
                      function(d) {
                        return '0' == d.modev6
                          ? 'Stateless'
                          : '1' == d.modev6
                            ? 'Statefull'
                            : 'Disable';
                      },
                    ],
                    MinAddress: [
                      '$dhcpd*',
                      function(d) {
                        return d.start_ipv6 || '';
                      },
                    ],
                    MaxAddress: [
                      '$dhcpd*',
                      function(d) {
                        return d.end_ipv6 || '';
                      },
                    ],
                    LeaseTime: [
                      '$dhcpd*',
                      function(d) {
                        return d.leasev6 && !_.isNaN(parseInt(d.leasev6, 10))
                          ? d.leasev6 / 60
                          : 5;
                      },
                    ],
                    DNSRelay: [
                      '$dhcpd*',
                      function(d) {
                        return !!d.dns_relay6;
                      },
                    ],
                    RADVD: [
                      '$dhcpd*',
                      function(d) {
                        return !!d.radvd;
                      },
                    ],
                    StaticAddressNumberOfEntries: [
                      'StaticAddress*',
                      function(st) {
                        return _.size(st);
                      },
                    ],
                    StaticAddress: {
                      '->': !0,
                      $dhcpd: [
                        '$parent',
                        function(p) {
                          return p.$dhcpd;
                        },
                      ],
                      '?': [
                        '$dhcpd',
                        function(d) {
                          return _.has(d, 'reserved');
                        },
                      ],
                      '{$raw, $i}': [
                        '$dhcpd*',
                        function(d) {
                          return getIPv6Reserved(d.reserved);
                        },
                      ],
                      ':': [
                        '$i',
                        function(i) {
                          return i + 1;
                        },
                      ],
                      IPAddress: [
                        '$raw*',
                        function(r) {
                          return r.ip || '';
                        },
                      ],
                      MACAddress: [
                        '$raw*',
                        function(r) {
                          return r.mac || '';
                        },
                      ],
                      Hostname: [
                        '$raw*',
                        function(r) {
                          return r.hostname || '';
                        },
                      ],
                      Mode: [
                        '$raw*',
                        function(r) {
                          return r.mode ? r.mode : void 0;
                        },
                      ],
                    },
                  },
                },
              },
            },
          });
          return pattern.build({
            $L1: ifaces,
            $vlans: vlans,
            $groups: groups,
          });
        },
        nativeToSomovd = function(data, constants) {
          var pattern = T({
            '->': ['$raw', 'services'],
            $device: ':external',
            $constants: ':external',
            '{$raw}': [
              '$device',
              function(d) {
                return d.LAN;
              },
            ],
            ':': [
              '$raw',
              function(r) {
                return r.__l2Key;
              },
            ],
            enable: [
              '$raw',
              function(r) {
                return r.Enable;
              },
            ],
            type: 'bridge',
            is_wan: !1,
            services: {
              '->': ['$ipv4', '$ipv6', 'dhcpd'],
              $raw: [
                '$parent',
                function(p) {
                  return p.$raw;
                },
              ],
              $constants: [
                '$parent',
                function(p) {
                  return p.$constants;
                },
              ],
              ':': [
                '$raw',
                function(r) {
                  return r.__l3Key || 'create';
                },
              ],
              $ipv4: [
                '$raw',
                function(r) {
                  return r.IPv4;
                },
              ],
              $ipv6: [
                '$raw',
                function(r) {
                  return r.IPv6 || void 0;
                },
              ],
              type: 'ip',
              enable: [
                '$raw',
                function(r) {
                  return r.Enable;
                },
              ],
              name: [
                '$raw',
                function(r) {
                  return r.Name;
                },
              ],
              iface: [
                '$raw',
                function(r) {
                  return r.Interface;
                },
              ],
              ifname: [
                '$raw',
                function(r) {
                  return r.Interface;
                },
              ],
              ip: [
                '$ipv4',
                function(ipv4) {
                  return ipv4.StaticIP[1].Address || '';
                },
              ],
              mask: [
                '$ipv4',
                function(ipv4) {
                  return ipv4.StaticIP[1].SubnetMask || '';
                },
              ],
              gwip: [
                '$ipv4',
                function(ipv4) {
                  return ipv4.StaticIP[1].GatewayAddress;
                },
              ],
              gwipv6: [
                '$ipv6*',
                function(ipv6) {
                  return ipv6.StaticIP[1].GatewayAddress;
                },
              ],
              alias_ip: [
                '$ipv4',
                function(ipv4) {
                  return ipv4.StaticIP[2]
                    ? ipv4.StaticIP[2].Address || ''
                    : void 0;
                },
              ],
              alias_mask: [
                '$ipv4',
                function(ipv4) {
                  return ipv4.StaticIP[2]
                    ? ipv4.StaticIP[2].SubnetMask || ''
                    : void 0;
                },
              ],
              ipv6: [
                '$ipv6*',
                function(ipv6) {
                  return (
                    ipv6.StaticIP[1].Address + '/' + ipv6.StaticIP[1].Prefix
                  );
                },
              ],
              alias_ipv6: [
                '$ipv6*',
                function(ipv6) {
                  return (
                    ipv6.StaticIP[2].Address + '/' + ipv6.StaticIP[2].Prefix
                  );
                },
              ],
              useipv6: [
                '$ipv6*',
                function(ipv6) {
                  return !0;
                },
              ],
              dhcpv6: [
                '$ipv6*',
                function(ipv6) {
                  return 'Dynamic' == ipv6.AddressingMode;
                },
              ],
              dhcp: [
                '$ipv4*',
                function(ipv4) {
                  return 'Dynamic' == ipv4.AddressingMode;
                },
              ],
              dhcpd: {
                '->': [
                  '$ipv4',
                  '$ipv6',
                  '$dhcpv4',
                  '$dhcpv4s',
                  '$dhcpv4r',
                  '$dhcpv6',
                  '$dhcpv6s',
                  'reserved',
                  'relay',
                ],
                $ipv4: [
                  '$parent',
                  function(p) {
                    return p.$ipv4;
                  },
                ],
                $ipv6: [
                  '$parent',
                  function(p) {
                    return p.$ipv6;
                  },
                ],
                $dhcpv4: [
                  '$ipv4',
                  function($ipv4) {
                    return $ipv4.DHCP;
                  },
                ],
                $dhcpv4s: [
                  '$dhcpv4',
                  function(d4) {
                    return d4.Server;
                  },
                ],
                $dhcpv4r: [
                  '$dhcpv4',
                  function(d4) {
                    return d4.Relay;
                  },
                ],
                $dhcpv6: [
                  '$ipv6*',
                  function($ipv6) {
                    return $ipv6.DHCP;
                  },
                ],
                $dhcpv6s: [
                  '$dhcpv6*',
                  function(d6) {
                    return d6.Server;
                  },
                ],
                $constants: [
                  '$parent',
                  function(p) {
                    return p.$constants;
                  },
                ],
                enable: [
                  '$dhcpv4',
                  function(d4) {
                    return d4.Mode ? 'Disable' != d4.Mode : void 0;
                  },
                ],
                start_ip: [
                  '$dhcpv4s',
                  function(d4s) {
                    return d4s.MinAddress;
                  },
                ],
                end_ip: [
                  '$dhcpv4s',
                  function(d4s) {
                    return d4s.MaxAddress;
                  },
                ],
                lease: [
                  '$dhcpv4s',
                  function(d4s) {
                    return d4s.LeaseTime ? 60 * d4s.LeaseTime : void 0;
                  },
                ],
                dns_relay: [
                  '$dhcpv4s',
                  function(d4s) {
                    return d4s.DNSRelay;
                  },
                ],
                dns_prim: [
                  '$dhcpv4s',
                  function(d4s) {
                    return d4s.DNSPrim;
                  },
                ],
                dns_sec: [
                  '$dhcpv4s',
                  function(d4s) {
                    return d4s.DNSSec;
                  },
                ],
                addn_hostname: [
                  '$ipv4',
                  function(ipv4) {
                    return ipv4.StaticIP[1].AddnHostname;
                  },
                ],
                gwip: [
                  '$ipv4',
                  function(ipv4) {
                    return ipv4.StaticIP[1].GatewayAddress;
                  },
                ],
                gwipv6: [
                  '$ipv6*',
                  function(ipv6) {
                    return ipv6.StaticIP[1].GatewayAddress;
                  },
                ],
                reserved: {
                  '->': !0,
                  $dhcpv4s: [
                    '$parent',
                    function(p) {
                      return p.$dhcpv4s;
                    },
                  ],
                  $dhcpv6s: [
                    '$parent',
                    function(p) {
                      return p.$dhcpv6s;
                    },
                  ],
                  '?': [
                    '$dhcpv4s',
                    '$dhcpv6s',
                    function(d4s, d6s) {
                      return (
                        _.has(d4s, 'StaticAddress') ||
                        _.has(d6s, 'StaticAddress')
                      );
                    },
                  ],
                  '{$raw}': [
                    '$dhcpv4s',
                    '$dhcpv6s',
                    function(d4s, d6s) {
                      return getReservedClients(d4s, d6s);
                    },
                  ],
                  ip: [
                    '$raw*',
                    function(r) {
                      return r.IPAddress || '';
                    },
                  ],
                  mac: [
                    '$raw*',
                    function(r) {
                      return r.MACAddress || '';
                    },
                  ],
                  hostname: [
                    '$raw*',
                    function(r) {
                      return r.Hostname || '';
                    },
                  ],
                  mode: [
                    '$raw*',
                    function(r) {
                      return r.Mode ? r.Mode : void 0;
                    },
                  ],
                },
                relay: {
                  '->': !0,
                  $dhcpv4: [
                    '$parent',
                    function(p) {
                      return p.$dhcpv4;
                    },
                  ],
                  $dhcpv4r: [
                    '$parent',
                    function(p) {
                      return p.$dhcpv4r;
                    },
                  ],
                  '?': [
                    '$dhcpv4',
                    function(d4) {
                      return 'Relay' == d4.Mode;
                    },
                  ],
                  ip: [
                    '$dhcpv4r',
                    function(d4r) {
                      return d4r.DHCPServerIPAddress;
                    },
                  ],
                },
                dhcp6_pd: [
                  '$ipv6*',
                  function(ipv6) {
                    return 'PD' == ipv6.AddressingMode;
                  },
                ],
                enablev6: [
                  '$dhcpv6*',
                  '$dhcpv6s*',
                  '$constants',
                  function(d6, d6s, constants) {
                    return getEnablev6(d6, d6s, constants);
                  },
                ],
                modev6: [
                  '$dhcpv6s*',
                  function(d6s) {
                    switch (d6s.AutoconfigurationMode) {
                      case 'Stateless':
                        return '0';
                      case 'Statefull':
                        return '1';
                      case 'Disable':
                        return '-1';
                    }
                  },
                ],
                start_ipv6: [
                  '$dhcpv6s*',
                  function(d6s) {
                    return d6s.MinAddress;
                  },
                ],
                end_ipv6: [
                  '$dhcpv6s*',
                  function(d6s) {
                    return d6s.MaxAddress;
                  },
                ],
                leasev6: [
                  '$dhcpv6s*',
                  function(d6s) {
                    return d6s.LeaseTime ? 60 * d6s.LeaseTime : 300;
                  },
                ],
                dns_relay6: [
                  '$dhcpv6s*',
                  function(d6s) {
                    return d6s.DNSRelay;
                  },
                ],
                radvd: [
                  '$dhcpv6s*',
                  function(d6s) {
                    return d6s.RADVD;
                  },
                ],
              },
            },
          });
          return pattern.build({
            $device: data,
            $constants: constants,
          });
        };
      return {
        somovdToNative: somovdToNative,
        nativeToSomovd: nativeToSomovd,
      };
    })();
  },
  ,
  ,
  ,
  ,
  ,
  ,
  ,
  function(module, exports, __webpack_require__) {
    'use strict';
    var _module = angular.module('angular-es6-promise', []);
    _module.run([
      '$q',
      '$window',
      function($q, $window) {
        ($window.Promise = function(executor) {
          var deferred = $q.defer();
          try {
            executor.call(
              void 0,
              angular.bind(deferred, deferred.resolve),
              angular.bind(deferred, deferred.reject)
            );
          } catch (err) {
            deferred.reject(err);
          }
          return deferred.promise;
        }),
          ($window.Promise.all = $q.all.bind($q)),
          ($window.Promise.reject = $q.reject.bind($q)),
          ($window.Promise.resolve = $q.when.bind($q)),
          ($window.Promise.race = function(promises) {
            for (var promiseMgr = $q.defer(), i = 0; i < promises.length; i++)
              promises[i].then(function(result) {
                promiseMgr && (promiseMgr.resolve(result), (promiseMgr = null));
              }),
                promises[i]['catch'](function(result) {
                  promiseMgr &&
                    (promiseMgr.reject(result), (promiseMgr = null));
                });
            return promiseMgr.promise;
          }),
          (__webpack_require__(7)['default'] = $window.Promise);
      },
    ]);
  },
]);
