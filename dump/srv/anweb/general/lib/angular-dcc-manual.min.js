webpackJsonp([1], {
  0: function(module, exports, __webpack_require__) {
    module.exports = __webpack_require__(124);
  },
  124: function(module, exports, __webpack_require__) {
    'use strict';
    var dcc = angular.module('dcc', []);
    dcc.factory('manualBuilder', function() {
      return { build: __webpack_require__(125).build };
    });
  },
  125: function(module, exports, __webpack_require__) {
    'use strict';
    'use version 6';
    var _ = __webpack_require__(3),
      T = __webpack_require__(84).T,
      Components = (__webpack_require__(126), __webpack_require__(127));
    module.exports = T({
      '->': [
        '$__internetPort',
        '$WifiClientStep',
        '$InterfaceStep',
        '$LANStep',
        '$WiFiWdsStep',
        '$InternetStep',
        '$Groups',
        '$VoIPStep',
        '$IPTVStep',
        '$PasswordStep',
        '$isWANType',
        '$isJointGroup',
        '$isUseService',
        '$dualService',
        '$isJointVLAN',
        'Config',
        'View',
      ],
      $__internetPort: ':external',
      $Support: ':external',
      $InterfaceStep: ':external',
      $WifiClientStep: ':external',
      $InternetStep: ':external',
      $LANStep: ':external',
      $VoIPStep: ':external',
      $IPTVStep: ':external',
      $WiFiStep: ':external',
      $PasswordStep: ':external',
      $Groups: ':external',
      $RemoteUpdate: ':external',
      $DeviceMode: ':external',
      $SystemLanguage: ':external',
      $WiFiWdsStep: ':external',
      $isWANType: [
        '$InternetStep',
        function(i) {
          return function(type) {
            return !!i && i.WANType == type;
          };
        },
      ],
      $isIfaceType: [
        '$InterfaceStep',
        function(i) {
          return function(type) {
            return !!i && i.IfaceType == type;
          };
        },
      ],
      $hasWifi: [
        '$WiFiStep',
        function(w) {
          return function(r, i) {
            return !!w && !!w[r] && !!w[r][i];
          };
        },
      ],
      $hasRadio: [
        '$WiFiStep',
        function(w) {
          return function(i) {
            return !!w && !!w[i];
          };
        },
      ],
      $getMediaType: [
        '$InterfaceStep',
        function(iface) {
          return function() {
            if (!iface) return null;
            switch (iface.IfaceType) {
              case 'adsl':
                return 'DSL.ATM';
              case 'vdsl':
                return 'DSL.PTM';
              case 'etherwan':
                return 'Ethernet';
              case 'usb_modem':
                return 'Dongle';
              case 'wifi_client':
                return 'WiFi';
              default:
                return 'Ethernet';
            }
          };
        },
      ],
      $isUseService: [
        '$Groups',
        function(g) {
          return function(s) {
            var d = !!_.find(_.flatten(_.toArray(g)), function(p) {
              return p.service == s;
            });
            return d;
          };
        },
      ],
      $dualService: [
        '$root',
        function(r) {
          return r.$isUseService('iptv') && r.$isUseService('voip');
        },
      ],
      $isJointVLAN: [
        '$root',
        '$VoIPStep',
        '$IPTVStep',
        function(r, v, i) {
          return function() {
            return (
              r.$dualService &&
              ((!!v &&
                !!i &&
                v.Use &&
                v.Use &&
                v.UseVID &&
                i.UseVID &&
                v.VID == i.VID) ||
                (!!v && !!i && v.Use && v.Use && !v.UseVID && !i.UseVID))
            );
          };
        },
      ],
      $isJointGroup: [
        '$root',
        '$VoIPStep',
        '$IPTVStep',
        function(r, v, i) {
          return 'Ethernet' == r.$getMediaType() ||
            'DSL.PTM' == r.$getMediaType()
            ? !!v && !!i && v.Use && v.Use && v.VID == i.VID
            : !!v && !!i && v.Use && v.Use && v.VPI == i.VPI && v.VCI == i.VCI;
        },
      ],
      DeviceClass: 'DIR',
      LinkType: 'Ethernet',
      Config: {
        '->': !0,
        WAN: {
          '->': [
            '?',
            '$Media',
            '$PPP',
            '$IPoE',
            'PPPoE',
            'PPPoEv6',
            'PPPoEDual',
            'PPTP',
            'IPv4oE',
            'IPv6oE',
            '3G',
            'LTE',
          ],
          '?': [
            '$root',
            function(r) {
              return !(
                !r.$InternetStep ||
                (r.$DeviceMode && 'ap' === r.$DeviceMode.Mode)
              );
            },
          ],
          $Media: {
            '->': !0,
            DSL: {
              '->': !0,
              '?': [
                '$root',
                function(r) {
                  return r.$getMediaType().match(/^DSL\.\w*$/);
                },
              ],
              ATM: {
                '->': !0,
                '?': [
                  '$root',
                  function(r) {
                    return 'DSL.ATM' == r.$getMediaType();
                  },
                ],
                __Key: 'create',
                Enable: !0,
                DestinationAddress: [
                  '$root',
                  function(r) {
                    return r.$InternetStep.VPI + '/' + r.$InternetStep.VCI;
                  },
                ],
                LinkType: [
                  '$root',
                  function(r) {
                    return getLinkType(r.$InternetStep.WANType);
                  },
                ],
                Encapsulation: 'LLC',
                ConnectionMode: 'NewMode',
                UseMultiPVC: !1,
                QoSClass: 'UBR',
              },
              PTM: {
                '->': !0,
                '?': [
                  '$root',
                  function(r) {
                    return 'DSL.PTM' == r.$getMediaType();
                  },
                ],
                __Key: '@any@',
                __ActualType: 'ethernet',
                Enable: !0,
                LinkType: [
                  '$root',
                  function(r) {
                    return getLinkType(r.$InternetStep.WANType);
                  },
                ],
                MACAddress: {
                  '->': !0,
                  '?': [
                    '$root',
                    function(r) {
                      return !!r.$InternetStep.CloneMac;
                    },
                  ],
                  $return: [
                    '$root',
                    function(r) {
                      return r.$InternetStep.Mac;
                    },
                  ],
                },
                UseMultiPVC: !1,
                Name: 'PTM',
              },
            },
            Ethernet: {
              '->': !0,
              '?': [
                '$root',
                function(r) {
                  return 'Ethernet' == r.$getMediaType();
                },
              ],
              __Key: '@any@',
              __VlanName: {
                '->': !0,
                '?': [
                  '$root',
                  function(r) {
                    return !!r.$InternetStep.UseVLAN;
                  },
                ],
                $return: function() {
                  return 'internet';
                },
              },
              MACAddress: {
                '->': !0,
                '?': [
                  '$root',
                  function(r) {
                    return !!r.$InternetStep.CloneMac;
                  },
                ],
                $return: [
                  '$root',
                  function(r) {
                    return r.$InternetStep.Mac;
                  },
                ],
              },
            },
            WiFi: {
              '->': !0,
              '?': [
                '$root',
                function(r) {
                  return 'WiFi' == r.$getMediaType();
                },
              ],
              __Key: '@any@',
              Name: [
                '$root',
                function(r) {
                  return r.$WifiClientStep && r.$WifiClientStep.SeparateClient
                    ? '5GHz' == r.$WifiClientStep.Band
                      ? 'WiFiClient5ghz'
                      : 'WiFiClient24ghz'
                    : 'WiFiClient';
                },
              ],
              MACAddress: {
                '->': !0,
                '?': [
                  '$root',
                  function(r) {
                    return !!r.$InternetStep.CloneMac;
                  },
                ],
                $return: [
                  '$root',
                  function(r) {
                    return r.$InternetStep.Mac;
                  },
                ],
              },
            },
            Dongle: {
              '->': !0,
              '?': [
                '$root',
                function(r) {
                  return 'Dongle' == r.$getMediaType();
                },
              ],
              __Key: '@any@',
              __VlanName: {
                '->': !0,
                '?': [
                  '$root',
                  function(r) {
                    return !!r.$InternetStep.UseVLAN;
                  },
                ],
                $return: function() {
                  return 'internet';
                },
              },
              Type: [
                '$root',
                function(r) {
                  return r.$InternetStep.WANType.toUpperCase();
                },
              ],
              Mode: 'Auto',
              DongleType: 'gsm',
            },
          },
          $PPP: {
            '->': ['?', '$IsPPPoEDual', 'Origin'],
            '?': [
              '$root',
              function(r) {
                return (
                  r.$isWANType('pppoe') ||
                  r.$isWANType('pppoev6') ||
                  r.$isWANType('dynpppoe') ||
                  r.$isWANType('statpppoe') ||
                  r.$isWANType('pppoedual') ||
                  r.$isWANType('dynpptp') ||
                  r.$isWANType('statpptp') ||
                  r.$isWANType('dynl2tp') ||
                  r.$isWANType('statl2tp') ||
                  r.$isWANType('statipv6') ||
                  r.$isWANType('3g')
                );
              },
            ],
            $Input: [
              '$root',
              function(r) {
                return r.$InternetStep;
              },
            ],
            $IsPPPoEDual: [
              '$root',
              function(r) {
                return (
                  r.$isWANType('pppoedual') || r.$isWANType('pppoev6') || void 0
                );
              },
            ],
            $Is3G: [
              '$root',
              function(r) {
                return r.$isWANType('3g') || void 0;
              },
            ],
            $IsXXTP: [
              '$root',
              function(r) {
                return (
                  r.$isWANType('dynpptp') ||
                  r.$isWANType('statpptp') ||
                  r.$isWANType('dynl2tp') ||
                  r.$isWANType('statl2tp') ||
                  void 0
                );
              },
            ],
            Enable: !0,
            Name: [
              '$Input',
              function(i) {
                switch (i.WANType) {
                  case 'pppoe':
                  case 'dynpppoe':
                  case 'statpppoe':
                    return 'pppoe_Internet';
                  case 'pppoev6':
                    return 'pppoev6_Internet';
                  case 'dynpptp':
                    return 'dynpptp_Internet';
                  case 'statpptp':
                    return 'statpptp_Internet';
                  case 'dynl2tp':
                    return 'dynl2tp_Internet';
                  case 'statl2tp':
                    return 'statl2tp_Internet';
                  case '3g':
                    return '3g_USB';
                }
                return i.WANType + '_Internet';
              },
            ],
            Username: [
              '$Input',
              function(i) {
                return i.Username;
              },
            ],
            Password: [
              '$Input',
              function(i) {
                return i.Password;
              },
            ],
            ServiceName: [
              '$Input',
              function(i) {
                return i.ServiceName ? i.ServiceName : '';
              },
            ],
            MaxMRUSize: [
              '$IsXXTP',
              function(x) {
                return x ? 1456 : 1492;
              },
            ],
            DefaultGateway: [
              '$root',
              function(r) {
                return !r.$isWANType('pppoev6');
              },
            ],
            AutoDisconnectTime: 0,
            APN: [
              '$Is3G*',
              '$Input',
              function(x, i) {
                return i.APN;
              },
            ],
            DialNumber: [
              '$Is3G*',
              '$Input',
              function(x, i) {
                return i.DialNumber;
              },
            ],
            LCPEcho: 30,
            LCPEchoRetry: 3,
            Flags: {
              '->': !0,
              IGMP: [
                '$root',
                function(r) {
                  return (
                    !!r.$InternetStep &&
                    !!r.$InternetStep.IGMP &&
                    r.$isWANType('pppoe')
                  );
                },
              ],
              NAT: !0,
              Firewall: !0,
              Ping: [
                '$root',
                function(r) {
                  return !!r.$InternetStep && !!r.$InternetStep.Ping;
                },
              ],
              RIP: [
                '$root',
                function(r) {
                  return !1;
                },
              ],
              AltRoutingTable: !1,
            },
            AutoConnection: {
              '->': !0,
              '?': [
                '$root',
                function(r) {
                  return (
                    r.$isWANType('dynpptp') ||
                    r.$isWANType('dynl2tp') ||
                    r.$isWANType('statpptp') ||
                    r.$isWANType('statl2tp')
                  );
                },
              ],
              $return: !0,
            },
            ActualType: {
              '->': !0,
              '?': [
                '$root',
                function(r) {
                  return (
                    r.$isWANType('dynpptp') ||
                    r.$isWANType('dynl2tp') ||
                    r.$isWANType('statpptp') ||
                    r.$isWANType('statl2tp')
                  );
                },
              ],
              $return: [
                '$root',
                function(r) {
                  return r.$isWANType('dynpptp') || r.$isWANType('statpptp')
                    ? 'PPTP'
                    : 'L2TP';
                },
              ],
            },
            KeepAlive: !0,
            ConnectionTrigger: 'AlwaysOn',
            AuthenticationProtocol: 'AUTO',
            __Key: 'create',
            __Layer: [
              '$IsXXTP',
              function(x) {
                return x ? '4' : '3';
              },
            ],
            __LowerLayer: [
              '$IsXXTP',
              function(x) {
                return x ? 'create' : '@any@';
              },
            ],
            MediaType: [
              '$root',
              function(r) {
                return r.$getMediaType();
              },
            ],
            Media: [
              '$parent',
              function(p) {
                return p.$Media;
              },
            ],
            DefaultGatewayv6: [
              '$root',
              function(r) {
                return r.$isWANType('pppoev6')
                  ? !1
                  : r.$isWANType('pppoedual') || void 0;
              },
            ],
            GatewayIPv6AddressBySlaac: [
              '$IsPPPoEDual*',
              function() {
                return !0;
              },
            ],
            Origin: [
              '$IsPPPoEDual*',
              function() {
                return 'AutoConfigured';
              },
            ],
            DNSIPv6Automatical: [
              '$IsPPPoEDual*',
              function() {
                return !0;
              },
            ],
            Service: [
              '$IsXXTP*',
              function() {
                return 'Config.WAN.IPv4oE.Connection.2';
              },
            ],
          },
          $IPoE: [
            '$root',
            '$Media',
            function(r, m) {
              return Components.WAN.IPoE.build({
                $Device: 'DIR',
                $Media: m,
                $MediaType: r.$getMediaType(),
                $isWANType: r.$isWANType,
                $Input: r.$InternetStep,
              });
            },
          ],
          PPPoE: {
            '->': ['?', 'Connection'],
            '?': [
              '$root',
              function(r) {
                return (
                  r.$isWANType('pppoe') ||
                  r.$isWANType('dynpppoe') ||
                  r.$isWANType('statpppoe')
                );
              },
            ],
            ConnectionNumberOfEntries: 1,
            Connection: {
              '->': !0,
              1: [
                '$parent',
                function(p) {
                  return p.$parent.$PPP;
                },
              ],
            },
          },
          PPPoEv6: {
            '->': ['?', 'Connection'],
            '?': [
              '$root',
              function(r) {
                return r.$isWANType('pppoev6');
              },
            ],
            ConnectionNumberOfEntries: 1,
            Connection: {
              '->': !0,
              1: [
                '$parent',
                function(p) {
                  return p.$parent.$PPP;
                },
              ],
            },
          },
          '3G': {
            '->': ['?', 'Connection'],
            '?': [
              '$root',
              function(r) {
                return r.$isWANType('3g');
              },
            ],
            ConnectionNumberOfEntries: 1,
            Connection: {
              '->': !0,
              1: [
                '$parent',
                function(p) {
                  return p.$parent.$PPP;
                },
              ],
            },
          },
          LTE: {
            '->': ['?', 'Connection'],
            '?': [
              '$root',
              function(r) {
                return r.$isWANType('lte');
              },
            ],
            ConnectionNumberOfEntries: 1,
            Connection: {
              '->': !0,
              1: [
                '$parent',
                function(p) {
                  return p.$parent.$IPoE;
                },
              ],
            },
          },
          PPPoEDual: {
            '->': ['?', 'Connection'],
            '?': [
              '$root',
              function(r) {
                return r.$isWANType('pppoedual');
              },
            ],
            ConnectionNumberOfEntries: 1,
            Connection: {
              '->': !0,
              1: [
                '$parent',
                function(p) {
                  return p.$parent.$PPP;
                },
              ],
            },
          },
          PPTP: {
            '->': ['?', 'Connection'],
            '?': [
              '$root',
              function(r) {
                return (
                  r.$isWANType('dynpptp') ||
                  r.$isWANType('statpptp') ||
                  r.$isWANType('dynl2tp') ||
                  r.$isWANType('statl2tp')
                );
              },
            ],
            ConnectionNumberOfEntries: 1,
            Connection: {
              '->': !0,
              1: [
                '$parent',
                function(p) {
                  return p.$parent.$PPP;
                },
              ],
            },
          },
          IPv4oE: {
            '->': ['?', 'Connection'],
            '?': [
              '$root',
              function(r) {
                return (
                  r.$isWANType('dynip') ||
                  r.$isWANType('statip') ||
                  r.$isWANType('dynl2tp') ||
                  r.$isWANType('statl2tp') ||
                  r.$isWANType('dynpptp') ||
                  r.$isWANType('statpptp') ||
                  r.$isWANType('dynpppoe') ||
                  r.$isWANType('statpppoe')
                );
              },
            ],
            ConnectionNumberOfEntries: 1,
            Connection: {
              '->': !0,
              1: [
                '$parent',
                function(p) {
                  return p.$parent.$IPoE;
                },
              ],
              2: {
                '->': !0,
                '?': [
                  '$root',
                  function(r) {
                    return (
                      r.$isWANType('dynpptp') ||
                      r.$isWANType('dynl2tp') ||
                      r.$isWANType('dynpppoe')
                    );
                  },
                ],
                Enable: !0,
                Name: 'dynamic_Internet',
                DNSAutomatical: [
                  '$root',
                  function(r) {
                    return !(
                      r.$InternetStep.DNSServer1 || r.$InternetStep.DNSServer2
                    );
                  },
                ],
                DNSServer1: [
                  '$root',
                  function(r) {
                    return r.$isWANType('dynpptp')
                      ? r.$InternetStep.DNSServer1
                      : '';
                  },
                ],
                DNSServer2: [
                  '$root',
                  function(r) {
                    return r.$isWANType('dynpptp')
                      ? r.$InternetStep.DNSServer2
                      : '';
                  },
                ],
                VendorID: [
                  '$root',
                  function(r) {
                    return r.$InternetStep.VendorID || '';
                  },
                ],
                DefaultGateway: [
                  '$root',
                  function(r) {
                    return (
                      !r.$isWANType('dynpppoe') && !r.$isWANType('statpppoe')
                    );
                  },
                ],
                Flags: {
                  '->': !0,
                  IGMP: !0,
                  NAT: !0,
                  Firewall: !0,
                  Ping: [
                    '$root',
                    function(r) {
                      return !!r.$InternetStep && !!r.$InternetStep.Ping;
                    },
                  ],
                  RIP: !1,
                  AltRoutingTable: !1,
                },
                __Key: 'create',
                __Layer: '3',
                __LowerLayer: '@any@',
                AddressingType: 'DHCP',
                Media: [
                  '$parent',
                  function(p) {
                    return p.$parent.$parent.$Media;
                  },
                ],
                MediaType: [
                  '$root',
                  function(r) {
                    return r.$getMediaType();
                  },
                ],
              },
            },
          },
          IPv6oE: {
            '->': ['?', 'Connection'],
            '?': [
              '$root',
              function(r) {
                return r.$isWANType('dynipv6') || r.$isWANType('statipv6');
              },
            ],
            ConnectionNumberOfEntries: 1,
            Connection: {
              '->': !0,
              1: [
                '$parent',
                function(p) {
                  return p.$parent.$IPoE;
                },
              ],
            },
          },
        },
        VLAN: {
          '->': ['?', 'services'],
          '?': [
            '$root',
            function(r) {
              return (
                (!!r.$InternetStep && !!r.$InternetStep.UseVLAN) ||
                (!!r.$VoIPStep && !!r.$VoIPStep.Use) ||
                (!!r.$IPTVStep && !!r.$IPTVStep.Use)
              );
            },
          ],
          __withoutDefaultWanU: [
            '$root',
            function(r) {
              return (
                (!!r.$Support &&
                  !!r.$Support.withoutWanU &&
                  !!r.$InternetStep &&
                  !!r.$InternetStep.UseVLAN) ||
                void 0
              );
            },
          ],
          __internetPort: [
            '$root',
            function(r) {
              return r.$__internetPort;
            },
          ],
          groups: [
            '$root',
            function(r) {
              return (function(r) {
                return (
                  r.$Groups &&
                    _.each(r.$Groups.lan, function(p) {
                      p.service &&
                        r.$isJointVLAN() &&
                        (p.service = 'iptv_voip');
                    }),
                  r.$Groups
                );
              })(r);
            },
          ],
          services: {
            internet: {
              '->': !0,
              '?': [
                '$root',
                function(r) {
                  return !!r.$InternetStep.UseVLAN;
                },
              ],
              type: 'want',
              qos: 0,
              vid: [
                '$root',
                '?',
                function(r) {
                  return r.$InternetStep.VID;
                },
              ],
            },
            voip: {
              '->': !0,
              '?': [
                '$root',
                function(r) {
                  return (
                    !!r.$VoIPStep &&
                    r.$VoIPStep.Use &&
                    !r.$isJointVLAN() &&
                    r.$isUseService('voip')
                  );
                },
              ],
              type: [
                '$root',
                '?',
                function(r) {
                  return r.$VoIPStep.UseVID ? 'bridge' : 'wanu';
                },
              ],
              qos: 0,
              vid: [
                '$root',
                '?',
                function(r) {
                  return r.$VoIPStep.VID;
                },
              ],
            },
            iptv: {
              '->': !0,
              '?': [
                '$root',
                function(r) {
                  return (
                    !!r.$IPTVStep &&
                    r.$IPTVStep.Use &&
                    !r.$isJointVLAN() &&
                    r.$isUseService('iptv')
                  );
                },
              ],
              type: [
                '$root',
                '?',
                function(r) {
                  return r.$IPTVStep.UseVID ? 'bridge' : 'wanu';
                },
              ],
              qos: 0,
              vid: [
                '$root',
                '?',
                function(r) {
                  return r.$IPTVStep.VID;
                },
              ],
            },
            iptv_voip: {
              '->': !0,
              '?': [
                '$root',
                function(r) {
                  return r.$isJointVLAN();
                },
              ],
              type: [
                '$root',
                '?',
                function(r) {
                  return r.$IPTVStep.UseVID ? 'bridge' : 'wanu';
                },
              ],
              qos: 0,
              vid: [
                '$root',
                '?',
                function(r) {
                  return r.$IPTVStep.VID;
                },
              ],
            },
          },
        },
        WiFi: [
          '$root',
          function(r) {
            return Components.WiFi.build(r);
          },
        ],
        LAN: [
          '$root',
          function(r) {
            return Components.LAN.build(r);
          },
        ],
        SystemPassword: {
          '->': !0,
          '?': [
            '$root',
            function(r) {
              return !!r.$PasswordStep;
            },
          ],
          Login: [
            '$root',
            function(r) {
              return r.$PasswordStep.Login;
            },
          ],
          Password: [
            '$root',
            function(r) {
              return r.$PasswordStep.Password;
            },
          ],
        },
        SystemLanguage: {
          '->': !0,
          '?': [
            '$root',
            function(r) {
              return !!r.$SystemLanguage;
            },
          ],
          Language: [
            '$root',
            function(r) {
              return r.$SystemLanguage.Language;
            },
          ],
        },
        RemoteUpdate: {
          '->': ['?', 'Enable'],
          '?': [
            '$root',
            function(r) {
              return !!r.$RemoteUpdate;
            },
          ],
          Enable: [
            '$root',
            function(r) {
              return r.$RemoteUpdate.Enable;
            },
          ],
          ServerName: [
            '$root',
            function(r) {
              return r.$RemoteUpdate.ServerName;
            },
          ],
        },
        DeviceMode: {
          '->': ['?', 'Mode'],
          '?': [
            '$root',
            function(r) {
              return !!r.$DeviceMode && !!r.$DeviceMode.Mode;
            },
          ],
          Mode: [
            '$root',
            function(r) {
              return r.$DeviceMode.Mode;
            },
          ],
        },
      },
      View: {
        '->': !0,
        'Config.WAN.PPPoE.Connection.1.': [
          '$root',
          function(r) {
            return (
              r.$isWANType('pppoe') ||
              r.$isWANType('dynpppoe') ||
              r.$isWANType('statpppoe') ||
              void 0
            );
          },
        ],
        'Config.WAN.PPPoEv6.Connection.1.': [
          '$root',
          function(r) {
            return r.$isWANType('pppoev6') || void 0;
          },
        ],
        'Config.WAN.3G.Connection.1.': [
          '$root',
          function(r) {
            return r.$isWANType('3g') || void 0;
          },
        ],
        'Config.WAN.LTE.Connection.1.': [
          '$root',
          function(r) {
            return r.$isWANType('lte') || void 0;
          },
        ],
        'Config.WAN.PPPoEDual.Connection.1.': [
          '$root',
          function(r) {
            return r.$isWANType('pppoedual') || void 0;
          },
        ],
        'Config.WAN.PPTP.Connection.1.': [
          '$root',
          function(r) {
            return (
              r.$isWANType('dynpptp') ||
              r.$isWANType('statpptp') ||
              r.$isWANType('dynl2tp') ||
              r.$isWANType('statl2tp') ||
              void 0
            );
          },
        ],
        'Config.WAN.IPv4oE.Connection.1.': [
          '$root',
          function(r) {
            return (
              r.$isWANType('dynip') ||
              r.$isWANType('statip') ||
              r.$isWANType('statl2tp') ||
              r.$isWANType('statpptp') ||
              r.$isWANType('statpppoe') ||
              void 0
            );
          },
        ],
        'Config.WAN.IPv6oE.Connection.1.': [
          '$root',
          function(r) {
            return (
              r.$isWANType('dynipv6') || r.$isWANType('statipv6') || void 0
            );
          },
        ],
      },
    });
  },
  126: function(module, exports) {
    'use strict';
    'use version 6';
    function supportedStandards(modes, band) {
      return modes
        ? _.chain(modes)
            .map(function(mode) {
              return standardsModes[mode.Name]
                ? standardsModes[mode.Name].split(',')
                : [];
            })
            .flatten()
            .uniq()
            .value()
            .join(',')
        : void 0;
    }
    function operatingStandards(modes, id, band) {
      return modes
        ? supportedStandards(
            _.filter(modes, function(m) {
              return m.Id == id;
            })
          )
        : void 0;
    }
    module.exports = {
      getSecurityMode: function(data) {
        return data.SecurityMode
          ? data.SecurityMode
          : data.WithoutPass
            ? 'None'
            : data.DefaultSecurityMode && 'None' != data.DefaultSecurityMode
              ? data.DefaultSecurityMode
              : 'WPA2-Personal';
      },
      getOperatingStandards: function(data, band) {
        return operatingStandards(data.modeAvailable, data.wirelessMode, band);
      },
      getSupportedStandards: function(data, band) {
        return supportedStandards(data.modeAvailable, band);
      },
    };
    var standardsModes = {
      '802.11 A': 'a',
      '802.11 B': 'b',
      '802.11 G': 'g',
      '802.11 N': 'n',
      '802.11 AC': 'ac',
      '802.11 B/G mixed': 'bg',
      '802.11 G/N mixed': 'gn',
      '802.11 A/N mixed': 'an',
      '802.11 B/G/N mixed': 'bgn',
      '802.11 B/G/N mixed + 256QAM': 'bgnac',
      '802.11 AC/N mixed': 'acn',
      '802.11 AC/A/N mixed': 'acan',
    };
  },
  127: function(module, exports, __webpack_require__) {
    'use strict';
    'use version 6';
    var T = (__webpack_require__(3), __webpack_require__(84).T),
      helper = __webpack_require__(126),
      Components = {
        WiFiBand: function(band) {
          function getClientChannel(client) {
            return client && band + 'GHz' == client.Band
              ? client.Channel
              : 'auto';
          }
          function getWDSChannel(wds) {
            switch (band) {
              case '2.4':
                return wds.Channel24GHz;
              case '5':
                return wds.Channel5GHz;
            }
          }
          function getChannel(r) {
            return r.$isWDSMode
              ? getWDSChannel(r.$WiFiWdsStep)
              : r.$isIfaceType('wifi_client')
                ? getClientChannel(r.$WifiClientStep)
                : 'auto';
          }
          return T({
            '->': ['?', 'AccessPoint', 'EndPoint', 'Enable'],
            $InterfaceStep: ':external',
            $isIfaceType: ':external',
            $WiFiStep: ':external',
            $hasWifi: ':external',
            $WifiClientStep: ':external',
            $WiFiWdsStep: ':external',
            $isWDSMode: ':external',
            AccessPoint: {
              1: {
                '->': !0,
                SSID: [
                  '$root',
                  function(r) {
                    return r.$WiFiStep[band].SSID;
                  },
                ],
                Broadcast: [
                  '$root',
                  function(r) {
                    return r.$WiFiStep[band].EnableBroadcast;
                  },
                ],
                Security: {
                  '->': !0,
                  EncryptionType: [
                    '$root',
                    function(r) {
                      return r.$WiFiStep[band].WithoutPass ? '' : 'AES';
                    },
                  ],
                  ModeEnabled: [
                    '$root',
                    function(r) {
                      return helper.getSecurityMode(r.$WiFiStep[band]);
                    },
                  ],
                  ModesSupported:
                    'None,WEP-64,WEP-128,WPA-Enterprise,WPA-Personal,WPA2-Enterprise,WPA2-Personal,WPA-WPA2-Enterprise,WPA-WPA2-Personal',
                  OpenWEP: !1,
                  PreSharedKey: [
                    '$root',
                    function(r) {
                      return r.$WiFiStep[band].WithoutPass
                        ? ''
                        : r.$WiFiStep[band].PSK;
                    },
                  ],
                },
              },
              2: {
                '->': !0,
                '?': [
                  '$root',
                  function(r) {
                    return r.$hasWifi(band, 'GuestAP');
                  },
                ],
                SSID: [
                  '$root',
                  function(r) {
                    return r.$WiFiStep[band].GuestSSID;
                  },
                ],
                BandwidthRestricted: [
                  '$root',
                  function(r) {
                    return r.$WiFiStep[band].GuestBandwidthRestricted
                      ? r.$WiFiStep[band].GuestBandwidthRestricted.value
                      : void 0;
                  },
                ],
                MaxAssociatedDevices: [
                  '$root',
                  function(r) {
                    return r.$WiFiStep[band].GuestMaxAssociatedDevices;
                  },
                ],
                GuestAccess: [
                  '$root',
                  function(r) {
                    return r.$WiFiStep[band].supportGuestAccess ? !0 : void 0;
                  },
                ],
                Security: {
                  '->': !0,
                  EncryptionType: [
                    '$root',
                    function(r) {
                      return r.$WiFiStep[band].GuestWithoutPass ? '' : 'AES';
                    },
                  ],
                  ModeEnabled: [
                    '$root',
                    function(r) {
                      return r.$WiFiStep[band].GuestWithoutPass
                        ? 'None'
                        : 'WPA2-Personal';
                    },
                  ],
                  ModesSupported:
                    'None,WEP-64,WEP-128,WPA-Enterprise,WPA-Personal,WPA2-Enterprise,WPA2-Personal,WPA-WPA2-Enterprise,WPA-WPA2-Personal',
                  OpenWEP: !1,
                  PreSharedKey: [
                    '$root',
                    function(r) {
                      return r.$WiFiStep[band].GuestWithoutPass
                        ? ''
                        : r.$WiFiStep[band].GuestPSK;
                    },
                  ],
                },
              },
            },
            AccessPointNumberOfEntries: [
              '$root',
              function(r) {
                return r.$hasWifi(band, 'GuestAP') ? 2 : 1;
              },
            ],
            AccessPointCurrent: 1,
            AccessPointMax: [
              '$root',
              function(r) {
                return r.$hasWifi(band, 'GuestAP') ? 2 : 1;
              },
            ],
            AutoChannelSupported: !0,
            AutoChannelEnable: [
              '$root',
              function(r) {
                return !r.$isIfaceType('wifi_client') || !r.$WifiClientStep;
              },
            ],
            Channel: [
              '$root',
              function(r) {
                return getChannel(r);
              },
            ],
            Enable: [
              '$root',
              function(r) {
                return r.$WiFiStep[band].Enable;
              },
            ],
            MaxAssociatedDevice: '0',
            OperatingFrequencyBand: band + 'GHz',
            PossibleChannels: [],
            OperatingStandards: [
              '$root',
              function(r) {
                return helper.getOperatingStandards(
                  r.$WiFiStep[band],
                  band + 'GHz'
                );
              },
            ],
            SupportedStandards: [
              '$root',
              function(r) {
                return helper.getSupportedStandards(
                  r.$WiFiStep[band],
                  band + 'GHz'
                );
              },
            ],
            EndPoint: {
              '->': ['?', '1'],
              '?': [
                '$root',
                function(r) {
                  return (
                    !!r.$WifiClientStep &&
                    !!r.$isIfaceType('wifi_client') &&
                    !r.$isWDSMode
                  );
                },
              ],
              1: [
                '$root',
                function(r) {
                  return r.$WifiClientStep.Band &&
                    r.$WifiClientStep.Band != band + 'GHz'
                    ? void 0
                    : r.$WifiClientStep;
                },
              ],
            },
          });
        },
        WiFi: T({
          '->': [
            '$WiFiStep',
            '$WifiClientStep',
            '$InterfaceStep',
            '$hasWifi',
            '$hasRadio',
            '$isWDSMode',
            '$hasBands',
            '?',
            'Radio',
            'EndPoint',
            'WDS',
            'SupportedFrequencyBands',
          ],
          '?': [
            '$root',
            function(r) {
              return !!r.$hasBands || !!r.$isWDSMode;
            },
          ],
          $WiFiStep: ':external',
          $WifiClientStep: ':external',
          $WiFiWdsStep: ':external',
          $InterfaceStep: ':external',
          $isIfaceType: ':external',
          $isWDSMode: [
            '$InterfaceStep',
            function(i) {
              return i && 'WDS' == i.WiFiMode ? !0 : void 0;
            },
          ],
          $hasWifi: [
            '$WiFiStep',
            function(w) {
              return function(r, i) {
                return !!w && !!w[r] && !!w[r][i];
              };
            },
          ],
          $hasRadio: [
            '$WiFiStep',
            function(w) {
              return function(i) {
                return !!w && !!w[i];
              };
            },
          ],
          $hasBands: [
            '$root',
            function(r) {
              return r.$hasRadio('2.4') || r.$hasRadio('5') || void 0;
            },
          ],
          WDS: [
            '$root',
            function(r) {
              return r.$isWDSMode ? r.$WiFiWdsStep : void 0;
            },
          ],
          Radio: {
            '->': ['?', '1', '2'],
            '?': [
              '$root',
              function(r) {
                return !!r.$hasBands;
              },
            ],
            1: [
              '$root',
              function(r) {
                return r.$hasRadio('2.4')
                  ? Components.WiFiBand('2.4').build(r)
                  : void 0;
              },
            ],
            2: [
              '$root',
              function(r) {
                return r.$hasRadio('5')
                  ? Components.WiFiBand('5').build(r)
                  : void 0;
              },
            ],
          },
          SupportedFrequencyBands: [
            '$root',
            '$hasBands*',
            function(r) {
              return r.$hasRadio('2.4')
                ? '2.4GHz'
                : '' + r.$hasRadio('5')
                  ? '5GHz'
                  : '';
            },
          ],
        }),
        LAN: T({
          '->': ['$LANStep', '?', '1'],
          '?': [
            '$root',
            function(r) {
              return !!r.$LANStep;
            },
          ],
          $LANStep: ':external',
          1: {
            '->': !0,
            __l2Key: '@any@',
            __l3Key: '@any@',
            IPv4: [
              '$root',
              function(r) {
                return r.$LANStep.IPv4;
              },
            ],
            IPv6: [
              '$root',
              function(r) {
                return r.$LANStep.IPv6;
              },
            ],
          },
        }),
        WAN: {
          IPoE: T({
            '->': [
              '$isWANType',
              '?',
              '$Device',
              '$Input',
              '$MediaType',
              '$Media',
              '$VLAN',
              '$IsDSL',
              '__LowerLayer',
              '$IsStatic',
              '$IsDynamic',
              '$IsV6',
              '$IsV4',
              'Name',
              'GatewayIPAddress',
              'StaticIP',
              'Kabinet',
              'Media',
              'MediaType',
              'Flags',
            ],
            '?': [
              '$root',
              function(r) {
                return (
                  r.$isWANType('ipoa') ||
                  r.$isWANType('dynip') ||
                  r.$isWANType('dynipv6') ||
                  r.$isWANType('statip') ||
                  r.$isWANType('statipv6') ||
                  r.$isWANType('statpppoe') ||
                  r.$isWANType('statpptp') ||
                  r.$isWANType('statl2tp') ||
                  r.$isWANType('lte')
                );
              },
            ],
            $Device: ':external',
            $Input: ':external',
            $isWANType: ':external',
            $MediaType: ':external',
            $Media: ':external',
            $VLAN: ':external',
            $IsDSL: [
              '$Device',
              function(d) {
                return 'DSL' == d || void 0;
              },
            ],
            $IsLTE: [
              '$root',
              function(r) {
                return r.$isWANType('lte');
              },
            ],
            $IsStatic: [
              '$root',
              function(r) {
                return (
                  r.$isWANType('ipoa') ||
                  r.$isWANType('statipv6') ||
                  r.$isWANType('statip') ||
                  r.$isWANType('statpppoe') ||
                  r.$isWANType('statl2tp') ||
                  r.$isWANType('statpptp') ||
                  void 0
                );
              },
            ],
            $IsDynamic: [
              '$root',
              function(r) {
                return (
                  r.$isWANType('dynip') ||
                  r.$isWANType('dynipv6') ||
                  r.$isWANType('lte') ||
                  void 0
                );
              },
            ],
            $IsV6: [
              '$root',
              function(r) {
                return (
                  r.$isWANType('statipv6') || r.$isWANType('dynipv6') || void 0
                );
              },
            ],
            $IsV4: [
              '$root',
              function(r) {
                return (
                  r.$isWANType('ipoa') ||
                  r.$isWANType('statip') ||
                  r.$isWANType('dynip') ||
                  r.$isWANType('lte') ||
                  void 0
                );
              },
            ],
            Enable: !0,
            DNSIPv6Automatical: [
              '$root',
              function(r) {
                return (
                  r.$isWANType('dynipv6') || r.$isWANType('statipv6') || void 0
                );
              },
            ],
            Name: [
              '$Input',
              function(i) {
                switch (i.WANType) {
                  case 'dynip':
                    return 'dynamic_Internet';
                  case 'dynipv6':
                    return 'dynamicv6_Internet';
                  case 'statipv6':
                    return 'staticv6_Internet';
                  case 'statip':
                  case 'statpppoe':
                  case 'statpptp':
                  case 'statl2tp':
                    return 'static_Internet';
                  case 'ipoa':
                    return 'ipv4oa';
                }
                return i.WANType + '_Internet';
              },
            ],
            GatewayIPAddressBySlaac: [
              '$IsDynamic*',
              '$IsV6*',
              function() {
                return !0;
              },
            ],
            DNSAutomatical: [
              '$root',
              function(r) {
                return (
                  r.$isWANType('statipv6') ||
                  r.$isWANType('dynipv6') ||
                  r.$isWANType('dynip') ||
                  r.$isWANType('lte')
                );
              },
            ],
            DNSServer1: [
              '$Input',
              '$root',
              function(i) {
                return i.DNSServer1 ? i.DNSServer1 : '';
              },
            ],
            DNSServer2: [
              '$Input',
              '$root',
              function(i) {
                return i.DNSServer2 ? i.DNSServer2 : '';
              },
            ],
            DefaultGatewayv6: [
              '$IsV6',
              function(is) {
                return !!is || void 0;
              },
            ],
            DefaultGateway: [
              '$root',
              '$IsV6',
              function(r, is) {
                return r.$isWANType('statpppoe') ? !1 : !is || void 0;
              },
            ],
            Origin: [
              '$IsDynamic',
              '$Input',
              '$IsV6*',
              function(is, i) {
                return is ? i.Origin : 'Static';
              },
            ],
            GatewayIPAddress: [
              '$Input',
              '$root',
              function(i, r) {
                return r.$isWANType('dynipv6') ? '' : i.GatewayIPAddress;
              },
            ],
            Username: [
              '$Input',
              '$IsLTE*',
              function(i) {
                return i.Username;
              },
            ],
            Password: [
              '$Input',
              '$IsLTE*',
              function(i) {
                return i.WithoutAuth ? '' : i.Password;
              },
            ],
            APN: [
              '$Input',
              '$IsLTE*',
              function(i) {
                return i.APN;
              },
            ],
            __Key: 'create',
            __Layer: '3',
            __LowerLayer: [
              '$root',
              function(r) {
                return r.$IsDSL ? 'create' : '@any@';
              },
            ],
            Hostname: [
              '$root',
              function(r) {
                return r.$isWANType('dynip') || r.$isWANType('lte')
                  ? ''
                  : void 0;
              },
            ],
            VendorID: [
              '$root',
              '$Input',
              function(r, i) {
                return r.$isWANType('dynip')
                  ? i.VendorID || ''
                  : r.$isWANType('lte')
                    ? ''
                    : void 0;
              },
            ],
            Flags: {
              '->': !0,
              IGMP: [
                '$root',
                function(r) {
                  return r.$isWANType('dynipv6') || r.$isWANType('statipv6')
                    ? !1
                    : !r.$isWANType('lte');
                },
              ],
              NAT: [
                '$root',
                function(r) {
                  return r.$IsV4 ? !0 : r.$isWANType('statipv6') ? void 0 : !1;
                },
              ],
              Firewall: !0,
              Ping: [
                '$parent',
                function(p) {
                  return !!p.$Input && !!p.$Input.Ping;
                },
              ],
              AltRoutingTable: [
                '$root',
                function(r) {
                  return r.$IsDSL ? !1 : void 0;
                },
              ],
              RIP: [
                '$root',
                function(r) {
                  return r.$IsDSL ? !1 : void 0;
                },
              ],
            },
            StaticIP: {
              '->': !0,
              '?': [
                '$parent',
                function(p) {
                  return !!p.$IsStatic;
                },
              ],
              1: {
                '->': ['$Input', 'Address', 'SubnetMask'],
                $Input: [
                  '$root',
                  function(r) {
                    return r.$Input;
                  },
                ],
                Address: [
                  '$Input',
                  function(i) {
                    return i.Address;
                  },
                ],
                SubnetMask: [
                  '$Input',
                  function(i) {
                    return i.SubnetMask;
                  },
                ],
              },
            },
            Kabinet: {
              '->': !0,
              '?': [
                '$root',
                '$parent',
                function(r, p) {
                  return (
                    (r.$isWANType('dynip') || r.$isWANType('statip')) &&
                    !!p.$Input.Kabinet
                  );
                },
              ],
              Enable: [
                '$parent',
                function(p) {
                  return !!p.$Input.Kabinet.Enable;
                },
              ],
              Password: [
                '$parent',
                function(p) {
                  return p.$Input.Kabinet.Password || '';
                },
              ],
            },
            VLAN: [
              '$VLAN',
              function(v) {
                return v;
              },
            ],
            StaticIPAddress0: [
              '$Input',
              '$IsStatic*',
              function(i) {
                return i.Address;
              },
            ],
            StaticIPSubnetMask0: [
              '$Input',
              '$IsStatic*',
              function(i) {
                return i.SubnetMask;
              },
            ],
            AddressingType: [
              '$IsDynamic',
              function(is) {
                return is ? 'DHCP' : 'Static';
              },
            ],
            Media: [
              '$root',
              function(r) {
                return r.$Media;
              },
            ],
            MediaType: [
              '$root',
              function(r) {
                return r.$MediaType;
              },
            ],
          }),
        },
      };
    module.exports = Components;
  },
});
